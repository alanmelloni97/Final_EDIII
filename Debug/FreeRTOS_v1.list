
FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006208  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b0  080064b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064b8  080064b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004168  20000074  08006534  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041dc  08006534  000241dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015df1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9d  00000000  00000000  00035e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00039ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cd0  00000000  00000000  0003af80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c12  00000000  00000000  00052c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095a4f  00000000  00000000  00068862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe2b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  000fe304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006390 	.word	0x08006390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006390 	.word	0x08006390

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fcb9 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f851 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f955 	bl	8000884 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f929 	bl	8000830 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005de:	f000 f8b7 	bl	8000750 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Timer que captura el ECHO del sensor
 80005e2:	2100      	movs	r1, #0
 80005e4:	481c      	ldr	r0, [pc, #112]	; (8000658 <main+0x90>)
 80005e6:	f001 fd77 	bl	80020d8 <HAL_TIM_IC_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  semaforo1=xSemaphoreCreateBinary();
 80005ea:	2203      	movs	r2, #3
 80005ec:	2100      	movs	r1, #0
 80005ee:	2001      	movs	r0, #1
 80005f0:	f003 f984 	bl	80038fc <xQueueGenericCreate>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a19      	ldr	r2, [pc, #100]	; (800065c <main+0x94>)
 80005f8:	6013      	str	r3, [r2, #0]


  xSemaphoreGive(semaforo1);
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <main+0x94>)
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	f003 f9d4 	bl	80039b0 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <main+0x98>)
 800060a:	1d3c      	adds	r4, r7, #4
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f803 	bl	800362a <osThreadCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <main+0x9c>)
 8000628:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((void*) TrigSensor, "primera tarea", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2301      	movs	r3, #1
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	490c      	ldr	r1, [pc, #48]	; (8000668 <main+0xa0>)
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <main+0xa4>)
 800063a:	f003 fdb0 	bl	800419e <xTaskCreate>
  xTaskCreate((void*) FiltroDistancia, "segunda tarea", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <main+0xa8>)
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0xac>)
 800064e:	f003 fda6 	bl	800419e <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000652:	f002 ffe3 	bl	800361c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0x8e>
 8000658:	20000344 	.word	0x20000344
 800065c:	200003d4 	.word	0x200003d4
 8000660:	080063d4 	.word	0x080063d4
 8000664:	200003d0 	.word	0x200003d0
 8000668:	080063b4 	.word	0x080063b4
 800066c:	08000a81 	.word	0x08000a81
 8000670:	080063c4 	.word	0x080063c4
 8000674:	08000ab1 	.word	0x08000ab1

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 f9b2 	bl	80059f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <SystemClock_Config+0xd0>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd4>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f000 ff12 	bl	800152c <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 fa55 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f974 	bl	8001a1c <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073a:	f000 fa3f 	bl	8000bbc <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_TIM2_Init+0xdc>)
 800077c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000780:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_TIM2_Init+0xdc>)
 8000784:	2253      	movs	r2, #83	; 0x53
 8000786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_TIM2_Init+0xdc>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800078e:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_TIM2_Init+0xdc>)
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <MX_TIM2_Init+0xdc>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_TIM2_Init+0xdc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a2:	4822      	ldr	r0, [pc, #136]	; (800082c <MX_TIM2_Init+0xdc>)
 80007a4:	f001 fb8c 	bl	8001ec0 <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007ae:	f000 fa05 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	4619      	mov	r1, r3
 80007be:	481b      	ldr	r0, [pc, #108]	; (800082c <MX_TIM2_Init+0xdc>)
 80007c0:	f001 ff48 	bl	8002654 <HAL_TIM_ConfigClockSource>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007ca:	f000 f9f7 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007ce:	4817      	ldr	r0, [pc, #92]	; (800082c <MX_TIM2_Init+0xdc>)
 80007d0:	f001 fc28 	bl	8002024 <HAL_TIM_IC_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007da:	f000 f9ef 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <MX_TIM2_Init+0xdc>)
 80007ee:	f002 fab9 	bl	8002d64 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007f8:	f000 f9e0 	bl	8000bbc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000800:	2301      	movs	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_TIM2_Init+0xdc>)
 8000814:	f001 fe82 	bl	800251c <HAL_TIM_IC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800081e:	f000 f9cd 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000344 	.word	0x20000344

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f002 fafe 	bl	8002e68 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f9a3 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000038c 	.word	0x2000038c
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a30      	ldr	r2, [pc, #192]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a29      	ldr	r2, [pc, #164]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a22      	ldr	r2, [pc, #136]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_GPIO_Init+0xe0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2121      	movs	r1, #33	; 0x21
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <MX_GPIO_Init+0xe4>)
 8000910:	f000 fdc0 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4810      	ldr	r0, [pc, #64]	; (800096c <MX_GPIO_Init+0xe8>)
 800092c:	f000 fc2e 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|LD2_Pin;
 8000930:	2321      	movs	r3, #33	; 0x21
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <MX_GPIO_Init+0xe4>)
 8000948:	f000 fc20 	bl	800118c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2105      	movs	r1, #5
 8000950:	2028      	movs	r0, #40	; 0x28
 8000952:	f000 fbf1 	bl	8001138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000956:	2028      	movs	r0, #40	; 0x28
 8000958:	f000 fc0a 	bl	8001170 <HAL_NVIC_EnableIRQ>

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020800 	.word	0x40020800

08000970 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800097a:	2120      	movs	r1, #32
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <HAL_GPIO_EXTI_Callback+0x1c>)
 800097e:	f000 fda2 	bl	80014c6 <HAL_GPIO_TogglePin>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_TIM_IC_CaptureCallback>:
float distancia=0;

uint32_t uartBufferLen=0;
char uart_buf [50];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

	if(flancoAscendenteCapturado==0){
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d11b      	bne.n	80009d8 <HAL_TIM_IC_CaptureCallback+0x48>
		valorInicial=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f001 ff1e 	bl	80027e4 <HAL_TIM_ReadCapturedValue>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80009ae:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=1;
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6a1a      	ldr	r2, [r3, #32]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 020a 	bic.w	r2, r2, #10
 80009c4:	621a      	str	r2, [r3, #32]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6a1a      	ldr	r2, [r3, #32]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f042 0202 	orr.w	r2, r2, #2
 80009d4:	621a      	str	r2, [r3, #32]
		else if (valorFinal <= valorInicial)
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorFinal+valorInicial;
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);

	}
}
 80009d6:	e042      	b.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xce>
	else if(flancoAscendenteCapturado==1){
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d13e      	bne.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xce>
		valorFinal=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009e0:	2100      	movs	r1, #0
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f001 fefe 	bl	80027e4 <HAL_TIM_ReadCapturedValue>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80009ee:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=0;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6a1a      	ldr	r2, [r3, #32]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 020a 	bic.w	r2, r2, #10
 8000a04:	621a      	str	r2, [r3, #32]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6a12      	ldr	r2, [r2, #32]
 8000a10:	621a      	str	r2, [r3, #32]
		if(valorFinal>valorInicial)
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dd07      	ble.n	8000a2e <HAL_TIM_IC_CaptureCallback+0x9e>
			pulso=valorFinal-valorInicial;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e011      	b.n	8000a52 <HAL_TIM_IC_CaptureCallback+0xc2>
		else if (valorFinal <= valorInicial)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dc0b      	bgt.n	8000a52 <HAL_TIM_IC_CaptureCallback+0xc2>
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorFinal+valorInicial;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a50:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2101      	movs	r1, #1
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 f8a7 	bl	8003bac <xQueueGiveFromISR>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200003d8 	.word	0x200003d8
 8000a6c:	200003dc 	.word	0x200003dc
 8000a70:	200003e0 	.word	0x200003e0
 8000a74:	200003e4 	.word	0x200003e4
 8000a78:	20000344 	.word	0x20000344
 8000a7c:	200003d4 	.word	0x200003d4

08000a80 <TrigSensor>:


void TrigSensor(void const * argument)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <TrigSensor+0x2c>)
 8000a8e:	f000 fd01 	bl	8001494 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f003 fcd0 	bl	8004438 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <TrigSensor+0x2c>)
 8000a9e:	f000 fcf9 	bl	8001494 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);
 8000aa2:	2028      	movs	r0, #40	; 0x28
 8000aa4:	f003 fcc8 	bl	8004438 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000aa8:	e7ee      	b.n	8000a88 <TrigSensor+0x8>
 8000aaa:	bf00      	nop
 8000aac:	40020000 	.word	0x40020000

08000ab0 <FiltroDistancia>:
}

int muestras=0;

void FiltroDistancia(void const * argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <FiltroDistancia+0x8c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 f901 	bl	8003cc8 <xQueueSemaphoreTake>

	  distancia=(float) pulso*343*100/(2*1000000);
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <FiltroDistancia+0x90>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000b44 <FiltroDistancia+0x94>
 8000ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ada:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000b48 <FiltroDistancia+0x98>
 8000ade:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ae2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000b4c <FiltroDistancia+0x9c>
 8000ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <FiltroDistancia+0xa0>)
 8000aec:	edc3 7a00 	vstr	s15, [r3]
	  muestras++;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <FiltroDistancia+0xa4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <FiltroDistancia+0xa4>)
 8000af8:	6013      	str	r3, [r2, #0]
	  if(muestras==10){
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <FiltroDistancia+0xa4>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	d1da      	bne.n	8000ab8 <FiltroDistancia+0x8>
		  muestras=0;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <FiltroDistancia+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
		  //filtrado
		  uartBufferLen=sprintf(uart_buf,"%u Cm \r\n",(int)distancia);
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <FiltroDistancia+0xa0>)
 8000b0a:	edd3 7a00 	vldr	s15, [r3]
 8000b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b12:	ee17 2a90 	vmov	r2, s15
 8000b16:	4910      	ldr	r1, [pc, #64]	; (8000b58 <FiltroDistancia+0xa8>)
 8000b18:	4810      	ldr	r0, [pc, #64]	; (8000b5c <FiltroDistancia+0xac>)
 8000b1a:	f005 f87f 	bl	8005c1c <siprintf>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <FiltroDistancia+0xb0>)
 8000b24:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <FiltroDistancia+0xb0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	490a      	ldr	r1, [pc, #40]	; (8000b5c <FiltroDistancia+0xac>)
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <FiltroDistancia+0xb4>)
 8000b34:	f002 f9e5 	bl	8002f02 <HAL_UART_Transmit>
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000b38:	e7be      	b.n	8000ab8 <FiltroDistancia+0x8>
 8000b3a:	bf00      	nop
 8000b3c:	200003d4 	.word	0x200003d4
 8000b40:	200003e4 	.word	0x200003e4
 8000b44:	43ab8000 	.word	0x43ab8000
 8000b48:	42c80000 	.word	0x42c80000
 8000b4c:	49f42400 	.word	0x49f42400
 8000b50:	200003e8 	.word	0x200003e8
 8000b54:	20000424 	.word	0x20000424
 8000b58:	080063f0 	.word	0x080063f0
 8000b5c:	200003f0 	.word	0x200003f0
 8000b60:	200003ec 	.word	0x200003ec
 8000b64:	2000038c 	.word	0x2000038c

08000b68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {

	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2101      	movs	r1, #1
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <StartDefaultTask+0x2c>)
 8000b76:	f000 fc8d 	bl	8001494 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_RATE_MS);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f003 fc5c 	bl	8004438 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <StartDefaultTask+0x2c>)
 8000b86:	f000 fc85 	bl	8001494 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_RATE_MS);
 8000b8a:	2028      	movs	r0, #40	; 0x28
 8000b8c:	f003 fc54 	bl	8004438 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000b90:	e7ee      	b.n	8000b70 <StartDefaultTask+0x8>
 8000b92:	bf00      	nop
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f000 f9ed 	bl	8000f88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40010000 	.word	0x40010000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_MspInit+0x54>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <HAL_MspInit+0x54>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x54>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_MspInit+0x54>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_MspInit+0x54>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_MspInit+0x54>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	210f      	movs	r1, #15
 8000c0a:	f06f 0001 	mvn.w	r0, #1
 8000c0e:	f000 fa93 	bl	8001138 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d134      	bne.n	8000cac <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_TIM_Base_MspInit+0x94>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <HAL_TIM_Base_MspInit+0x94>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_TIM_Base_MspInit+0x94>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_TIM_Base_MspInit+0x94>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <HAL_TIM_Base_MspInit+0x94>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_TIM_Base_MspInit+0x94>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <HAL_TIM_Base_MspInit+0x98>)
 8000c98:	f000 fa78 	bl	800118c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	201c      	movs	r0, #28
 8000ca2:	f000 fa49 	bl	8001138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f000 fa62 	bl	8001170 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d16:	230c      	movs	r3, #12
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000d32:	f000 fa2b 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	2019      	movs	r0, #25
 8000d62:	f000 f9e9 	bl	8001138 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d66:	2019      	movs	r0, #25
 8000d68:	f000 fa02 	bl	8001170 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <HAL_InitTick+0xa0>)
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_InitTick+0xa0>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_InitTick+0xa0>)
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d88:	f107 0210 	add.w	r2, r7, #16
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 f862 	bl	8001e5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d98:	f001 f84c 	bl	8001e34 <HAL_RCC_GetPCLK2Freq>
 8000d9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_InitTick+0xa4>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3b01      	subs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_InitTick+0xac>)
 8000db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_InitTick+0xa8>)
 8000db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dce:	f001 f877 	bl	8001ec0 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dda:	f001 f8c1 	bl	8001f60 <HAL_TIM_Base_Start_IT>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	20000428 	.word	0x20000428
 8000df8:	40010000 	.word	0x40010000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e2e:	f001 fa6d 	bl	800230c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000428 	.word	0x20000428

08000e3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM2_IRQHandler+0x10>)
 8000e42:	f001 fa63 	bl	800230c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000344 	.word	0x20000344

08000e50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e58:	f000 fb50 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f004 fd74 	bl	800597c <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20018000 	.word	0x20018000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000470 	.word	0x20000470
 8000ec8:	200041e0 	.word	0x200041e0

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd7 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f004 fd33 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fb51 	bl	80005c8 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f34:	080064c0 	.word	0x080064c0
  ldr r2, =_sbss
 8000f38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f3c:	200041dc 	.word	0x200041dc

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f8d8 	bl	8001122 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f7ff feea 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fe26 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000474 	.word	0x20000474

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000474 	.word	0x20000474

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff4c 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114a:	f7ff ff61 	bl	8001010 <__NVIC_GetPriorityGrouping>
 800114e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	6978      	ldr	r0, [r7, #20]
 8001156:	f7ff ffb1 	bl	80010bc <NVIC_EncodePriority>
 800115a:	4602      	mov	r2, r0
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff80 	bl	8001068 <__NVIC_SetPriority>
}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff54 	bl	800102c <__NVIC_EnableIRQ>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e159      	b.n	800145c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8148 	bne.w	8001456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a2 	beq.w	8001456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b57      	ldr	r3, [pc, #348]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a56      	ldr	r2, [pc, #344]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b54      	ldr	r3, [pc, #336]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_GPIO_Init+0x2ec>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a49      	ldr	r2, [pc, #292]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x202>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_Init+0x2f4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1fe>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_GPIO_Init+0x2f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1fa>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a46      	ldr	r2, [pc, #280]	; (8001488 <HAL_GPIO_Init+0x2fc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1f6>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a45      	ldr	r2, [pc, #276]	; (800148c <HAL_GPIO_Init+0x300>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1f2>
 800137a:	2304      	movs	r3, #4
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800137e:	2307      	movs	r3, #7
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	; (8001478 <HAL_GPIO_Init+0x2ec>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b38      	ldr	r3, [pc, #224]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a2f      	ldr	r2, [pc, #188]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a24      	ldr	r2, [pc, #144]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_GPIO_Init+0x304>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_GPIO_Init+0x304>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_GPIO_Init+0x304>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_GPIO_Init+0x304>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f aea2 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	460b      	mov	r3, r1
 80014d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d8:	887a      	ldrh	r2, [r7, #2]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	041a      	lsls	r2, r3, #16
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	400b      	ands	r3, r1
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fa28 	bl	8000970 <HAL_GPIO_EXTI_Callback>
  }
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40013c00 	.word	0x40013c00

0800152c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e267      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d075      	beq.n	8001636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b04      	cmp	r3, #4
 8001554:	d00c      	beq.n	8001570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001556:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155e:	2b08      	cmp	r3, #8
 8001560:	d112      	bne.n	8001588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001562:	4b82      	ldr	r3, [pc, #520]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800156e:	d10b      	bne.n	8001588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	4b7e      	ldr	r3, [pc, #504]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d05b      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d157      	bne.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e242      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d106      	bne.n	80015a0 <HAL_RCC_OscConfig+0x74>
 8001592:	4b76      	ldr	r3, [pc, #472]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a75      	ldr	r2, [pc, #468]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xb0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x98>
 80015aa:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6f      	ldr	r2, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b6d      	ldr	r3, [pc, #436]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6c      	ldr	r2, [pc, #432]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xb0>
 80015c4:	4b69      	ldr	r3, [pc, #420]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a68      	ldr	r2, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fce4 	bl	8000fb0 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fce0 	bl	8000fb0 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e207      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xc0>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fcd0 	bl	8000fb0 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fccc 	bl	8000fb0 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1f3      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <HAL_RCC_OscConfig+0x240>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x152>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1c7      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4937      	ldr	r1, [pc, #220]	; (800176c <HAL_RCC_OscConfig+0x240>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e03a      	b.n	800170a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b34      	ldr	r3, [pc, #208]	; (8001770 <HAL_RCC_OscConfig+0x244>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fc85 	bl	8000fb0 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fc81 	bl	8000fb0 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1a8      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4925      	ldr	r1, [pc, #148]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_OscConfig+0x244>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc64 	bl	8000fb0 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc60 	bl	8000fb0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e187      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d036      	beq.n	8001784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d016      	beq.n	800174c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_RCC_OscConfig+0x248>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fc44 	bl	8000fb0 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fc40 	bl	8000fb0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e167      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x200>
 800174a:	e01b      	b.n	8001784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_OscConfig+0x248>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fc2d 	bl	8000fb0 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	e00e      	b.n	8001778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175a:	f7ff fc29 	bl	8000fb0 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d907      	bls.n	8001778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e150      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
 800176c:	40023800 	.word	0x40023800
 8001770:	42470000 	.word	0x42470000
 8001774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4b88      	ldr	r3, [pc, #544]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1ea      	bne.n	800175a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8097 	beq.w	80018c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001796:	4b81      	ldr	r3, [pc, #516]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10f      	bne.n	80017c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b7d      	ldr	r3, [pc, #500]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a7c      	ldr	r2, [pc, #496]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b7a      	ldr	r3, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b77      	ldr	r3, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x474>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <HAL_RCC_OscConfig+0x474>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a73      	ldr	r2, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x474>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7ff fbe9 	bl	8000fb0 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff fbe5 	bl	8000fb0 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e10c      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_RCC_OscConfig+0x474>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x2ea>
 8001808:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	4a63      	ldr	r2, [pc, #396]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6713      	str	r3, [r2, #112]	; 0x70
 8001814:	e01c      	b.n	8001850 <HAL_RCC_OscConfig+0x324>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b05      	cmp	r3, #5
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x30c>
 800181e:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	4a5e      	ldr	r2, [pc, #376]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6713      	str	r3, [r2, #112]	; 0x70
 800182a:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a5b      	ldr	r2, [pc, #364]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0x324>
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a57      	ldr	r2, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	4b55      	ldr	r3, [pc, #340]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a54      	ldr	r2, [pc, #336]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 0304 	bic.w	r3, r3, #4
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d015      	beq.n	8001884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fbaa 	bl	8000fb0 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185e:	e00a      	b.n	8001876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fba6 	bl	8000fb0 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0cb      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ee      	beq.n	8001860 <HAL_RCC_OscConfig+0x334>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7ff fb94 	bl	8000fb0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff fb90 	bl	8000fb0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e0b5      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1ee      	bne.n	800188c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b4:	4b39      	ldr	r3, [pc, #228]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80018ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a1 	beq.w	8001a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d05c      	beq.n	8001990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d141      	bne.n	8001962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_RCC_OscConfig+0x478>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb64 	bl	8000fb0 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fb60 	bl	8000fb0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e087      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69da      	ldr	r2, [r3, #28]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	3b01      	subs	r3, #1
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	491b      	ldr	r1, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_RCC_OscConfig+0x478>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fb39 	bl	8000fb0 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff fb35 	bl	8000fb0 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e05c      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x416>
 8001960:	e054      	b.n	8001a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_RCC_OscConfig+0x478>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fb22 	bl	8000fb0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fb1e 	bl	8000fb0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e045      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x444>
 800198e:	e03d      	b.n	8001a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e038      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000
 80019a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x4ec>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d028      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d121      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d11a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d111      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	085b      	lsrs	r3, r3, #1
 80019f0:	3b01      	subs	r3, #1
 80019f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0cc      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d90c      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0b8      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a70:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a58      	ldr	r2, [pc, #352]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a88:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	494d      	ldr	r1, [pc, #308]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d044      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d119      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e07f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d003      	beq.n	8001ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e067      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 0203 	bic.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4934      	ldr	r1, [pc, #208]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fa50 	bl	8000fb0 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff fa4c 	bl	8000fb0 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e04f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 020c 	and.w	r2, r3, #12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1eb      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d20c      	bcs.n	8001b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e032      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4916      	ldr	r1, [pc, #88]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba2:	f000 f821 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	490a      	ldr	r1, [pc, #40]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	5ccb      	ldrb	r3, [r1, r3]
 8001bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8c2 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	08006404 	.word	0x08006404
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bec:	b094      	sub	sp, #80	; 0x50
 8001bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c00:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d00d      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	f200 80e1 	bhi.w	8001dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x34>
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c1a:	e0db      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b73      	ldr	r3, [pc, #460]	; (8001dec <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c20:	e0db      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c22:	4b73      	ldr	r3, [pc, #460]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c26:	e0d8      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c28:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c32:	4b6d      	ldr	r3, [pc, #436]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	2200      	movs	r2, #0
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
 8001c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	0159      	lsls	r1, r3, #5
 8001c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6c:	0150      	lsls	r0, r2, #5
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4621      	mov	r1, r4
 8001c74:	1a51      	subs	r1, r2, r1
 8001c76:	6139      	str	r1, [r7, #16]
 8001c78:	4629      	mov	r1, r5
 8001c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	018b      	lsls	r3, r1, #6
 8001c90:	4651      	mov	r1, sl
 8001c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c96:	4651      	mov	r1, sl
 8001c98:	018a      	lsls	r2, r1, #6
 8001c9a:	4651      	mov	r1, sl
 8001c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ca0:	4659      	mov	r1, fp
 8001ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cba:	4690      	mov	r8, r2
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	eb18 0303 	adds.w	r3, r8, r3
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	462b      	mov	r3, r5
 8001cc8:	eb49 0303 	adc.w	r3, r9, r3
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cda:	4629      	mov	r1, r5
 8001cdc:	024b      	lsls	r3, r1, #9
 8001cde:	4621      	mov	r1, r4
 8001ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	024a      	lsls	r2, r1, #9
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cf8:	f7fe fac2 	bl	8000280 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d04:	e058      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4611      	mov	r1, r2
 8001d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d16:	623b      	str	r3, [r7, #32]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d20:	4642      	mov	r2, r8
 8001d22:	464b      	mov	r3, r9
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0159      	lsls	r1, r3, #5
 8001d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d32:	0150      	lsls	r0, r2, #5
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4641      	mov	r1, r8
 8001d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d3e:	4649      	mov	r1, r9
 8001d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d58:	ebb2 040a 	subs.w	r4, r2, sl
 8001d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	00eb      	lsls	r3, r5, #3
 8001d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d6e:	00e2      	lsls	r2, r4, #3
 8001d70:	4614      	mov	r4, r2
 8001d72:	461d      	mov	r5, r3
 8001d74:	4643      	mov	r3, r8
 8001d76:	18e3      	adds	r3, r4, r3
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	eb45 0303 	adc.w	r3, r5, r3
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d8e:	4629      	mov	r1, r5
 8001d90:	028b      	lsls	r3, r1, #10
 8001d92:	4621      	mov	r1, r4
 8001d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d98:	4621      	mov	r1, r4
 8001d9a:	028a      	lsls	r2, r1, #10
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da2:	2200      	movs	r2, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	61fa      	str	r2, [r7, #28]
 8001da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dac:	f7fe fa68 	bl	8000280 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4613      	mov	r3, r2
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dd2:	e002      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_GetSysClockFreq+0x204>)
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3750      	adds	r7, #80	; 0x50
 8001de0:	46bd      	mov	sp, r7
 8001de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	007a1200 	.word	0x007a1200

08001df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e10:	f7ff fff0 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0a9b      	lsrs	r3, r3, #10
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4903      	ldr	r1, [pc, #12]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	08006414 	.word	0x08006414

08001e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e38:	f7ff ffdc 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0b5b      	lsrs	r3, r3, #13
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	08006414 	.word	0x08006414

08001e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	220f      	movs	r2, #15
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_RCC_GetClockConfig+0x60>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0207 	and.w	r2, r3, #7
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e041      	b.n	8001f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fe9a 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3304      	adds	r3, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f000 fcd2 	bl	80028a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d001      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e044      	b.n	8002002 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d018      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x6c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa2:	d013      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x6c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_TIM_Base_Start_IT+0xb4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00e      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x6c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_TIM_Base_Start_IT+0xb8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x6c>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_TIM_Base_Start_IT+0xbc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x6c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <HAL_TIM_Base_Start_IT+0xc0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d111      	bne.n	8001ff0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d010      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fee:	e007      	b.n	8002000 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40010000 	.word	0x40010000
 8002014:	40000400 	.word	0x40000400
 8002018:	40000800 	.word	0x40000800
 800201c:	40000c00 	.word	0x40000c00
 8002020:	40014000 	.word	0x40014000

08002024 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e041      	b.n	80020ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f839 	bl	80020c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 fc20 	bl	80028a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <HAL_TIM_IC_Start_IT+0x1e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	e013      	b.n	800211e <HAL_TIM_IC_Start_IT+0x46>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_IC_Start_IT+0x2e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002102:	b2db      	uxtb	r3, r3
 8002104:	e00b      	b.n	800211e <HAL_TIM_IC_Start_IT+0x46>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d104      	bne.n	8002116 <HAL_TIM_IC_Start_IT+0x3e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002112:	b2db      	uxtb	r3, r3
 8002114:	e003      	b.n	800211e <HAL_TIM_IC_Start_IT+0x46>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211c:	b2db      	uxtb	r3, r3
 800211e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d104      	bne.n	8002130 <HAL_TIM_IC_Start_IT+0x58>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800212c:	b2db      	uxtb	r3, r3
 800212e:	e013      	b.n	8002158 <HAL_TIM_IC_Start_IT+0x80>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b04      	cmp	r3, #4
 8002134:	d104      	bne.n	8002140 <HAL_TIM_IC_Start_IT+0x68>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e00b      	b.n	8002158 <HAL_TIM_IC_Start_IT+0x80>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b08      	cmp	r3, #8
 8002144:	d104      	bne.n	8002150 <HAL_TIM_IC_Start_IT+0x78>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e003      	b.n	8002158 <HAL_TIM_IC_Start_IT+0x80>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002156:	b2db      	uxtb	r3, r3
 8002158:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d102      	bne.n	8002166 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002160:	7b7b      	ldrb	r3, [r7, #13]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0c2      	b.n	80022f0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d104      	bne.n	800217a <HAL_TIM_IC_Start_IT+0xa2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002178:	e013      	b.n	80021a2 <HAL_TIM_IC_Start_IT+0xca>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d104      	bne.n	800218a <HAL_TIM_IC_Start_IT+0xb2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002188:	e00b      	b.n	80021a2 <HAL_TIM_IC_Start_IT+0xca>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d104      	bne.n	800219a <HAL_TIM_IC_Start_IT+0xc2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002198:	e003      	b.n	80021a2 <HAL_TIM_IC_Start_IT+0xca>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_IC_Start_IT+0xda>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021b0:	e013      	b.n	80021da <HAL_TIM_IC_Start_IT+0x102>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d104      	bne.n	80021c2 <HAL_TIM_IC_Start_IT+0xea>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c0:	e00b      	b.n	80021da <HAL_TIM_IC_Start_IT+0x102>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_IC_Start_IT+0xfa>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d0:	e003      	b.n	80021da <HAL_TIM_IC_Start_IT+0x102>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d841      	bhi.n	8002264 <HAL_TIM_IC_Start_IT+0x18c>
 80021e0:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <HAL_TIM_IC_Start_IT+0x110>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	0800221d 	.word	0x0800221d
 80021ec:	08002265 	.word	0x08002265
 80021f0:	08002265 	.word	0x08002265
 80021f4:	08002265 	.word	0x08002265
 80021f8:	0800222f 	.word	0x0800222f
 80021fc:	08002265 	.word	0x08002265
 8002200:	08002265 	.word	0x08002265
 8002204:	08002265 	.word	0x08002265
 8002208:	08002241 	.word	0x08002241
 800220c:	08002265 	.word	0x08002265
 8002210:	08002265 	.word	0x08002265
 8002214:	08002265 	.word	0x08002265
 8002218:	08002253 	.word	0x08002253
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0202 	orr.w	r2, r2, #2
 800222a:	60da      	str	r2, [r3, #12]
      break;
 800222c:	e01d      	b.n	800226a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0204 	orr.w	r2, r2, #4
 800223c:	60da      	str	r2, [r3, #12]
      break;
 800223e:	e014      	b.n	800226a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0208 	orr.w	r2, r2, #8
 800224e:	60da      	str	r2, [r3, #12]
      break;
 8002250:	e00b      	b.n	800226a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0210 	orr.w	r2, r2, #16
 8002260:	60da      	str	r2, [r3, #12]
      break;
 8002262:	e002      	b.n	800226a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      break;
 8002268:	bf00      	nop
  }

  if (status == HAL_OK)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d13e      	bne.n	80022ee <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2201      	movs	r2, #1
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fd4d 	bl	8002d18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_TIM_IC_Start_IT+0x220>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d018      	beq.n	80022ba <HAL_TIM_IC_Start_IT+0x1e2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d013      	beq.n	80022ba <HAL_TIM_IC_Start_IT+0x1e2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_TIM_IC_Start_IT+0x224>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00e      	beq.n	80022ba <HAL_TIM_IC_Start_IT+0x1e2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_TIM_IC_Start_IT+0x228>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d009      	beq.n	80022ba <HAL_TIM_IC_Start_IT+0x1e2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_TIM_IC_Start_IT+0x22c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d004      	beq.n	80022ba <HAL_TIM_IC_Start_IT+0x1e2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_TIM_IC_Start_IT+0x230>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d111      	bne.n	80022de <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d010      	beq.n	80022ee <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	e007      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800
 8002304:	40000c00 	.word	0x40000c00
 8002308:	40014000 	.word	0x40014000

0800230c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d122      	bne.n	8002368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d11b      	bne.n	8002368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0202 	mvn.w	r2, #2
 8002338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fb1e 	bl	8000990 <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa88 	bl	800286c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fa8f 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b04      	cmp	r3, #4
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0204 	mvn.w	r2, #4
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe faf4 	bl	8000990 <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa5e 	bl	800286c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa65 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0208 	mvn.w	r2, #8
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2204      	movs	r2, #4
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe faca 	bl	8000990 <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa34 	bl	800286c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fa3b 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b10      	cmp	r3, #16
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b10      	cmp	r3, #16
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0210 	mvn.w	r2, #16
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2208      	movs	r2, #8
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe faa0 	bl	8000990 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa0a 	bl	800286c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa11 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0201 	mvn.w	r2, #1
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fb84 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	2b80      	cmp	r3, #128	; 0x80
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fccc 	bl	8002e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f9d6 	bl	8002894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b20      	cmp	r3, #32
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0220 	mvn.w	r2, #32
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fc96 	bl	8002e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002536:	2302      	movs	r3, #2
 8002538:	e088      	b.n	800264c <HAL_TIM_IC_ConfigChannel+0x130>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f000 fa26 	bl	80029a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 020c 	bic.w	r2, r2, #12
 800256a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6999      	ldr	r1, [r3, #24]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	619a      	str	r2, [r3, #24]
 800257e:	e060      	b.n	8002642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b04      	cmp	r3, #4
 8002584:	d11c      	bne.n	80025c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f000 fa9e 	bl	8002ad6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6999      	ldr	r1, [r3, #24]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	021a      	lsls	r2, r3, #8
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	619a      	str	r2, [r3, #24]
 80025be:	e040      	b.n	8002642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11b      	bne.n	80025fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f000 faeb 	bl	8002bb0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 020c 	bic.w	r2, r2, #12
 80025e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69d9      	ldr	r1, [r3, #28]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	61da      	str	r2, [r3, #28]
 80025fc:	e021      	b.n	8002642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d11c      	bne.n	800263e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f000 fb08 	bl	8002c28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002626:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69d9      	ldr	r1, [r3, #28]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	021a      	lsls	r2, r3, #8
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
 800263c:	e001      	b.n	8002642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIM_ConfigClockSource+0x1c>
 800266c:	2302      	movs	r3, #2
 800266e:	e0b4      	b.n	80027da <HAL_TIM_ConfigClockSource+0x186>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800268e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a8:	d03e      	beq.n	8002728 <HAL_TIM_ConfigClockSource+0xd4>
 80026aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ae:	f200 8087 	bhi.w	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	f000 8086 	beq.w	80027c6 <HAL_TIM_ConfigClockSource+0x172>
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026be:	d87f      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b70      	cmp	r3, #112	; 0x70
 80026c2:	d01a      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0xa6>
 80026c4:	2b70      	cmp	r3, #112	; 0x70
 80026c6:	d87b      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b60      	cmp	r3, #96	; 0x60
 80026ca:	d050      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x11a>
 80026cc:	2b60      	cmp	r3, #96	; 0x60
 80026ce:	d877      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d0:	2b50      	cmp	r3, #80	; 0x50
 80026d2:	d03c      	beq.n	800274e <HAL_TIM_ConfigClockSource+0xfa>
 80026d4:	2b50      	cmp	r3, #80	; 0x50
 80026d6:	d873      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d058      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x13a>
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d86f      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e0:	2b30      	cmp	r3, #48	; 0x30
 80026e2:	d064      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026e4:	2b30      	cmp	r3, #48	; 0x30
 80026e6:	d86b      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d060      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d867      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d05c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d05a      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026f8:	e062      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f000 fae5 	bl	8002cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800271c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	609a      	str	r2, [r3, #8]
      break;
 8002726:	e04f      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f000 face 	bl	8002cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274a:	609a      	str	r2, [r3, #8]
      break;
 800274c:	e03c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	461a      	mov	r2, r3
 800275c:	f000 f98c 	bl	8002a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2150      	movs	r1, #80	; 0x50
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fa9b 	bl	8002ca2 <TIM_ITRx_SetConfig>
      break;
 800276c:	e02c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	461a      	mov	r2, r3
 800277c:	f000 f9e8 	bl	8002b50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2160      	movs	r1, #96	; 0x60
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fa8b 	bl	8002ca2 <TIM_ITRx_SetConfig>
      break;
 800278c:	e01c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	461a      	mov	r2, r3
 800279c:	f000 f96c 	bl	8002a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2140      	movs	r1, #64	; 0x40
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fa7b 	bl	8002ca2 <TIM_ITRx_SetConfig>
      break;
 80027ac:	e00c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	4610      	mov	r0, r2
 80027ba:	f000 fa72 	bl	8002ca2 <TIM_ITRx_SetConfig>
      break;
 80027be:	e003      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e000      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d831      	bhi.n	800285c <HAL_TIM_ReadCapturedValue+0x78>
 80027f8:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <HAL_TIM_ReadCapturedValue+0x1c>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002835 	.word	0x08002835
 8002804:	0800285d 	.word	0x0800285d
 8002808:	0800285d 	.word	0x0800285d
 800280c:	0800285d 	.word	0x0800285d
 8002810:	0800283f 	.word	0x0800283f
 8002814:	0800285d 	.word	0x0800285d
 8002818:	0800285d 	.word	0x0800285d
 800281c:	0800285d 	.word	0x0800285d
 8002820:	08002849 	.word	0x08002849
 8002824:	0800285d 	.word	0x0800285d
 8002828:	0800285d 	.word	0x0800285d
 800282c:	0800285d 	.word	0x0800285d
 8002830:	08002853 	.word	0x08002853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	60fb      	str	r3, [r7, #12]

      break;
 800283c:	e00f      	b.n	800285e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	60fb      	str	r3, [r7, #12]

      break;
 8002846:	e00a      	b.n	800285e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	60fb      	str	r3, [r7, #12]

      break;
 8002850:	e005      	b.n	800285e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	60fb      	str	r3, [r7, #12]

      break;
 800285a:	e000      	b.n	800285e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800285c:	bf00      	nop
  }

  return tmpreg;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a34      	ldr	r2, [pc, #208]	; (800298c <TIM_Base_SetConfig+0xe4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00f      	beq.n	80028e0 <TIM_Base_SetConfig+0x38>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c6:	d00b      	beq.n	80028e0 <TIM_Base_SetConfig+0x38>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a31      	ldr	r2, [pc, #196]	; (8002990 <TIM_Base_SetConfig+0xe8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <TIM_Base_SetConfig+0x38>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a30      	ldr	r2, [pc, #192]	; (8002994 <TIM_Base_SetConfig+0xec>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <TIM_Base_SetConfig+0x38>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a2f      	ldr	r2, [pc, #188]	; (8002998 <TIM_Base_SetConfig+0xf0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d108      	bne.n	80028f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a25      	ldr	r2, [pc, #148]	; (800298c <TIM_Base_SetConfig+0xe4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01b      	beq.n	8002932 <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002900:	d017      	beq.n	8002932 <TIM_Base_SetConfig+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a22      	ldr	r2, [pc, #136]	; (8002990 <TIM_Base_SetConfig+0xe8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <TIM_Base_SetConfig+0x8a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a21      	ldr	r2, [pc, #132]	; (8002994 <TIM_Base_SetConfig+0xec>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00f      	beq.n	8002932 <TIM_Base_SetConfig+0x8a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a20      	ldr	r2, [pc, #128]	; (8002998 <TIM_Base_SetConfig+0xf0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00b      	beq.n	8002932 <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1f      	ldr	r2, [pc, #124]	; (800299c <TIM_Base_SetConfig+0xf4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <TIM_Base_SetConfig+0xf8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d003      	beq.n	8002932 <TIM_Base_SetConfig+0x8a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <TIM_Base_SetConfig+0xfc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d108      	bne.n	8002944 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <TIM_Base_SetConfig+0xe4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d103      	bne.n	8002978 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	615a      	str	r2, [r3, #20]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40010000 	.word	0x40010000
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40014000 	.word	0x40014000
 80029a0:	40014400 	.word	0x40014400
 80029a4:	40014800 	.word	0x40014800

080029a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0201 	bic.w	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a24      	ldr	r2, [pc, #144]	; (8002a64 <TIM_TI1_SetConfig+0xbc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <TIM_TI1_SetConfig+0x56>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d00f      	beq.n	80029fe <TIM_TI1_SetConfig+0x56>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <TIM_TI1_SetConfig+0xc0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00b      	beq.n	80029fe <TIM_TI1_SetConfig+0x56>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <TIM_TI1_SetConfig+0xc4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <TIM_TI1_SetConfig+0x56>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <TIM_TI1_SetConfig+0xc8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <TIM_TI1_SetConfig+0x56>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <TIM_TI1_SetConfig+0xcc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <TIM_TI1_SetConfig+0x5a>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <TIM_TI1_SetConfig+0x5c>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0303 	bic.w	r3, r3, #3
 8002a0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e003      	b.n	8002a22 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f023 030a 	bic.w	r3, r3, #10
 8002a3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 030a 	and.w	r3, r3, #10
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40014000 	.word	0x40014000

08002a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f023 0201 	bic.w	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f023 030a 	bic.w	r3, r3, #10
 8002ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b087      	sub	sp, #28
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f023 0210 	bic.w	r2, r3, #16
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	031b      	lsls	r3, r3, #12
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	621a      	str	r2, [r3, #32]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f023 0210 	bic.w	r2, r3, #16
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	031b      	lsls	r3, r3, #12
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	621a      	str	r2, [r3, #32]
}
 8002ba4:	bf00      	nop
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f023 0303 	bic.w	r3, r3, #3
 8002bdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002c00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	621a      	str	r2, [r3, #32]
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	031b      	lsls	r3, r3, #12
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	031b      	lsls	r3, r3, #12
 8002c80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f043 0307 	orr.w	r3, r3, #7
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	609a      	str	r2, [r3, #8]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	021a      	lsls	r2, r3, #8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	609a      	str	r2, [r3, #8]
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e050      	b.n	8002e1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d018      	beq.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d013      	beq.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00e      	beq.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d009      	beq.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d004      	beq.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10c      	bne.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40014000 	.word	0x40014000

08002e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e03f      	b.n	8002efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd ff14 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f929 	bl	8003104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b08a      	sub	sp, #40	; 0x28
 8002f06:	af02      	add	r7, sp, #8
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d17c      	bne.n	800301c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_UART_Transmit+0x2c>
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e075      	b.n	800301e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit+0x3e>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e06e      	b.n	800301e <HAL_UART_Transmit+0x11c>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2221      	movs	r2, #33	; 0x21
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f56:	f7fe f82b 	bl	8000fb0 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d108      	bne.n	8002f84 <HAL_UART_Transmit+0x82>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e003      	b.n	8002f8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f94:	e02a      	b.n	8002fec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f840 	bl	8003026 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e036      	b.n	800301e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e007      	b.n	8002fde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1cf      	bne.n	8002f96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2140      	movs	r1, #64	; 0x40
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f810 	bl	8003026 <UART_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e006      	b.n	800301e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b090      	sub	sp, #64	; 0x40
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003036:	e050      	b.n	80030da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d04c      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <UART_WaitOnFlagUntilTimeout+0x30>
 8003046:	f7fd ffb3 	bl	8000fb0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	429a      	cmp	r2, r3
 8003054:	d241      	bcs.n	80030da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003076:	637a      	str	r2, [r7, #52]	; 0x34
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800307c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e5      	bne.n	8003056 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	613b      	str	r3, [r7, #16]
   return(result);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3314      	adds	r3, #20
 80030a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030aa:	623a      	str	r2, [r7, #32]
 80030ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	69f9      	ldr	r1, [r7, #28]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e5      	bne.n	800308a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e00f      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d09f      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3740      	adds	r7, #64	; 0x40
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003108:	b0c0      	sub	sp, #256	; 0x100
 800310a:	af00      	add	r7, sp, #0
 800310c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	68d9      	ldr	r1, [r3, #12]
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	ea40 0301 	orr.w	r3, r0, r1
 800312c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	431a      	orrs	r2, r3
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800315c:	f021 010c 	bic.w	r1, r1, #12
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800316a:	430b      	orrs	r3, r1
 800316c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	ea40 0301 	orr.w	r3, r0, r1
 800318a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b8f      	ldr	r3, [pc, #572]	; (80033d0 <UART_SetConfig+0x2cc>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d005      	beq.n	80031a4 <UART_SetConfig+0xa0>
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <UART_SetConfig+0x2d0>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d104      	bne.n	80031ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a4:	f7fe fe46 	bl	8001e34 <HAL_RCC_GetPCLK2Freq>
 80031a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031ac:	e003      	b.n	80031b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ae:	f7fe fe2d 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80031b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c0:	f040 810c 	bne.w	80033dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80031de:	415b      	adcs	r3, r3
 80031e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031e6:	4621      	mov	r1, r4
 80031e8:	eb12 0801 	adds.w	r8, r2, r1
 80031ec:	4629      	mov	r1, r5
 80031ee:	eb43 0901 	adc.w	r9, r3, r1
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003206:	4690      	mov	r8, r2
 8003208:	4699      	mov	r9, r3
 800320a:	4623      	mov	r3, r4
 800320c:	eb18 0303 	adds.w	r3, r8, r3
 8003210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003214:	462b      	mov	r3, r5
 8003216:	eb49 0303 	adc.w	r3, r9, r3
 800321a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800322a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800322e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003232:	460b      	mov	r3, r1
 8003234:	18db      	adds	r3, r3, r3
 8003236:	653b      	str	r3, [r7, #80]	; 0x50
 8003238:	4613      	mov	r3, r2
 800323a:	eb42 0303 	adc.w	r3, r2, r3
 800323e:	657b      	str	r3, [r7, #84]	; 0x54
 8003240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003248:	f7fd f81a 	bl	8000280 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <UART_SetConfig+0x2d4>)
 8003252:	fba3 2302 	umull	r2, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	011c      	lsls	r4, r3, #4
 800325a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	1891      	adds	r1, r2, r2
 8003272:	64b9      	str	r1, [r7, #72]	; 0x48
 8003274:	415b      	adcs	r3, r3
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800327c:	4641      	mov	r1, r8
 800327e:	eb12 0a01 	adds.w	sl, r2, r1
 8003282:	4649      	mov	r1, r9
 8003284:	eb43 0b01 	adc.w	fp, r3, r1
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329c:	4692      	mov	sl, r2
 800329e:	469b      	mov	fp, r3
 80032a0:	4643      	mov	r3, r8
 80032a2:	eb1a 0303 	adds.w	r3, sl, r3
 80032a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032aa:	464b      	mov	r3, r9
 80032ac:	eb4b 0303 	adc.w	r3, fp, r3
 80032b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032c8:	460b      	mov	r3, r1
 80032ca:	18db      	adds	r3, r3, r3
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
 80032ce:	4613      	mov	r3, r2
 80032d0:	eb42 0303 	adc.w	r3, r2, r3
 80032d4:	647b      	str	r3, [r7, #68]	; 0x44
 80032d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032de:	f7fc ffcf 	bl	8000280 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <UART_SetConfig+0x2d4>)
 80032ea:	fba3 2301 	umull	r2, r3, r3, r1
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2264      	movs	r2, #100	; 0x64
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	1acb      	subs	r3, r1, r3
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <UART_SetConfig+0x2d4>)
 8003300:	fba3 2302 	umull	r2, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800330c:	441c      	add	r4, r3
 800330e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800331c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	1891      	adds	r1, r2, r2
 8003326:	63b9      	str	r1, [r7, #56]	; 0x38
 8003328:	415b      	adcs	r3, r3
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003330:	4641      	mov	r1, r8
 8003332:	1851      	adds	r1, r2, r1
 8003334:	6339      	str	r1, [r7, #48]	; 0x30
 8003336:	4649      	mov	r1, r9
 8003338:	414b      	adcs	r3, r1
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003348:	4659      	mov	r1, fp
 800334a:	00cb      	lsls	r3, r1, #3
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003352:	4651      	mov	r1, sl
 8003354:	00ca      	lsls	r2, r1, #3
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	4603      	mov	r3, r0
 800335c:	4642      	mov	r2, r8
 800335e:	189b      	adds	r3, r3, r2
 8003360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003364:	464b      	mov	r3, r9
 8003366:	460a      	mov	r2, r1
 8003368:	eb42 0303 	adc.w	r3, r2, r3
 800336c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800337c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003384:	460b      	mov	r3, r1
 8003386:	18db      	adds	r3, r3, r3
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	4613      	mov	r3, r2
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800339a:	f7fc ff71 	bl	8000280 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <UART_SetConfig+0x2d4>)
 80033a4:	fba3 1302 	umull	r1, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <UART_SetConfig+0x2d4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4422      	add	r2, r4
 80033ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033cc:	e105      	b.n	80035da <UART_SetConfig+0x4d6>
 80033ce:	bf00      	nop
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033ee:	4642      	mov	r2, r8
 80033f0:	464b      	mov	r3, r9
 80033f2:	1891      	adds	r1, r2, r2
 80033f4:	6239      	str	r1, [r7, #32]
 80033f6:	415b      	adcs	r3, r3
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fe:	4641      	mov	r1, r8
 8003400:	1854      	adds	r4, r2, r1
 8003402:	4649      	mov	r1, r9
 8003404:	eb43 0501 	adc.w	r5, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003424:	464b      	mov	r3, r9
 8003426:	eb45 0303 	adc.w	r3, r5, r3
 800342a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800343a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800344a:	4629      	mov	r1, r5
 800344c:	008b      	lsls	r3, r1, #2
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003454:	4621      	mov	r1, r4
 8003456:	008a      	lsls	r2, r1, #2
 8003458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800345c:	f7fc ff10 	bl	8000280 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003466:	fba3 2302 	umull	r2, r3, r3, r2
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	011c      	lsls	r4, r3, #4
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800347c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	61b9      	str	r1, [r7, #24]
 8003488:	415b      	adcs	r3, r3
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6139      	str	r1, [r7, #16]
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c4:	464b      	mov	r3, r9
 80034c6:	460a      	mov	r2, r1
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034e8:	4649      	mov	r1, r9
 80034ea:	008b      	lsls	r3, r1, #2
 80034ec:	4641      	mov	r1, r8
 80034ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f2:	4641      	mov	r1, r8
 80034f4:	008a      	lsls	r2, r1, #2
 80034f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034fa:	f7fc fec1 	bl	8000280 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003504:	fba3 1302 	umull	r1, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	3332      	adds	r3, #50	; 0x32
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003522:	441c      	add	r4, r3
 8003524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003528:	2200      	movs	r2, #0
 800352a:	673b      	str	r3, [r7, #112]	; 0x70
 800352c:	677a      	str	r2, [r7, #116]	; 0x74
 800352e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003532:	4642      	mov	r2, r8
 8003534:	464b      	mov	r3, r9
 8003536:	1891      	adds	r1, r2, r2
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	415b      	adcs	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003542:	4641      	mov	r1, r8
 8003544:	1851      	adds	r1, r2, r1
 8003546:	6039      	str	r1, [r7, #0]
 8003548:	4649      	mov	r1, r9
 800354a:	414b      	adcs	r3, r1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800355a:	4659      	mov	r1, fp
 800355c:	00cb      	lsls	r3, r1, #3
 800355e:	4651      	mov	r1, sl
 8003560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003564:	4651      	mov	r1, sl
 8003566:	00ca      	lsls	r2, r1, #3
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	4603      	mov	r3, r0
 800356e:	4642      	mov	r2, r8
 8003570:	189b      	adds	r3, r3, r2
 8003572:	66bb      	str	r3, [r7, #104]	; 0x68
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	663b      	str	r3, [r7, #96]	; 0x60
 8003588:	667a      	str	r2, [r7, #100]	; 0x64
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003596:	4649      	mov	r1, r9
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	4641      	mov	r1, r8
 800359c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a0:	4641      	mov	r1, r8
 80035a2:	008a      	lsls	r2, r1, #2
 80035a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035a8:	f7fc fe6a 	bl	8000280 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 1302 	umull	r1, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2164      	movs	r1, #100	; 0x64
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	; 0x32
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <UART_SetConfig+0x4e4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4422      	add	r2, r4
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	bf00      	nop
 80035dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e6:	bf00      	nop
 80035e8:	51eb851f 	.word	0x51eb851f

080035ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035fe:	2b84      	cmp	r3, #132	; 0x84
 8003600:	d005      	beq.n	800360e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003602:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	3303      	adds	r3, #3
 800360c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003620:	f000 ff3e 	bl	80044a0 <vTaskStartScheduler>
  
  return osOK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}

0800362a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800362a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362c:	b089      	sub	sp, #36	; 0x24
 800362e:	af04      	add	r7, sp, #16
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <osThreadCreate+0x54>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685c      	ldr	r4, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681d      	ldr	r5, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691e      	ldr	r6, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff ffc8 	bl	80035ec <makeFreeRtosPriority>
 800365c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003666:	9202      	str	r2, [sp, #8]
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	9100      	str	r1, [sp, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4632      	mov	r2, r6
 8003670:	4629      	mov	r1, r5
 8003672:	4620      	mov	r0, r4
 8003674:	f000 fd36 	bl	80040e4 <xTaskCreateStatic>
 8003678:	4603      	mov	r3, r0
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e01c      	b.n	80036b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685c      	ldr	r4, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800368a:	b29e      	uxth	r6, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ffaa 	bl	80035ec <makeFreeRtosPriority>
 8003698:	4602      	mov	r2, r0
 800369a:	f107 030c 	add.w	r3, r7, #12
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	9200      	str	r2, [sp, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	4632      	mov	r2, r6
 80036a6:	4629      	mov	r1, r5
 80036a8:	4620      	mov	r0, r4
 80036aa:	f000 fd78 	bl	800419e <xTaskCreate>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d001      	beq.n	80036b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80036b8:	68fb      	ldr	r3, [r7, #12]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f103 0208 	add.w	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f04f 32ff 	mov.w	r2, #4294967295
 80036da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f103 0208 	add.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f103 0208 	add.w	r2, r3, #8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d103      	bne.n	8003784 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e00c      	b.n	800379e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3308      	adds	r3, #8
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e002      	b.n	8003792 <vListInsert+0x2e>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d2f6      	bcs.n	800378c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6892      	ldr	r2, [r2, #8]
 80037ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6852      	ldr	r2, [r2, #4]
 80037f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d103      	bne.n	800380a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003856:	f001 fd85 	bl	8005364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	441a      	add	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	3b01      	subs	r3, #1
 8003888:	68f9      	ldr	r1, [r7, #12]
 800388a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	441a      	add	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	22ff      	movs	r2, #255	; 0xff
 800389a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	22ff      	movs	r2, #255	; 0xff
 80038a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d114      	bne.n	80038d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01a      	beq.n	80038ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3310      	adds	r3, #16
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 f843 	bl	8004944 <xTaskRemoveFromEventList>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <xQueueGenericReset+0xcc>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	e009      	b.n	80038ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3310      	adds	r3, #16
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fef1 	bl	80036c2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3324      	adds	r3, #36	; 0x24
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff feec 	bl	80036c2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038ea:	f001 fd6b 	bl	80053c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	613b      	str	r3, [r7, #16]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3348      	adds	r3, #72	; 0x48
 8003934:	4618      	mov	r0, r3
 8003936:	f001 fe37 	bl	80055a8 <pvPortMalloc>
 800393a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3348      	adds	r3, #72	; 0x48
 800394a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003954:	79fa      	ldrb	r2, [r7, #7]
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f805 	bl	8003970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003966:	69bb      	ldr	r3, [r7, #24]
	}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e002      	b.n	8003992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800399e:	2101      	movs	r1, #1
 80039a0:	69b8      	ldr	r0, [r7, #24]
 80039a2:	f7ff ff43 	bl	800382c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xQueueGenericSend+0x32>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <xQueueGenericSend+0x40>
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <xQueueGenericSend+0x44>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <xQueueGenericSend+0x46>
 80039f4:	2300      	movs	r3, #0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <xQueueGenericSend+0x60>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d103      	bne.n	8003a1e <xQueueGenericSend+0x6e>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <xQueueGenericSend+0x72>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueGenericSend+0x74>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <xQueueGenericSend+0x8e>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	623b      	str	r3, [r7, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a3e:	f001 f943 	bl	8004cc8 <xTaskGetSchedulerState>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <xQueueGenericSend+0x9e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <xQueueGenericSend+0xa2>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <xQueueGenericSend+0xa4>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <xQueueGenericSend+0xbe>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	61fb      	str	r3, [r7, #28]
}
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a6e:	f001 fc79 	bl	8005364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <xQueueGenericSend+0xd4>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d129      	bne.n	8003ad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8a:	f000 fa41 	bl	8003f10 <prvCopyDataToQueue>
 8003a8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d010      	beq.n	8003aba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	3324      	adds	r3, #36	; 0x24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 ff51 	bl	8004944 <xTaskRemoveFromEventList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <xQueueGenericSend+0x1f8>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	e00a      	b.n	8003ad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <xQueueGenericSend+0x1f8>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ad0:	f001 fc78 	bl	80053c4 <vPortExitCritical>
				return pdPASS;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e063      	b.n	8003ba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ade:	f001 fc71 	bl	80053c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e05c      	b.n	8003ba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 ff89 	bl	8004a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003af6:	2301      	movs	r3, #1
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003afa:	f001 fc63 	bl	80053c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003afe:	f000 fd39 	bl	8004574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b02:	f001 fc2f 	bl	8005364 <vPortEnterCritical>
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d103      	bne.n	8003b1c <xQueueGenericSend+0x16c>
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b22:	b25b      	sxtb	r3, r3
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d103      	bne.n	8003b32 <xQueueGenericSend+0x182>
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b32:	f001 fc47 	bl	80053c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b36:	1d3a      	adds	r2, r7, #4
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 ff78 	bl	8004a34 <xTaskCheckForTimeOut>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d124      	bne.n	8003b94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4c:	f000 fab2 	bl	80040b4 <prvIsQueueFull>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d018      	beq.n	8003b88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	3310      	adds	r3, #16
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fecc 	bl	80048fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b66:	f000 fa3d 	bl	8003fe4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b6a:	f000 fd11 	bl	8004590 <xTaskResumeAll>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f af7c 	bne.w	8003a6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <xQueueGenericSend+0x1f8>)
 8003b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	e772      	b.n	8003a6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b8a:	f000 fa2b 	bl	8003fe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b8e:	f000 fcff 	bl	8004590 <xTaskResumeAll>
 8003b92:	e76c      	b.n	8003a6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b96:	f000 fa25 	bl	8003fe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b9a:	f000 fcf9 	bl	8004590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3738      	adds	r7, #56	; 0x38
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08e      	sub	sp, #56	; 0x38
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	623b      	str	r3, [r7, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61fb      	str	r3, [r7, #28]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <xQueueGiveFromISR+0x58>
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <xQueueGiveFromISR+0x5c>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <xQueueGiveFromISR+0x5e>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	61bb      	str	r3, [r7, #24]
}
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c24:	f001 fc80 	bl	8005528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c28:	f3ef 8211 	mrs	r2, BASEPRI
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	617a      	str	r2, [r7, #20]
 8003c3e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c40:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d22b      	bcs.n	8003cac <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d112      	bne.n	8003c96 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d016      	beq.n	8003ca6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	3324      	adds	r3, #36	; 0x24
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fe61 	bl	8004944 <xTaskRemoveFromEventList>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00e      	beq.n	8003ca6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e007      	b.n	8003ca6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	b25a      	sxtb	r2, r3
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	e001      	b.n	8003cb0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3738      	adds	r7, #56	; 0x38
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08e      	sub	sp, #56	; 0x38
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	61fb      	str	r3, [r7, #28]
}
 8003d14:	bf00      	nop
 8003d16:	e7fe      	b.n	8003d16 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d18:	f000 ffd6 	bl	8004cc8 <xTaskGetSchedulerState>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <xQueueSemaphoreTake+0x60>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <xQueueSemaphoreTake+0x64>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <xQueueSemaphoreTake+0x66>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	61bb      	str	r3, [r7, #24]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d48:	f001 fb0c 	bl	8005364 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d024      	beq.n	8003da2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	1e5a      	subs	r2, r3, #1
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d68:	f001 f956 	bl	8005018 <pvTaskIncrementMutexHeldCount>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00f      	beq.n	8003d9a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	3310      	adds	r3, #16
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fde0 	bl	8004944 <xTaskRemoveFromEventList>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d8a:	4b54      	ldr	r3, [pc, #336]	; (8003edc <xQueueSemaphoreTake+0x214>)
 8003d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d9a:	f001 fb13 	bl	80053c4 <vPortExitCritical>
				return pdPASS;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e097      	b.n	8003ed2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d111      	bne.n	8003dcc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	617b      	str	r3, [r7, #20]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003dc4:	f001 fafe 	bl	80053c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e082      	b.n	8003ed2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fe16 	bl	8004a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003de0:	f001 faf0 	bl	80053c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003de4:	f000 fbc6 	bl	8004574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003de8:	f001 fabc 	bl	8005364 <vPortEnterCritical>
 8003dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d103      	bne.n	8003e02 <xQueueSemaphoreTake+0x13a>
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d103      	bne.n	8003e18 <xQueueSemaphoreTake+0x150>
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e18:	f001 fad4 	bl	80053c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e1c:	463a      	mov	r2, r7
 8003e1e:	f107 030c 	add.w	r3, r7, #12
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fe05 	bl	8004a34 <xTaskCheckForTimeOut>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d132      	bne.n	8003e96 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e32:	f000 f929 	bl	8004088 <prvIsQueueEmpty>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d026      	beq.n	8003e8a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e44:	f001 fa8e 	bl	8005364 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 ff59 	bl	8004d04 <xTaskPriorityInherit>
 8003e52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e54:	f001 fab6 	bl	80053c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	3324      	adds	r3, #36	; 0x24
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fd4b 	bl	80048fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e68:	f000 f8bc 	bl	8003fe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e6c:	f000 fb90 	bl	8004590 <xTaskResumeAll>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f47f af68 	bne.w	8003d48 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <xQueueSemaphoreTake+0x214>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	e75e      	b.n	8003d48 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e8c:	f000 f8aa 	bl	8003fe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e90:	f000 fb7e 	bl	8004590 <xTaskResumeAll>
 8003e94:	e758      	b.n	8003d48 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e98:	f000 f8a4 	bl	8003fe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e9c:	f000 fb78 	bl	8004590 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ea2:	f000 f8f1 	bl	8004088 <prvIsQueueEmpty>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f43f af4d 	beq.w	8003d48 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003eb4:	f001 fa56 	bl	8005364 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eba:	f000 f811 	bl	8003ee0 <prvGetDisinheritPriorityAfterTimeout>
 8003ebe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 f818 	bl	8004efc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ecc:	f001 fa7a 	bl	80053c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ed0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3738      	adds	r7, #56	; 0x38
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1c3 0307 	rsb	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e001      	b.n	8003f02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f02:	68fb      	ldr	r3, [r7, #12]
	}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d14d      	bne.n	8003fd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 ff58 	bl	8004df0 <xTaskPriorityDisinherit>
 8003f40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	e043      	b.n	8003fd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d119      	bne.n	8003f84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6858      	ldr	r0, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	f001 fd3a 	bl	80059d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	441a      	add	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d32b      	bcc.n	8003fd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	e026      	b.n	8003fd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68d8      	ldr	r0, [r3, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	f001 fd20 	bl	80059d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	425b      	negs	r3, r3
 8003f9e:	441a      	add	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d207      	bcs.n	8003fc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	425b      	negs	r3, r3
 8003fba:	441a      	add	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d105      	bne.n	8003fd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fda:	697b      	ldr	r3, [r7, #20]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fec:	f001 f9ba 	bl	8005364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ff6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ff8:	e011      	b.n	800401e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d012      	beq.n	8004028 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fc9c 	bl	8004944 <xTaskRemoveFromEventList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004012:	f000 fd71 	bl	8004af8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	3b01      	subs	r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800401e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	dce9      	bgt.n	8003ffa <prvUnlockQueue+0x16>
 8004026:	e000      	b.n	800402a <prvUnlockQueue+0x46>
					break;
 8004028:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004032:	f001 f9c7 	bl	80053c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004036:	f001 f995 	bl	8005364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004040:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004042:	e011      	b.n	8004068 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d012      	beq.n	8004072 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3310      	adds	r3, #16
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fc77 	bl	8004944 <xTaskRemoveFromEventList>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800405c:	f000 fd4c 	bl	8004af8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004060:	7bbb      	ldrb	r3, [r7, #14]
 8004062:	3b01      	subs	r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dce9      	bgt.n	8004044 <prvUnlockQueue+0x60>
 8004070:	e000      	b.n	8004074 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004072:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800407c:	f001 f9a2 	bl	80053c4 <vPortExitCritical>
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004090:	f001 f968 	bl	8005364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e001      	b.n	80040a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040a6:	f001 f98d 	bl	80053c4 <vPortExitCritical>

	return xReturn;
 80040aa:	68fb      	ldr	r3, [r7, #12]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040bc:	f001 f952 	bl	8005364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d102      	bne.n	80040d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e001      	b.n	80040d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040d6:	f001 f975 	bl	80053c4 <vPortExitCritical>

	return xReturn;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	; 0x38
 80040e8:	af04      	add	r7, sp, #16
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <xTaskCreateStatic+0x2a>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	623b      	str	r3, [r7, #32]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xTaskCreateStatic+0x46>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	61fb      	str	r3, [r7, #28]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800412a:	23b4      	movs	r3, #180	; 0xb4
 800412c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2bb4      	cmp	r3, #180	; 0xb4
 8004132:	d00a      	beq.n	800414a <xTaskCreateStatic+0x66>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	61bb      	str	r3, [r7, #24]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800414a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01e      	beq.n	8004190 <xTaskCreateStatic+0xac>
 8004152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004160:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2202      	movs	r2, #2
 8004166:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800416a:	2300      	movs	r3, #0
 800416c:	9303      	str	r3, [sp, #12]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	9302      	str	r3, [sp, #8]
 8004172:	f107 0314 	add.w	r3, r7, #20
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f850 	bl	8004228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800418a:	f000 f8eb 	bl	8004364 <prvAddNewTaskToReadyList>
 800418e:	e001      	b.n	8004194 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004194:	697b      	ldr	r3, [r7, #20]
	}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b08c      	sub	sp, #48	; 0x30
 80041a2:	af04      	add	r7, sp, #16
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f9f8 	bl	80055a8 <pvPortMalloc>
 80041b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041c0:	20b4      	movs	r0, #180	; 0xb4
 80041c2:	f001 f9f1 	bl	80055a8 <pvPortMalloc>
 80041c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
 80041d4:	e005      	b.n	80041e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f001 fab2 	bl	8005740 <vPortFree>
 80041dc:	e001      	b.n	80041e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d017      	beq.n	8004218 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041f0:	88fa      	ldrh	r2, [r7, #6]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9303      	str	r3, [sp, #12]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f80e 	bl	8004228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800420c:	69f8      	ldr	r0, [r7, #28]
 800420e:	f000 f8a9 	bl	8004364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	e002      	b.n	800421e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800421e:	69bb      	ldr	r3, [r7, #24]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004240:	3b01      	subs	r3, #1
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f023 0307 	bic.w	r3, r3, #7
 800424e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <prvInitialiseNewTask+0x48>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	617b      	str	r3, [r7, #20]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01f      	beq.n	80042b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e012      	b.n	80042a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	7819      	ldrb	r1, [r3, #0]
 8004284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	3334      	adds	r3, #52	; 0x34
 800428c:	460a      	mov	r2, r1
 800428e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d006      	beq.n	80042aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3301      	adds	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	2b0f      	cmp	r3, #15
 80042a6:	d9e9      	bls.n	800427c <prvInitialiseNewTask+0x54>
 80042a8:	e000      	b.n	80042ac <prvInitialiseNewTask+0x84>
			{
				break;
 80042aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b4:	e003      	b.n	80042be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	2b06      	cmp	r3, #6
 80042c2:	d901      	bls.n	80042c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042c4:	2306      	movs	r3, #6
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	2200      	movs	r2, #0
 80042d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fa0f 	bl	8003702 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	3318      	adds	r3, #24
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fa0a 	bl	8003702 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	f1c3 0207 	rsb	r2, r3, #7
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	2200      	movs	r2, #0
 8004308:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	2200      	movs	r2, #0
 8004310:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	334c      	adds	r3, #76	; 0x4c
 8004318:	2260      	movs	r2, #96	; 0x60
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f001 fb67 	bl	80059f0 <memset>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <prvInitialiseNewTask+0x130>)
 8004326:	651a      	str	r2, [r3, #80]	; 0x50
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	4a0c      	ldr	r2, [pc, #48]	; (800435c <prvInitialiseNewTask+0x134>)
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	4a0b      	ldr	r2, [pc, #44]	; (8004360 <prvInitialiseNewTask+0x138>)
 8004332:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	69b8      	ldr	r0, [r7, #24]
 800433a:	f000 fee7 	bl	800510c <pxPortInitialiseStack>
 800433e:	4602      	mov	r2, r0
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004350:	bf00      	nop
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	0800643c 	.word	0x0800643c
 800435c:	0800645c 	.word	0x0800645c
 8004360:	0800641c 	.word	0x0800641c

08004364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800436c:	f000 fffa 	bl	8005364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <prvAddNewTaskToReadyList+0xb8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	4a29      	ldr	r2, [pc, #164]	; (800441c <prvAddNewTaskToReadyList+0xb8>)
 8004378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800437a:	4b29      	ldr	r3, [pc, #164]	; (8004420 <prvAddNewTaskToReadyList+0xbc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004382:	4a27      	ldr	r2, [pc, #156]	; (8004420 <prvAddNewTaskToReadyList+0xbc>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004388:	4b24      	ldr	r3, [pc, #144]	; (800441c <prvAddNewTaskToReadyList+0xb8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d110      	bne.n	80043b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004390:	f000 fbd8 	bl	8004b44 <prvInitialiseTaskLists>
 8004394:	e00d      	b.n	80043b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004396:	4b23      	ldr	r3, [pc, #140]	; (8004424 <prvAddNewTaskToReadyList+0xc0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <prvAddNewTaskToReadyList+0xbc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d802      	bhi.n	80043b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043ac:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <prvAddNewTaskToReadyList+0xbc>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <prvAddNewTaskToReadyList+0xc4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3301      	adds	r3, #1
 80043b8:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <prvAddNewTaskToReadyList+0xc4>)
 80043ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	2201      	movs	r2, #1
 80043c2:	409a      	lsls	r2, r3
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <prvAddNewTaskToReadyList+0xc8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <prvAddNewTaskToReadyList+0xc8>)
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4a15      	ldr	r2, [pc, #84]	; (8004430 <prvAddNewTaskToReadyList+0xcc>)
 80043dc:	441a      	add	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7ff f999 	bl	800371c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043ea:	f000 ffeb 	bl	80053c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <prvAddNewTaskToReadyList+0xc0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <prvAddNewTaskToReadyList+0xbc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	429a      	cmp	r2, r3
 8004402:	d207      	bcs.n	8004414 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <prvAddNewTaskToReadyList+0xd0>)
 8004406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000578 	.word	0x20000578
 8004420:	20000478 	.word	0x20000478
 8004424:	20000584 	.word	0x20000584
 8004428:	20000594 	.word	0x20000594
 800442c:	20000580 	.word	0x20000580
 8004430:	2000047c 	.word	0x2000047c
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <vTaskDelay+0x60>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <vTaskDelay+0x30>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60bb      	str	r3, [r7, #8]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004468:	f000 f884 	bl	8004574 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800446c:	2100      	movs	r1, #0
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fde6 	bl	8005040 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004474:	f000 f88c 	bl	8004590 <xTaskResumeAll>
 8004478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <vTaskDelay+0x64>)
 8004482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	200005a0 	.word	0x200005a0
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ae:	463a      	mov	r2, r7
 80044b0:	1d39      	adds	r1, r7, #4
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fc f86c 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	9202      	str	r2, [sp, #8]
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	2300      	movs	r3, #0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2300      	movs	r3, #0
 80044cc:	460a      	mov	r2, r1
 80044ce:	4921      	ldr	r1, [pc, #132]	; (8004554 <vTaskStartScheduler+0xb4>)
 80044d0:	4821      	ldr	r0, [pc, #132]	; (8004558 <vTaskStartScheduler+0xb8>)
 80044d2:	f7ff fe07 	bl	80040e4 <xTaskCreateStatic>
 80044d6:	4603      	mov	r3, r0
 80044d8:	4a20      	ldr	r2, [pc, #128]	; (800455c <vTaskStartScheduler+0xbc>)
 80044da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044dc:	4b1f      	ldr	r3, [pc, #124]	; (800455c <vTaskStartScheduler+0xbc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e001      	b.n	80044ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d11b      	bne.n	800452c <vTaskStartScheduler+0x8c>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	613b      	str	r3, [r7, #16]
}
 8004506:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004508:	4b15      	ldr	r3, [pc, #84]	; (8004560 <vTaskStartScheduler+0xc0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	334c      	adds	r3, #76	; 0x4c
 800450e:	4a15      	ldr	r2, [pc, #84]	; (8004564 <vTaskStartScheduler+0xc4>)
 8004510:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <vTaskStartScheduler+0xc8>)
 8004514:	f04f 32ff 	mov.w	r2, #4294967295
 8004518:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <vTaskStartScheduler+0xcc>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004520:	4b13      	ldr	r3, [pc, #76]	; (8004570 <vTaskStartScheduler+0xd0>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004526:	f000 fe7b 	bl	8005220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800452a:	e00e      	b.n	800454a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d10a      	bne.n	800454a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	60fb      	str	r3, [r7, #12]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <vTaskStartScheduler+0xa8>
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	080063fc 	.word	0x080063fc
 8004558:	08004b11 	.word	0x08004b11
 800455c:	2000059c 	.word	0x2000059c
 8004560:	20000478 	.word	0x20000478
 8004564:	20000010 	.word	0x20000010
 8004568:	20000598 	.word	0x20000598
 800456c:	20000584 	.word	0x20000584
 8004570:	2000057c 	.word	0x2000057c

08004574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <vTaskSuspendAll+0x18>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	4a03      	ldr	r2, [pc, #12]	; (800458c <vTaskSuspendAll+0x18>)
 8004580:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004582:	bf00      	nop
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	200005a0 	.word	0x200005a0

08004590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <xTaskResumeAll+0x114>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <xTaskResumeAll+0x2c>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	603b      	str	r3, [r7, #0]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045bc:	f000 fed2 	bl	8005364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045c0:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <xTaskResumeAll+0x114>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	4a37      	ldr	r2, [pc, #220]	; (80046a4 <xTaskResumeAll+0x114>)
 80045c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ca:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <xTaskResumeAll+0x114>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d161      	bne.n	8004696 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045d2:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <xTaskResumeAll+0x118>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d05d      	beq.n	8004696 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045da:	e02e      	b.n	800463a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045dc:	4b33      	ldr	r3, [pc, #204]	; (80046ac <xTaskResumeAll+0x11c>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3318      	adds	r3, #24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff f8f4 	bl	80037d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff f8ef 	bl	80037d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	2201      	movs	r2, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <xTaskResumeAll+0x120>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <xTaskResumeAll+0x120>)
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <xTaskResumeAll+0x124>)
 8004618:	441a      	add	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f7ff f87b 	bl	800371c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <xTaskResumeAll+0x128>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004634:	4b21      	ldr	r3, [pc, #132]	; (80046bc <xTaskResumeAll+0x12c>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800463a:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <xTaskResumeAll+0x11c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1cc      	bne.n	80045dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004648:	f000 fb1e 	bl	8004c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800464c:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <xTaskResumeAll+0x130>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004658:	f000 f836 	bl	80046c8 <xTaskIncrementTick>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <xTaskResumeAll+0x12c>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3b01      	subs	r3, #1
 800466c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f1      	bne.n	8004658 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004674:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <xTaskResumeAll+0x130>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <xTaskResumeAll+0x12c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004682:	2301      	movs	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004686:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <xTaskResumeAll+0x134>)
 8004688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004696:	f000 fe95 	bl	80053c4 <vPortExitCritical>

	return xAlreadyYielded;
 800469a:	68bb      	ldr	r3, [r7, #8]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	200005a0 	.word	0x200005a0
 80046a8:	20000578 	.word	0x20000578
 80046ac:	20000538 	.word	0x20000538
 80046b0:	20000580 	.word	0x20000580
 80046b4:	2000047c 	.word	0x2000047c
 80046b8:	20000478 	.word	0x20000478
 80046bc:	2000058c 	.word	0x2000058c
 80046c0:	20000588 	.word	0x20000588
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d2:	4b4e      	ldr	r3, [pc, #312]	; (800480c <xTaskIncrementTick+0x144>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 808e 	bne.w	80047f8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046dc:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <xTaskIncrementTick+0x148>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046e4:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <xTaskIncrementTick+0x148>)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d120      	bne.n	8004732 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046f0:	4b48      	ldr	r3, [pc, #288]	; (8004814 <xTaskIncrementTick+0x14c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <xTaskIncrementTick+0x48>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	603b      	str	r3, [r7, #0]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <xTaskIncrementTick+0x46>
 8004710:	4b40      	ldr	r3, [pc, #256]	; (8004814 <xTaskIncrementTick+0x14c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b40      	ldr	r3, [pc, #256]	; (8004818 <xTaskIncrementTick+0x150>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3e      	ldr	r2, [pc, #248]	; (8004814 <xTaskIncrementTick+0x14c>)
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4a3e      	ldr	r2, [pc, #248]	; (8004818 <xTaskIncrementTick+0x150>)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b3d      	ldr	r3, [pc, #244]	; (800481c <xTaskIncrementTick+0x154>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a3c      	ldr	r2, [pc, #240]	; (800481c <xTaskIncrementTick+0x154>)
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	f000 faab 	bl	8004c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004732:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <xTaskIncrementTick+0x158>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	429a      	cmp	r2, r3
 800473a:	d348      	bcc.n	80047ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473c:	4b35      	ldr	r3, [pc, #212]	; (8004814 <xTaskIncrementTick+0x14c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004746:	4b36      	ldr	r3, [pc, #216]	; (8004820 <xTaskIncrementTick+0x158>)
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	601a      	str	r2, [r3, #0]
					break;
 800474e:	e03e      	b.n	80047ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004750:	4b30      	ldr	r3, [pc, #192]	; (8004814 <xTaskIncrementTick+0x14c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d203      	bcs.n	8004770 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004768:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <xTaskIncrementTick+0x158>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800476e:	e02e      	b.n	80047ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	3304      	adds	r3, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff f82e 	bl	80037d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3318      	adds	r3, #24
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff f825 	bl	80037d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	2201      	movs	r2, #1
 8004792:	409a      	lsls	r2, r3
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <xTaskIncrementTick+0x15c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4313      	orrs	r3, r2
 800479a:	4a22      	ldr	r2, [pc, #136]	; (8004824 <xTaskIncrementTick+0x15c>)
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <xTaskIncrementTick+0x160>)
 80047ac:	441a      	add	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fe ffb1 	bl	800371c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <xTaskIncrementTick+0x164>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d3b9      	bcc.n	800473c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047cc:	e7b6      	b.n	800473c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ce:	4b17      	ldr	r3, [pc, #92]	; (800482c <xTaskIncrementTick+0x164>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	4914      	ldr	r1, [pc, #80]	; (8004828 <xTaskIncrementTick+0x160>)
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d901      	bls.n	80047ea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <xTaskIncrementTick+0x168>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e004      	b.n	8004802 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <xTaskIncrementTick+0x16c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <xTaskIncrementTick+0x16c>)
 8004800:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004802:	697b      	ldr	r3, [r7, #20]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	200005a0 	.word	0x200005a0
 8004810:	2000057c 	.word	0x2000057c
 8004814:	20000530 	.word	0x20000530
 8004818:	20000534 	.word	0x20000534
 800481c:	20000590 	.word	0x20000590
 8004820:	20000598 	.word	0x20000598
 8004824:	20000580 	.word	0x20000580
 8004828:	2000047c 	.word	0x2000047c
 800482c:	20000478 	.word	0x20000478
 8004830:	2000058c 	.word	0x2000058c
 8004834:	20000588 	.word	0x20000588

08004838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800483e:	4b29      	ldr	r3, [pc, #164]	; (80048e4 <vTaskSwitchContext+0xac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <vTaskSwitchContext+0xb0>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800484c:	e044      	b.n	80048d8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800484e:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <vTaskSwitchContext+0xb0>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004854:	4b25      	ldr	r3, [pc, #148]	; (80048ec <vTaskSwitchContext+0xb4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	fab3 f383 	clz	r3, r3
 8004860:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004862:	7afb      	ldrb	r3, [r7, #11]
 8004864:	f1c3 031f 	rsb	r3, r3, #31
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	4921      	ldr	r1, [pc, #132]	; (80048f0 <vTaskSwitchContext+0xb8>)
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <vTaskSwitchContext+0x5c>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	607b      	str	r3, [r7, #4]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <vTaskSwitchContext+0x5a>
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <vTaskSwitchContext+0xb8>)
 80048a0:	4413      	add	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3308      	adds	r3, #8
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d104      	bne.n	80048c4 <vTaskSwitchContext+0x8c>
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <vTaskSwitchContext+0xbc>)
 80048cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <vTaskSwitchContext+0xbc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	334c      	adds	r3, #76	; 0x4c
 80048d4:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <vTaskSwitchContext+0xc0>)
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	200005a0 	.word	0x200005a0
 80048e8:	2000058c 	.word	0x2000058c
 80048ec:	20000580 	.word	0x20000580
 80048f0:	2000047c 	.word	0x2000047c
 80048f4:	20000478 	.word	0x20000478
 80048f8:	20000010 	.word	0x20000010

080048fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60fb      	str	r3, [r7, #12]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <vTaskPlaceOnEventList+0x44>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3318      	adds	r3, #24
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fe ff1a 	bl	8003764 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004930:	2101      	movs	r1, #1
 8004932:	6838      	ldr	r0, [r7, #0]
 8004934:	f000 fb84 	bl	8005040 <prvAddCurrentTaskToDelayedList>
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000478 	.word	0x20000478

08004944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	60fb      	str	r3, [r7, #12]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	3318      	adds	r3, #24
 8004974:	4618      	mov	r0, r3
 8004976:	f7fe ff2e 	bl	80037d6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <xTaskRemoveFromEventList+0xac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11c      	bne.n	80049bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3304      	adds	r3, #4
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe ff25 	bl	80037d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	2201      	movs	r2, #1
 8004992:	409a      	lsls	r2, r3
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <xTaskRemoveFromEventList+0xb0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4313      	orrs	r3, r2
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <xTaskRemoveFromEventList+0xb0>)
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <xTaskRemoveFromEventList+0xb4>)
 80049ac:	441a      	add	r2, r3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f7fe feb1 	bl	800371c <vListInsertEnd>
 80049ba:	e005      	b.n	80049c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	3318      	adds	r3, #24
 80049c0:	4619      	mov	r1, r3
 80049c2:	480e      	ldr	r0, [pc, #56]	; (80049fc <xTaskRemoveFromEventList+0xb8>)
 80049c4:	f7fe feaa 	bl	800371c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <xTaskRemoveFromEventList+0xbc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d905      	bls.n	80049e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <xTaskRemoveFromEventList+0xc0>)
 80049dc:	2201      	movs	r2, #1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e001      	b.n	80049e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049e6:	697b      	ldr	r3, [r7, #20]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	200005a0 	.word	0x200005a0
 80049f4:	20000580 	.word	0x20000580
 80049f8:	2000047c 	.word	0x2000047c
 80049fc:	20000538 	.word	0x20000538
 8004a00:	20000478 	.word	0x20000478
 8004a04:	2000058c 	.word	0x2000058c

08004a08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <vTaskInternalSetTimeOutState+0x24>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <vTaskInternalSetTimeOutState+0x28>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	605a      	str	r2, [r3, #4]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000590 	.word	0x20000590
 8004a30:	2000057c 	.word	0x2000057c

08004a34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	613b      	str	r3, [r7, #16]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a76:	f000 fc75 	bl	8005364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <xTaskCheckForTimeOut+0xbc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d102      	bne.n	8004a9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e023      	b.n	8004ae2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <xTaskCheckForTimeOut+0xc0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d007      	beq.n	8004ab6 <xTaskCheckForTimeOut+0x82>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e015      	b.n	8004ae2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d20b      	bcs.n	8004ad8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ff9b 	bl	8004a08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e004      	b.n	8004ae2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ae2:	f000 fc6f 	bl	80053c4 <vPortExitCritical>

	return xReturn;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	2000057c 	.word	0x2000057c
 8004af4:	20000590 	.word	0x20000590

08004af8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <vTaskMissedYield+0x14>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	2000058c 	.word	0x2000058c

08004b10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b18:	f000 f854 	bl	8004bc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b1c:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <prvIdleTask+0x2c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d907      	bls.n	8004b34 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <prvIdleTask+0x30>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004b34:	f7fb fd26 	bl	8000584 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004b38:	e7ee      	b.n	8004b18 <prvIdleTask+0x8>
 8004b3a:	bf00      	nop
 8004b3c:	2000047c 	.word	0x2000047c
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	e00c      	b.n	8004b6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <prvInitialiseTaskLists+0x60>)
 8004b5c:	4413      	add	r3, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fdaf 	bl	80036c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3301      	adds	r3, #1
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b06      	cmp	r3, #6
 8004b6e:	d9ef      	bls.n	8004b50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b70:	480d      	ldr	r0, [pc, #52]	; (8004ba8 <prvInitialiseTaskLists+0x64>)
 8004b72:	f7fe fda6 	bl	80036c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b76:	480d      	ldr	r0, [pc, #52]	; (8004bac <prvInitialiseTaskLists+0x68>)
 8004b78:	f7fe fda3 	bl	80036c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b7c:	480c      	ldr	r0, [pc, #48]	; (8004bb0 <prvInitialiseTaskLists+0x6c>)
 8004b7e:	f7fe fda0 	bl	80036c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b82:	480c      	ldr	r0, [pc, #48]	; (8004bb4 <prvInitialiseTaskLists+0x70>)
 8004b84:	f7fe fd9d 	bl	80036c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b88:	480b      	ldr	r0, [pc, #44]	; (8004bb8 <prvInitialiseTaskLists+0x74>)
 8004b8a:	f7fe fd9a 	bl	80036c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <prvInitialiseTaskLists+0x78>)
 8004b90:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <prvInitialiseTaskLists+0x64>)
 8004b92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <prvInitialiseTaskLists+0x7c>)
 8004b96:	4a05      	ldr	r2, [pc, #20]	; (8004bac <prvInitialiseTaskLists+0x68>)
 8004b98:	601a      	str	r2, [r3, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	2000047c 	.word	0x2000047c
 8004ba8:	20000508 	.word	0x20000508
 8004bac:	2000051c 	.word	0x2000051c
 8004bb0:	20000538 	.word	0x20000538
 8004bb4:	2000054c 	.word	0x2000054c
 8004bb8:	20000564 	.word	0x20000564
 8004bbc:	20000530 	.word	0x20000530
 8004bc0:	20000534 	.word	0x20000534

08004bc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bca:	e019      	b.n	8004c00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bcc:	f000 fbca 	bl	8005364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <prvCheckTasksWaitingTermination+0x50>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe fdfa 	bl	80037d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004be2:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <prvCheckTasksWaitingTermination+0x54>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <prvCheckTasksWaitingTermination+0x54>)
 8004bea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <prvCheckTasksWaitingTermination+0x58>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <prvCheckTasksWaitingTermination+0x58>)
 8004bf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bf6:	f000 fbe5 	bl	80053c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f810 	bl	8004c20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <prvCheckTasksWaitingTermination+0x58>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e1      	bne.n	8004bcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	2000054c 	.word	0x2000054c
 8004c18:	20000578 	.word	0x20000578
 8004c1c:	20000560 	.word	0x20000560

08004c20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	334c      	adds	r3, #76	; 0x4c
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ff89 	bl	8005b44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d108      	bne.n	8004c4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fd7d 	bl	8005740 <vPortFree>
				vPortFree( pxTCB );
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fd7a 	bl	8005740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c4c:	e018      	b.n	8004c80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d103      	bne.n	8004c60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fd71 	bl	8005740 <vPortFree>
	}
 8004c5e:	e00f      	b.n	8004c80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d00a      	beq.n	8004c80 <prvDeleteTCB+0x60>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <prvDeleteTCB+0x5e>
	}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <prvResetNextTaskUnblockTime+0x38>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ca0:	e008      	b.n	8004cb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <prvResetNextTaskUnblockTime+0x38>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8004cb2:	6013      	str	r3, [r2, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	20000530 	.word	0x20000530
 8004cc4:	20000598 	.word	0x20000598

08004cc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <xTaskGetSchedulerState+0x34>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	e008      	b.n	8004cee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <xTaskGetSchedulerState+0x38>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	607b      	str	r3, [r7, #4]
 8004ce8:	e001      	b.n	8004cee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cee:	687b      	ldr	r3, [r7, #4]
	}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	20000584 	.word	0x20000584
 8004d00:	200005a0 	.word	0x200005a0

08004d04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d05e      	beq.n	8004dd8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <xTaskPriorityInherit+0xe0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d24e      	bcs.n	8004dc6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	db06      	blt.n	8004d3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d30:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <xTaskPriorityInherit+0xe0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f1c3 0207 	rsb	r2, r3, #7
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6959      	ldr	r1, [r3, #20]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4a26      	ldr	r2, [pc, #152]	; (8004de8 <xTaskPriorityInherit+0xe4>)
 8004d50:	4413      	add	r3, r2
 8004d52:	4299      	cmp	r1, r3
 8004d54:	d12f      	bne.n	8004db6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe fd3b 	bl	80037d6 <uxListRemove>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43da      	mvns	r2, r3
 8004d72:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <xTaskPriorityInherit+0xe8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4013      	ands	r3, r2
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <xTaskPriorityInherit+0xe8>)
 8004d7a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d7c:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <xTaskPriorityInherit+0xe0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	4b17      	ldr	r3, [pc, #92]	; (8004dec <xTaskPriorityInherit+0xe8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <xTaskPriorityInherit+0xe8>)
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4a10      	ldr	r2, [pc, #64]	; (8004de8 <xTaskPriorityInherit+0xe4>)
 8004da6:	441a      	add	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f7fe fcb4 	bl	800371c <vListInsertEnd>
 8004db4:	e004      	b.n	8004dc0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <xTaskPriorityInherit+0xe0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e008      	b.n	8004dd8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <xTaskPriorityInherit+0xe0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d201      	bcs.n	8004dd8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
	}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000478 	.word	0x20000478
 8004de8:	2000047c 	.word	0x2000047c
 8004dec:	20000580 	.word	0x20000580

08004df0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d06e      	beq.n	8004ee4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e06:	4b3a      	ldr	r3, [pc, #232]	; (8004ef0 <xTaskPriorityDisinherit+0x100>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d00a      	beq.n	8004e26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60bb      	str	r3, [r7, #8]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e48:	1e5a      	subs	r2, r3, #1
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d044      	beq.n	8004ee4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d140      	bne.n	8004ee4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe fcb5 	bl	80037d6 <uxListRemove>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d115      	bne.n	8004e9e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	491f      	ldr	r1, [pc, #124]	; (8004ef4 <xTaskPriorityDisinherit+0x104>)
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xTaskPriorityDisinherit+0xae>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43da      	mvns	r2, r3
 8004e94:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <xTaskPriorityDisinherit+0x108>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <xTaskPriorityDisinherit+0x108>)
 8004e9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	f1c3 0207 	rsb	r2, r3, #7
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <xTaskPriorityDisinherit+0x108>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	4a0d      	ldr	r2, [pc, #52]	; (8004ef8 <xTaskPriorityDisinherit+0x108>)
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <xTaskPriorityDisinherit+0x104>)
 8004ed2:	441a      	add	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f7fe fc1e 	bl	800371c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ee4:	697b      	ldr	r3, [r7, #20]
	}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000478 	.word	0x20000478
 8004ef4:	2000047c 	.word	0x2000047c
 8004ef8:	20000580 	.word	0x20000580

08004efc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d077      	beq.n	8005004 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	60fb      	str	r3, [r7, #12]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d902      	bls.n	8004f42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e002      	b.n	8004f48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d058      	beq.n	8005004 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d153      	bne.n	8005004 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d10a      	bne.n	8004f7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60bb      	str	r3, [r7, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	db04      	blt.n	8004f9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f1c3 0207 	rsb	r2, r3, #7
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	6959      	ldr	r1, [r3, #20]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004faa:	4413      	add	r3, r2
 8004fac:	4299      	cmp	r1, r3
 8004fae:	d129      	bne.n	8005004 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe fc0e 	bl	80037d6 <uxListRemove>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43da      	mvns	r2, r3
 8004fcc:	4b11      	ldr	r3, [pc, #68]	; (8005014 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	4a10      	ldr	r2, [pc, #64]	; (8005014 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004fd4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	2201      	movs	r2, #1
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	4a0b      	ldr	r2, [pc, #44]	; (8005014 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4a06      	ldr	r2, [pc, #24]	; (8005010 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004ff6:	441a      	add	r2, r3
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7fe fb8c 	bl	800371c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005004:	bf00      	nop
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000478 	.word	0x20000478
 8005010:	2000047c 	.word	0x2000047c
 8005014:	20000580 	.word	0x20000580

08005018 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <pvTaskIncrementMutexHeldCount+0x24>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <pvTaskIncrementMutexHeldCount+0x24>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800502a:	3201      	adds	r2, #1
 800502c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800502e:	4b03      	ldr	r3, [pc, #12]	; (800503c <pvTaskIncrementMutexHeldCount+0x24>)
 8005030:	681b      	ldr	r3, [r3, #0]
	}
 8005032:	4618      	mov	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20000478 	.word	0x20000478

08005040 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800504a:	4b29      	ldr	r3, [pc, #164]	; (80050f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005050:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3304      	adds	r3, #4
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fbbd 	bl	80037d6 <uxListRemove>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	2201      	movs	r2, #1
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43da      	mvns	r2, r3
 8005070:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4013      	ands	r3, r2
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005078:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d10a      	bne.n	8005098 <prvAddCurrentTaskToDelayedList+0x58>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	481a      	ldr	r0, [pc, #104]	; (80050fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005092:	f7fe fb43 	bl	800371c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005096:	e026      	b.n	80050e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050a0:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d209      	bcs.n	80050c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <prvAddCurrentTaskToDelayedList+0xc0>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f7fe fb51 	bl	8003764 <vListInsert>
}
 80050c2:	e010      	b.n	80050e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe fb47 	bl	8003764 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d202      	bcs.n	80050e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050e0:	4a09      	ldr	r2, [pc, #36]	; (8005108 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6013      	str	r3, [r2, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	2000057c 	.word	0x2000057c
 80050f4:	20000478 	.word	0x20000478
 80050f8:	20000580 	.word	0x20000580
 80050fc:	20000564 	.word	0x20000564
 8005100:	20000534 	.word	0x20000534
 8005104:	20000530 	.word	0x20000530
 8005108:	20000598 	.word	0x20000598

0800510c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3b04      	subs	r3, #4
 800511c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3b04      	subs	r3, #4
 800512a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f023 0201 	bic.w	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3b04      	subs	r3, #4
 800513a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800513c:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <pxPortInitialiseStack+0x64>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3b14      	subs	r3, #20
 8005146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3b04      	subs	r3, #4
 8005152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f06f 0202 	mvn.w	r2, #2
 800515a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3b20      	subs	r3, #32
 8005160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	08005175 	.word	0x08005175

08005174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <prvTaskExitError+0x54>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d00a      	beq.n	800519e <prvTaskExitError+0x2a>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	60fb      	str	r3, [r7, #12]
}
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <prvTaskExitError+0x28>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60bb      	str	r3, [r7, #8]
}
 80051b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051b2:	bf00      	nop
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0fc      	beq.n	80051b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	2000000c 	.word	0x2000000c
 80051cc:	00000000 	.word	0x00000000

080051d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051d0:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <pxCurrentTCBConst2>)
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	6808      	ldr	r0, [r1, #0]
 80051d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051da:	f380 8809 	msr	PSP, r0
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8811 	msr	BASEPRI, r0
 80051ea:	4770      	bx	lr
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst2>:
 80051f0:	20000478 	.word	0x20000478
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051f8:	4808      	ldr	r0, [pc, #32]	; (800521c <prvPortStartFirstTask+0x24>)
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	6800      	ldr	r0, [r0, #0]
 80051fe:	f380 8808 	msr	MSP, r0
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8814 	msr	CONTROL, r0
 800520a:	b662      	cpsie	i
 800520c:	b661      	cpsie	f
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	df00      	svc	0
 8005218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800521a:	bf00      	nop
 800521c:	e000ed08 	.word	0xe000ed08

08005220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005226:	4b46      	ldr	r3, [pc, #280]	; (8005340 <xPortStartScheduler+0x120>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a46      	ldr	r2, [pc, #280]	; (8005344 <xPortStartScheduler+0x124>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10a      	bne.n	8005246 <xPortStartScheduler+0x26>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	613b      	str	r3, [r7, #16]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005246:	4b3e      	ldr	r3, [pc, #248]	; (8005340 <xPortStartScheduler+0x120>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a3f      	ldr	r2, [pc, #252]	; (8005348 <xPortStartScheduler+0x128>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10a      	bne.n	8005266 <xPortStartScheduler+0x46>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005266:	4b39      	ldr	r3, [pc, #228]	; (800534c <xPortStartScheduler+0x12c>)
 8005268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	22ff      	movs	r2, #255	; 0xff
 8005276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005288:	b2da      	uxtb	r2, r3
 800528a:	4b31      	ldr	r3, [pc, #196]	; (8005350 <xPortStartScheduler+0x130>)
 800528c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800528e:	4b31      	ldr	r3, [pc, #196]	; (8005354 <xPortStartScheduler+0x134>)
 8005290:	2207      	movs	r2, #7
 8005292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005294:	e009      	b.n	80052aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005296:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <xPortStartScheduler+0x134>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	4a2d      	ldr	r2, [pc, #180]	; (8005354 <xPortStartScheduler+0x134>)
 800529e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b80      	cmp	r3, #128	; 0x80
 80052b4:	d0ef      	beq.n	8005296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052b6:	4b27      	ldr	r3, [pc, #156]	; (8005354 <xPortStartScheduler+0x134>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f1c3 0307 	rsb	r3, r3, #7
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d00a      	beq.n	80052d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	60bb      	str	r3, [r7, #8]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052d8:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <xPortStartScheduler+0x134>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <xPortStartScheduler+0x134>)
 80052e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052e2:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <xPortStartScheduler+0x134>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052ea:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <xPortStartScheduler+0x134>)
 80052ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052f6:	4b18      	ldr	r3, [pc, #96]	; (8005358 <xPortStartScheduler+0x138>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <xPortStartScheduler+0x138>)
 80052fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005302:	4b15      	ldr	r3, [pc, #84]	; (8005358 <xPortStartScheduler+0x138>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a14      	ldr	r2, [pc, #80]	; (8005358 <xPortStartScheduler+0x138>)
 8005308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800530c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800530e:	f000 f8dd 	bl	80054cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005312:	4b12      	ldr	r3, [pc, #72]	; (800535c <xPortStartScheduler+0x13c>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005318:	f000 f8fc 	bl	8005514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <xPortStartScheduler+0x140>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <xPortStartScheduler+0x140>)
 8005322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005328:	f7ff ff66 	bl	80051f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800532c:	f7ff fa84 	bl	8004838 <vTaskSwitchContext>
	prvTaskExitError();
 8005330:	f7ff ff20 	bl	8005174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	e000ed00 	.word	0xe000ed00
 8005344:	410fc271 	.word	0x410fc271
 8005348:	410fc270 	.word	0x410fc270
 800534c:	e000e400 	.word	0xe000e400
 8005350:	200005a4 	.word	0x200005a4
 8005354:	200005a8 	.word	0x200005a8
 8005358:	e000ed20 	.word	0xe000ed20
 800535c:	2000000c 	.word	0x2000000c
 8005360:	e000ef34 	.word	0xe000ef34

08005364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	607b      	str	r3, [r7, #4]
}
 800537c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800537e:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <vPortEnterCritical+0x58>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <vPortEnterCritical+0x58>)
 8005386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <vPortEnterCritical+0x58>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d10f      	bne.n	80053b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <vPortEnterCritical+0x5c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	603b      	str	r3, [r7, #0]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <vPortEnterCritical+0x4a>
	}
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	2000000c 	.word	0x2000000c
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053ca:	4b12      	ldr	r3, [pc, #72]	; (8005414 <vPortExitCritical+0x50>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <vPortExitCritical+0x24>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	607b      	str	r3, [r7, #4]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <vPortExitCritical+0x50>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	4a09      	ldr	r2, [pc, #36]	; (8005414 <vPortExitCritical+0x50>)
 80053f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <vPortExitCritical+0x50>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d105      	bne.n	8005406 <vPortExitCritical+0x42>
 80053fa:	2300      	movs	r3, #0
 80053fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f383 8811 	msr	BASEPRI, r3
}
 8005404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	2000000c 	.word	0x2000000c
	...

08005420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005420:	f3ef 8009 	mrs	r0, PSP
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	4b15      	ldr	r3, [pc, #84]	; (8005480 <pxCurrentTCBConst>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f01e 0f10 	tst.w	lr, #16
 8005430:	bf08      	it	eq
 8005432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	6010      	str	r0, [r2, #0]
 800543c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005444:	f380 8811 	msr	BASEPRI, r0
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f7ff f9f2 	bl	8004838 <vTaskSwitchContext>
 8005454:	f04f 0000 	mov.w	r0, #0
 8005458:	f380 8811 	msr	BASEPRI, r0
 800545c:	bc09      	pop	{r0, r3}
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	6808      	ldr	r0, [r1, #0]
 8005462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005466:	f01e 0f10 	tst.w	lr, #16
 800546a:	bf08      	it	eq
 800546c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005470:	f380 8809 	msr	PSP, r0
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	f3af 8000 	nop.w

08005480 <pxCurrentTCBConst>:
 8005480:	20000478 	.word	0x20000478
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop

08005488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	607b      	str	r3, [r7, #4]
}
 80054a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054a2:	f7ff f911 	bl	80046c8 <xTaskIncrementTick>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <SysTick_Handler+0x40>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f383 8811 	msr	BASEPRI, r3
}
 80054be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054d0:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <vPortSetupTimerInterrupt+0x34>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <vPortSetupTimerInterrupt+0x38>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054dc:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <vPortSetupTimerInterrupt+0x3c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a0a      	ldr	r2, [pc, #40]	; (800550c <vPortSetupTimerInterrupt+0x40>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	099b      	lsrs	r3, r3, #6
 80054e8:	4a09      	ldr	r2, [pc, #36]	; (8005510 <vPortSetupTimerInterrupt+0x44>)
 80054ea:	3b01      	subs	r3, #1
 80054ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <vPortSetupTimerInterrupt+0x34>)
 80054f0:	2207      	movs	r2, #7
 80054f2:	601a      	str	r2, [r3, #0]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	e000e010 	.word	0xe000e010
 8005504:	e000e018 	.word	0xe000e018
 8005508:	20000000 	.word	0x20000000
 800550c:	10624dd3 	.word	0x10624dd3
 8005510:	e000e014 	.word	0xe000e014

08005514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005524 <vPortEnableVFP+0x10>
 8005518:	6801      	ldr	r1, [r0, #0]
 800551a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800551e:	6001      	str	r1, [r0, #0]
 8005520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005522:	bf00      	nop
 8005524:	e000ed88 	.word	0xe000ed88

08005528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800552e:	f3ef 8305 	mrs	r3, IPSR
 8005532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d914      	bls.n	8005564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800553a:	4a17      	ldr	r2, [pc, #92]	; (8005598 <vPortValidateInterruptPriority+0x70>)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005544:	4b15      	ldr	r3, [pc, #84]	; (800559c <vPortValidateInterruptPriority+0x74>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	7afa      	ldrb	r2, [r7, #11]
 800554a:	429a      	cmp	r2, r3
 800554c:	d20a      	bcs.n	8005564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <vPortValidateInterruptPriority+0x78>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800556c:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <vPortValidateInterruptPriority+0x7c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d90a      	bls.n	800558a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	603b      	str	r3, [r7, #0]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <vPortValidateInterruptPriority+0x60>
	}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	e000e3f0 	.word	0xe000e3f0
 800559c:	200005a4 	.word	0x200005a4
 80055a0:	e000ed0c 	.word	0xe000ed0c
 80055a4:	200005a8 	.word	0x200005a8

080055a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055b4:	f7fe ffde 	bl	8004574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055b8:	4b5b      	ldr	r3, [pc, #364]	; (8005728 <pvPortMalloc+0x180>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055c0:	f000 f920 	bl	8005804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055c4:	4b59      	ldr	r3, [pc, #356]	; (800572c <pvPortMalloc+0x184>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f040 8093 	bne.w	80056f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01d      	beq.n	8005614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055d8:	2208      	movs	r2, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4413      	add	r3, r2
 80055de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d014      	beq.n	8005614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f023 0307 	bic.w	r3, r3, #7
 80055f0:	3308      	adds	r3, #8
 80055f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <pvPortMalloc+0x6c>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	617b      	str	r3, [r7, #20]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d06e      	beq.n	80056f8 <pvPortMalloc+0x150>
 800561a:	4b45      	ldr	r3, [pc, #276]	; (8005730 <pvPortMalloc+0x188>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d869      	bhi.n	80056f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005624:	4b43      	ldr	r3, [pc, #268]	; (8005734 <pvPortMalloc+0x18c>)
 8005626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005628:	4b42      	ldr	r3, [pc, #264]	; (8005734 <pvPortMalloc+0x18c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800562e:	e004      	b.n	800563a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d903      	bls.n	800564c <pvPortMalloc+0xa4>
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1f1      	bne.n	8005630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <pvPortMalloc+0x180>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005652:	429a      	cmp	r2, r3
 8005654:	d050      	beq.n	80056f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2208      	movs	r2, #8
 800565c:	4413      	add	r3, r2
 800565e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	2308      	movs	r3, #8
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	429a      	cmp	r2, r3
 8005676:	d91f      	bls.n	80056b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <pvPortMalloc+0xf8>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	613b      	str	r3, [r7, #16]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	1ad2      	subs	r2, r2, r3
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056b2:	69b8      	ldr	r0, [r7, #24]
 80056b4:	f000 f908 	bl	80058c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <pvPortMalloc+0x188>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <pvPortMalloc+0x188>)
 80056c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056c6:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <pvPortMalloc+0x188>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <pvPortMalloc+0x190>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d203      	bcs.n	80056da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056d2:	4b17      	ldr	r3, [pc, #92]	; (8005730 <pvPortMalloc+0x188>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <pvPortMalloc+0x190>)
 80056d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <pvPortMalloc+0x184>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <pvPortMalloc+0x194>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	4a11      	ldr	r2, [pc, #68]	; (800573c <pvPortMalloc+0x194>)
 80056f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056f8:	f7fe ff4a 	bl	8004590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <pvPortMalloc+0x174>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	60fb      	str	r3, [r7, #12]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <pvPortMalloc+0x172>
	return pvReturn;
 800571c:	69fb      	ldr	r3, [r7, #28]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3728      	adds	r7, #40	; 0x28
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	200041b4 	.word	0x200041b4
 800572c:	200041c8 	.word	0x200041c8
 8005730:	200041b8 	.word	0x200041b8
 8005734:	200041ac 	.word	0x200041ac
 8005738:	200041bc 	.word	0x200041bc
 800573c:	200041c0 	.word	0x200041c0

08005740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d04d      	beq.n	80057ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005752:	2308      	movs	r3, #8
 8005754:	425b      	negs	r3, r3
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <vPortFree+0xb8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4013      	ands	r3, r2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <vPortFree+0x44>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60fb      	str	r3, [r7, #12]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <vPortFree+0x62>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60bb      	str	r3, [r7, #8]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <vPortFree+0xb8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01e      	beq.n	80057ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d11a      	bne.n	80057ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <vPortFree+0xb8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	43db      	mvns	r3, r3
 80057c2:	401a      	ands	r2, r3
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057c8:	f7fe fed4 	bl	8004574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <vPortFree+0xbc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	4a09      	ldr	r2, [pc, #36]	; (80057fc <vPortFree+0xbc>)
 80057d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f000 f874 	bl	80058c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <vPortFree+0xc0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a06      	ldr	r2, [pc, #24]	; (8005800 <vPortFree+0xc0>)
 80057e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057ea:	f7fe fed1 	bl	8004590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057ee:	bf00      	nop
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	200041c8 	.word	0x200041c8
 80057fc:	200041b8 	.word	0x200041b8
 8005800:	200041c4 	.word	0x200041c4

08005804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800580a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800580e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005810:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <prvHeapInit+0xac>)
 8005812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00c      	beq.n	8005838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3307      	adds	r3, #7
 8005822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0307 	bic.w	r3, r3, #7
 800582a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <prvHeapInit+0xac>)
 8005834:	4413      	add	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800583c:	4a1d      	ldr	r2, [pc, #116]	; (80058b4 <prvHeapInit+0xb0>)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <prvHeapInit+0xb0>)
 8005844:	2200      	movs	r2, #0
 8005846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	4413      	add	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005850:	2208      	movs	r2, #8
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0307 	bic.w	r3, r3, #7
 800585e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <prvHeapInit+0xb4>)
 8005864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <prvHeapInit+0xb4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800586e:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <prvHeapInit+0xb4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <prvHeapInit+0xb4>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <prvHeapInit+0xb8>)
 8005892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <prvHeapInit+0xbc>)
 800589a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800589c:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <prvHeapInit+0xc0>)
 800589e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058a2:	601a      	str	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	200005ac 	.word	0x200005ac
 80058b4:	200041ac 	.word	0x200041ac
 80058b8:	200041b4 	.word	0x200041b4
 80058bc:	200041bc 	.word	0x200041bc
 80058c0:	200041b8 	.word	0x200041b8
 80058c4:	200041c8 	.word	0x200041c8

080058c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058d0:	4b28      	ldr	r3, [pc, #160]	; (8005974 <prvInsertBlockIntoFreeList+0xac>)
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e002      	b.n	80058dc <prvInsertBlockIntoFreeList+0x14>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d8f7      	bhi.n	80058d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	4413      	add	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d108      	bne.n	800590a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	441a      	add	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	441a      	add	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d118      	bne.n	8005950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <prvInsertBlockIntoFreeList+0xb0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d00d      	beq.n	8005946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e008      	b.n	8005958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005946:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <prvInsertBlockIntoFreeList+0xb0>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e003      	b.n	8005958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d002      	beq.n	8005966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	200041ac 	.word	0x200041ac
 8005978:	200041b4 	.word	0x200041b4

0800597c <__errno>:
 800597c:	4b01      	ldr	r3, [pc, #4]	; (8005984 <__errno+0x8>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000010 	.word	0x20000010

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4d0d      	ldr	r5, [pc, #52]	; (80059c0 <__libc_init_array+0x38>)
 800598c:	4c0d      	ldr	r4, [pc, #52]	; (80059c4 <__libc_init_array+0x3c>)
 800598e:	1b64      	subs	r4, r4, r5
 8005990:	10a4      	asrs	r4, r4, #2
 8005992:	2600      	movs	r6, #0
 8005994:	42a6      	cmp	r6, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	4d0b      	ldr	r5, [pc, #44]	; (80059c8 <__libc_init_array+0x40>)
 800599a:	4c0c      	ldr	r4, [pc, #48]	; (80059cc <__libc_init_array+0x44>)
 800599c:	f000 fcf8 	bl	8006390 <_init>
 80059a0:	1b64      	subs	r4, r4, r5
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	2600      	movs	r6, #0
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b0:	4798      	blx	r3
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ba:	4798      	blx	r3
 80059bc:	3601      	adds	r6, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	080064b8 	.word	0x080064b8
 80059c4:	080064b8 	.word	0x080064b8
 80059c8:	080064b8 	.word	0x080064b8
 80059cc:	080064bc 	.word	0x080064bc

080059d0 <__retarget_lock_acquire_recursive>:
 80059d0:	4770      	bx	lr

080059d2 <__retarget_lock_release_recursive>:
 80059d2:	4770      	bx	lr

080059d4 <memcpy>:
 80059d4:	440a      	add	r2, r1
 80059d6:	4291      	cmp	r1, r2
 80059d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059dc:	d100      	bne.n	80059e0 <memcpy+0xc>
 80059de:	4770      	bx	lr
 80059e0:	b510      	push	{r4, lr}
 80059e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ea:	4291      	cmp	r1, r2
 80059ec:	d1f9      	bne.n	80059e2 <memcpy+0xe>
 80059ee:	bd10      	pop	{r4, pc}

080059f0 <memset>:
 80059f0:	4402      	add	r2, r0
 80059f2:	4603      	mov	r3, r0
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d100      	bne.n	80059fa <memset+0xa>
 80059f8:	4770      	bx	lr
 80059fa:	f803 1b01 	strb.w	r1, [r3], #1
 80059fe:	e7f9      	b.n	80059f4 <memset+0x4>

08005a00 <sbrk_aligned>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	4e0e      	ldr	r6, [pc, #56]	; (8005a3c <sbrk_aligned+0x3c>)
 8005a04:	460c      	mov	r4, r1
 8005a06:	6831      	ldr	r1, [r6, #0]
 8005a08:	4605      	mov	r5, r0
 8005a0a:	b911      	cbnz	r1, 8005a12 <sbrk_aligned+0x12>
 8005a0c:	f000 f8f6 	bl	8005bfc <_sbrk_r>
 8005a10:	6030      	str	r0, [r6, #0]
 8005a12:	4621      	mov	r1, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 f8f1 	bl	8005bfc <_sbrk_r>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	d00a      	beq.n	8005a34 <sbrk_aligned+0x34>
 8005a1e:	1cc4      	adds	r4, r0, #3
 8005a20:	f024 0403 	bic.w	r4, r4, #3
 8005a24:	42a0      	cmp	r0, r4
 8005a26:	d007      	beq.n	8005a38 <sbrk_aligned+0x38>
 8005a28:	1a21      	subs	r1, r4, r0
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f8e6 	bl	8005bfc <_sbrk_r>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d101      	bne.n	8005a38 <sbrk_aligned+0x38>
 8005a34:	f04f 34ff 	mov.w	r4, #4294967295
 8005a38:	4620      	mov	r0, r4
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	200041d4 	.word	0x200041d4

08005a40 <_malloc_r>:
 8005a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	1ccd      	adds	r5, r1, #3
 8005a46:	f025 0503 	bic.w	r5, r5, #3
 8005a4a:	3508      	adds	r5, #8
 8005a4c:	2d0c      	cmp	r5, #12
 8005a4e:	bf38      	it	cc
 8005a50:	250c      	movcc	r5, #12
 8005a52:	2d00      	cmp	r5, #0
 8005a54:	4607      	mov	r7, r0
 8005a56:	db01      	blt.n	8005a5c <_malloc_r+0x1c>
 8005a58:	42a9      	cmp	r1, r5
 8005a5a:	d905      	bls.n	8005a68 <_malloc_r+0x28>
 8005a5c:	230c      	movs	r3, #12
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	2600      	movs	r6, #0
 8005a62:	4630      	mov	r0, r6
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	4e2e      	ldr	r6, [pc, #184]	; (8005b24 <_malloc_r+0xe4>)
 8005a6a:	f000 f8f7 	bl	8005c5c <__malloc_lock>
 8005a6e:	6833      	ldr	r3, [r6, #0]
 8005a70:	461c      	mov	r4, r3
 8005a72:	bb34      	cbnz	r4, 8005ac2 <_malloc_r+0x82>
 8005a74:	4629      	mov	r1, r5
 8005a76:	4638      	mov	r0, r7
 8005a78:	f7ff ffc2 	bl	8005a00 <sbrk_aligned>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	4604      	mov	r4, r0
 8005a80:	d14d      	bne.n	8005b1e <_malloc_r+0xde>
 8005a82:	6834      	ldr	r4, [r6, #0]
 8005a84:	4626      	mov	r6, r4
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d140      	bne.n	8005b0c <_malloc_r+0xcc>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4638      	mov	r0, r7
 8005a90:	eb04 0803 	add.w	r8, r4, r3
 8005a94:	f000 f8b2 	bl	8005bfc <_sbrk_r>
 8005a98:	4580      	cmp	r8, r0
 8005a9a:	d13a      	bne.n	8005b12 <_malloc_r+0xd2>
 8005a9c:	6821      	ldr	r1, [r4, #0]
 8005a9e:	3503      	adds	r5, #3
 8005aa0:	1a6d      	subs	r5, r5, r1
 8005aa2:	f025 0503 	bic.w	r5, r5, #3
 8005aa6:	3508      	adds	r5, #8
 8005aa8:	2d0c      	cmp	r5, #12
 8005aaa:	bf38      	it	cc
 8005aac:	250c      	movcc	r5, #12
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f7ff ffa5 	bl	8005a00 <sbrk_aligned>
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d02b      	beq.n	8005b12 <_malloc_r+0xd2>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	442b      	add	r3, r5
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	e00e      	b.n	8005ae0 <_malloc_r+0xa0>
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	1b52      	subs	r2, r2, r5
 8005ac6:	d41e      	bmi.n	8005b06 <_malloc_r+0xc6>
 8005ac8:	2a0b      	cmp	r2, #11
 8005aca:	d916      	bls.n	8005afa <_malloc_r+0xba>
 8005acc:	1961      	adds	r1, r4, r5
 8005ace:	42a3      	cmp	r3, r4
 8005ad0:	6025      	str	r5, [r4, #0]
 8005ad2:	bf18      	it	ne
 8005ad4:	6059      	strne	r1, [r3, #4]
 8005ad6:	6863      	ldr	r3, [r4, #4]
 8005ad8:	bf08      	it	eq
 8005ada:	6031      	streq	r1, [r6, #0]
 8005adc:	5162      	str	r2, [r4, r5]
 8005ade:	604b      	str	r3, [r1, #4]
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	f104 060b 	add.w	r6, r4, #11
 8005ae6:	f000 f8bf 	bl	8005c68 <__malloc_unlock>
 8005aea:	f026 0607 	bic.w	r6, r6, #7
 8005aee:	1d23      	adds	r3, r4, #4
 8005af0:	1af2      	subs	r2, r6, r3
 8005af2:	d0b6      	beq.n	8005a62 <_malloc_r+0x22>
 8005af4:	1b9b      	subs	r3, r3, r6
 8005af6:	50a3      	str	r3, [r4, r2]
 8005af8:	e7b3      	b.n	8005a62 <_malloc_r+0x22>
 8005afa:	6862      	ldr	r2, [r4, #4]
 8005afc:	42a3      	cmp	r3, r4
 8005afe:	bf0c      	ite	eq
 8005b00:	6032      	streq	r2, [r6, #0]
 8005b02:	605a      	strne	r2, [r3, #4]
 8005b04:	e7ec      	b.n	8005ae0 <_malloc_r+0xa0>
 8005b06:	4623      	mov	r3, r4
 8005b08:	6864      	ldr	r4, [r4, #4]
 8005b0a:	e7b2      	b.n	8005a72 <_malloc_r+0x32>
 8005b0c:	4634      	mov	r4, r6
 8005b0e:	6876      	ldr	r6, [r6, #4]
 8005b10:	e7b9      	b.n	8005a86 <_malloc_r+0x46>
 8005b12:	230c      	movs	r3, #12
 8005b14:	603b      	str	r3, [r7, #0]
 8005b16:	4638      	mov	r0, r7
 8005b18:	f000 f8a6 	bl	8005c68 <__malloc_unlock>
 8005b1c:	e7a1      	b.n	8005a62 <_malloc_r+0x22>
 8005b1e:	6025      	str	r5, [r4, #0]
 8005b20:	e7de      	b.n	8005ae0 <_malloc_r+0xa0>
 8005b22:	bf00      	nop
 8005b24:	200041d0 	.word	0x200041d0

08005b28 <cleanup_glue>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	6809      	ldr	r1, [r1, #0]
 8005b2e:	4605      	mov	r5, r0
 8005b30:	b109      	cbz	r1, 8005b36 <cleanup_glue+0xe>
 8005b32:	f7ff fff9 	bl	8005b28 <cleanup_glue>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b3e:	f000 b899 	b.w	8005c74 <_free_r>
	...

08005b44 <_reclaim_reent>:
 8005b44:	4b2c      	ldr	r3, [pc, #176]	; (8005bf8 <_reclaim_reent+0xb4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4283      	cmp	r3, r0
 8005b4a:	b570      	push	{r4, r5, r6, lr}
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	d051      	beq.n	8005bf4 <_reclaim_reent+0xb0>
 8005b50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b52:	b143      	cbz	r3, 8005b66 <_reclaim_reent+0x22>
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d14a      	bne.n	8005bf0 <_reclaim_reent+0xac>
 8005b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	b111      	cbz	r1, 8005b66 <_reclaim_reent+0x22>
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 f887 	bl	8005c74 <_free_r>
 8005b66:	6961      	ldr	r1, [r4, #20]
 8005b68:	b111      	cbz	r1, 8005b70 <_reclaim_reent+0x2c>
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 f882 	bl	8005c74 <_free_r>
 8005b70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b72:	b111      	cbz	r1, 8005b7a <_reclaim_reent+0x36>
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 f87d 	bl	8005c74 <_free_r>
 8005b7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b7c:	b111      	cbz	r1, 8005b84 <_reclaim_reent+0x40>
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f000 f878 	bl	8005c74 <_free_r>
 8005b84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005b86:	b111      	cbz	r1, 8005b8e <_reclaim_reent+0x4a>
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 f873 	bl	8005c74 <_free_r>
 8005b8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b90:	b111      	cbz	r1, 8005b98 <_reclaim_reent+0x54>
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 f86e 	bl	8005c74 <_free_r>
 8005b98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005b9a:	b111      	cbz	r1, 8005ba2 <_reclaim_reent+0x5e>
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 f869 	bl	8005c74 <_free_r>
 8005ba2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ba4:	b111      	cbz	r1, 8005bac <_reclaim_reent+0x68>
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 f864 	bl	8005c74 <_free_r>
 8005bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bae:	b111      	cbz	r1, 8005bb6 <_reclaim_reent+0x72>
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 f85f 	bl	8005c74 <_free_r>
 8005bb6:	69a3      	ldr	r3, [r4, #24]
 8005bb8:	b1e3      	cbz	r3, 8005bf4 <_reclaim_reent+0xb0>
 8005bba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4798      	blx	r3
 8005bc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bc2:	b1b9      	cbz	r1, 8005bf4 <_reclaim_reent+0xb0>
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005bca:	f7ff bfad 	b.w	8005b28 <cleanup_glue>
 8005bce:	5949      	ldr	r1, [r1, r5]
 8005bd0:	b941      	cbnz	r1, 8005be4 <_reclaim_reent+0xa0>
 8005bd2:	3504      	adds	r5, #4
 8005bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bd6:	2d80      	cmp	r5, #128	; 0x80
 8005bd8:	68d9      	ldr	r1, [r3, #12]
 8005bda:	d1f8      	bne.n	8005bce <_reclaim_reent+0x8a>
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 f849 	bl	8005c74 <_free_r>
 8005be2:	e7ba      	b.n	8005b5a <_reclaim_reent+0x16>
 8005be4:	680e      	ldr	r6, [r1, #0]
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 f844 	bl	8005c74 <_free_r>
 8005bec:	4631      	mov	r1, r6
 8005bee:	e7ef      	b.n	8005bd0 <_reclaim_reent+0x8c>
 8005bf0:	2500      	movs	r5, #0
 8005bf2:	e7ef      	b.n	8005bd4 <_reclaim_reent+0x90>
 8005bf4:	bd70      	pop	{r4, r5, r6, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000010 	.word	0x20000010

08005bfc <_sbrk_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d06      	ldr	r5, [pc, #24]	; (8005c18 <_sbrk_r+0x1c>)
 8005c00:	2300      	movs	r3, #0
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	f7fb f92a 	bl	8000e60 <_sbrk>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_sbrk_r+0x1a>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_sbrk_r+0x1a>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	200041d8 	.word	0x200041d8

08005c1c <siprintf>:
 8005c1c:	b40e      	push	{r1, r2, r3}
 8005c1e:	b500      	push	{lr}
 8005c20:	b09c      	sub	sp, #112	; 0x70
 8005c22:	ab1d      	add	r3, sp, #116	; 0x74
 8005c24:	9002      	str	r0, [sp, #8]
 8005c26:	9006      	str	r0, [sp, #24]
 8005c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c2c:	4809      	ldr	r0, [pc, #36]	; (8005c54 <siprintf+0x38>)
 8005c2e:	9107      	str	r1, [sp, #28]
 8005c30:	9104      	str	r1, [sp, #16]
 8005c32:	4909      	ldr	r1, [pc, #36]	; (8005c58 <siprintf+0x3c>)
 8005c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c38:	9105      	str	r1, [sp, #20]
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	a902      	add	r1, sp, #8
 8005c40:	f000 f8c0 	bl	8005dc4 <_svfiprintf_r>
 8005c44:	9b02      	ldr	r3, [sp, #8]
 8005c46:	2200      	movs	r2, #0
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	b01c      	add	sp, #112	; 0x70
 8005c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c50:	b003      	add	sp, #12
 8005c52:	4770      	bx	lr
 8005c54:	20000010 	.word	0x20000010
 8005c58:	ffff0208 	.word	0xffff0208

08005c5c <__malloc_lock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__malloc_lock+0x8>)
 8005c5e:	f7ff beb7 	b.w	80059d0 <__retarget_lock_acquire_recursive>
 8005c62:	bf00      	nop
 8005c64:	200041cc 	.word	0x200041cc

08005c68 <__malloc_unlock>:
 8005c68:	4801      	ldr	r0, [pc, #4]	; (8005c70 <__malloc_unlock+0x8>)
 8005c6a:	f7ff beb2 	b.w	80059d2 <__retarget_lock_release_recursive>
 8005c6e:	bf00      	nop
 8005c70:	200041cc 	.word	0x200041cc

08005c74 <_free_r>:
 8005c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c76:	2900      	cmp	r1, #0
 8005c78:	d044      	beq.n	8005d04 <_free_r+0x90>
 8005c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7e:	9001      	str	r0, [sp, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f1a1 0404 	sub.w	r4, r1, #4
 8005c86:	bfb8      	it	lt
 8005c88:	18e4      	addlt	r4, r4, r3
 8005c8a:	f7ff ffe7 	bl	8005c5c <__malloc_lock>
 8005c8e:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <_free_r+0x94>)
 8005c90:	9801      	ldr	r0, [sp, #4]
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	b933      	cbnz	r3, 8005ca4 <_free_r+0x30>
 8005c96:	6063      	str	r3, [r4, #4]
 8005c98:	6014      	str	r4, [r2, #0]
 8005c9a:	b003      	add	sp, #12
 8005c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ca0:	f7ff bfe2 	b.w	8005c68 <__malloc_unlock>
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	d908      	bls.n	8005cba <_free_r+0x46>
 8005ca8:	6825      	ldr	r5, [r4, #0]
 8005caa:	1961      	adds	r1, r4, r5
 8005cac:	428b      	cmp	r3, r1
 8005cae:	bf01      	itttt	eq
 8005cb0:	6819      	ldreq	r1, [r3, #0]
 8005cb2:	685b      	ldreq	r3, [r3, #4]
 8005cb4:	1949      	addeq	r1, r1, r5
 8005cb6:	6021      	streq	r1, [r4, #0]
 8005cb8:	e7ed      	b.n	8005c96 <_free_r+0x22>
 8005cba:	461a      	mov	r2, r3
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	b10b      	cbz	r3, 8005cc4 <_free_r+0x50>
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d9fa      	bls.n	8005cba <_free_r+0x46>
 8005cc4:	6811      	ldr	r1, [r2, #0]
 8005cc6:	1855      	adds	r5, r2, r1
 8005cc8:	42a5      	cmp	r5, r4
 8005cca:	d10b      	bne.n	8005ce4 <_free_r+0x70>
 8005ccc:	6824      	ldr	r4, [r4, #0]
 8005cce:	4421      	add	r1, r4
 8005cd0:	1854      	adds	r4, r2, r1
 8005cd2:	42a3      	cmp	r3, r4
 8005cd4:	6011      	str	r1, [r2, #0]
 8005cd6:	d1e0      	bne.n	8005c9a <_free_r+0x26>
 8005cd8:	681c      	ldr	r4, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	6053      	str	r3, [r2, #4]
 8005cde:	4421      	add	r1, r4
 8005ce0:	6011      	str	r1, [r2, #0]
 8005ce2:	e7da      	b.n	8005c9a <_free_r+0x26>
 8005ce4:	d902      	bls.n	8005cec <_free_r+0x78>
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	6003      	str	r3, [r0, #0]
 8005cea:	e7d6      	b.n	8005c9a <_free_r+0x26>
 8005cec:	6825      	ldr	r5, [r4, #0]
 8005cee:	1961      	adds	r1, r4, r5
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	bf04      	itt	eq
 8005cf4:	6819      	ldreq	r1, [r3, #0]
 8005cf6:	685b      	ldreq	r3, [r3, #4]
 8005cf8:	6063      	str	r3, [r4, #4]
 8005cfa:	bf04      	itt	eq
 8005cfc:	1949      	addeq	r1, r1, r5
 8005cfe:	6021      	streq	r1, [r4, #0]
 8005d00:	6054      	str	r4, [r2, #4]
 8005d02:	e7ca      	b.n	8005c9a <_free_r+0x26>
 8005d04:	b003      	add	sp, #12
 8005d06:	bd30      	pop	{r4, r5, pc}
 8005d08:	200041d0 	.word	0x200041d0

08005d0c <__ssputs_r>:
 8005d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	688e      	ldr	r6, [r1, #8]
 8005d12:	429e      	cmp	r6, r3
 8005d14:	4682      	mov	sl, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	4690      	mov	r8, r2
 8005d1a:	461f      	mov	r7, r3
 8005d1c:	d838      	bhi.n	8005d90 <__ssputs_r+0x84>
 8005d1e:	898a      	ldrh	r2, [r1, #12]
 8005d20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d24:	d032      	beq.n	8005d8c <__ssputs_r+0x80>
 8005d26:	6825      	ldr	r5, [r4, #0]
 8005d28:	6909      	ldr	r1, [r1, #16]
 8005d2a:	eba5 0901 	sub.w	r9, r5, r1
 8005d2e:	6965      	ldr	r5, [r4, #20]
 8005d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d38:	3301      	adds	r3, #1
 8005d3a:	444b      	add	r3, r9
 8005d3c:	106d      	asrs	r5, r5, #1
 8005d3e:	429d      	cmp	r5, r3
 8005d40:	bf38      	it	cc
 8005d42:	461d      	movcc	r5, r3
 8005d44:	0553      	lsls	r3, r2, #21
 8005d46:	d531      	bpl.n	8005dac <__ssputs_r+0xa0>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7ff fe79 	bl	8005a40 <_malloc_r>
 8005d4e:	4606      	mov	r6, r0
 8005d50:	b950      	cbnz	r0, 8005d68 <__ssputs_r+0x5c>
 8005d52:	230c      	movs	r3, #12
 8005d54:	f8ca 3000 	str.w	r3, [sl]
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295
 8005d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d68:	6921      	ldr	r1, [r4, #16]
 8005d6a:	464a      	mov	r2, r9
 8005d6c:	f7ff fe32 	bl	80059d4 <memcpy>
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	6126      	str	r6, [r4, #16]
 8005d7e:	6165      	str	r5, [r4, #20]
 8005d80:	444e      	add	r6, r9
 8005d82:	eba5 0509 	sub.w	r5, r5, r9
 8005d86:	6026      	str	r6, [r4, #0]
 8005d88:	60a5      	str	r5, [r4, #8]
 8005d8a:	463e      	mov	r6, r7
 8005d8c:	42be      	cmp	r6, r7
 8005d8e:	d900      	bls.n	8005d92 <__ssputs_r+0x86>
 8005d90:	463e      	mov	r6, r7
 8005d92:	6820      	ldr	r0, [r4, #0]
 8005d94:	4632      	mov	r2, r6
 8005d96:	4641      	mov	r1, r8
 8005d98:	f000 faa8 	bl	80062ec <memmove>
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	1b9b      	subs	r3, r3, r6
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	4433      	add	r3, r6
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	2000      	movs	r0, #0
 8005daa:	e7db      	b.n	8005d64 <__ssputs_r+0x58>
 8005dac:	462a      	mov	r2, r5
 8005dae:	f000 fab7 	bl	8006320 <_realloc_r>
 8005db2:	4606      	mov	r6, r0
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d1e1      	bne.n	8005d7c <__ssputs_r+0x70>
 8005db8:	6921      	ldr	r1, [r4, #16]
 8005dba:	4650      	mov	r0, sl
 8005dbc:	f7ff ff5a 	bl	8005c74 <_free_r>
 8005dc0:	e7c7      	b.n	8005d52 <__ssputs_r+0x46>
	...

08005dc4 <_svfiprintf_r>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	4698      	mov	r8, r3
 8005dca:	898b      	ldrh	r3, [r1, #12]
 8005dcc:	061b      	lsls	r3, r3, #24
 8005dce:	b09d      	sub	sp, #116	; 0x74
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	d50e      	bpl.n	8005df6 <_svfiprintf_r+0x32>
 8005dd8:	690b      	ldr	r3, [r1, #16]
 8005dda:	b963      	cbnz	r3, 8005df6 <_svfiprintf_r+0x32>
 8005ddc:	2140      	movs	r1, #64	; 0x40
 8005dde:	f7ff fe2f 	bl	8005a40 <_malloc_r>
 8005de2:	6028      	str	r0, [r5, #0]
 8005de4:	6128      	str	r0, [r5, #16]
 8005de6:	b920      	cbnz	r0, 8005df2 <_svfiprintf_r+0x2e>
 8005de8:	230c      	movs	r3, #12
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	e0d1      	b.n	8005f96 <_svfiprintf_r+0x1d2>
 8005df2:	2340      	movs	r3, #64	; 0x40
 8005df4:	616b      	str	r3, [r5, #20]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e04:	2330      	movs	r3, #48	; 0x30
 8005e06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fb0 <_svfiprintf_r+0x1ec>
 8005e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e0e:	f04f 0901 	mov.w	r9, #1
 8005e12:	4623      	mov	r3, r4
 8005e14:	469a      	mov	sl, r3
 8005e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1a:	b10a      	cbz	r2, 8005e20 <_svfiprintf_r+0x5c>
 8005e1c:	2a25      	cmp	r2, #37	; 0x25
 8005e1e:	d1f9      	bne.n	8005e14 <_svfiprintf_r+0x50>
 8005e20:	ebba 0b04 	subs.w	fp, sl, r4
 8005e24:	d00b      	beq.n	8005e3e <_svfiprintf_r+0x7a>
 8005e26:	465b      	mov	r3, fp
 8005e28:	4622      	mov	r2, r4
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff ff6d 	bl	8005d0c <__ssputs_r>
 8005e32:	3001      	adds	r0, #1
 8005e34:	f000 80aa 	beq.w	8005f8c <_svfiprintf_r+0x1c8>
 8005e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e3a:	445a      	add	r2, fp
 8005e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80a2 	beq.w	8005f8c <_svfiprintf_r+0x1c8>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e52:	f10a 0a01 	add.w	sl, sl, #1
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e60:	4654      	mov	r4, sl
 8005e62:	2205      	movs	r2, #5
 8005e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e68:	4851      	ldr	r0, [pc, #324]	; (8005fb0 <_svfiprintf_r+0x1ec>)
 8005e6a:	f7fa f9b9 	bl	80001e0 <memchr>
 8005e6e:	9a04      	ldr	r2, [sp, #16]
 8005e70:	b9d8      	cbnz	r0, 8005eaa <_svfiprintf_r+0xe6>
 8005e72:	06d0      	lsls	r0, r2, #27
 8005e74:	bf44      	itt	mi
 8005e76:	2320      	movmi	r3, #32
 8005e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7c:	0711      	lsls	r1, r2, #28
 8005e7e:	bf44      	itt	mi
 8005e80:	232b      	movmi	r3, #43	; 0x2b
 8005e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e86:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8c:	d015      	beq.n	8005eba <_svfiprintf_r+0xf6>
 8005e8e:	9a07      	ldr	r2, [sp, #28]
 8005e90:	4654      	mov	r4, sl
 8005e92:	2000      	movs	r0, #0
 8005e94:	f04f 0c0a 	mov.w	ip, #10
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9e:	3b30      	subs	r3, #48	; 0x30
 8005ea0:	2b09      	cmp	r3, #9
 8005ea2:	d94e      	bls.n	8005f42 <_svfiprintf_r+0x17e>
 8005ea4:	b1b0      	cbz	r0, 8005ed4 <_svfiprintf_r+0x110>
 8005ea6:	9207      	str	r2, [sp, #28]
 8005ea8:	e014      	b.n	8005ed4 <_svfiprintf_r+0x110>
 8005eaa:	eba0 0308 	sub.w	r3, r0, r8
 8005eae:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	46a2      	mov	sl, r4
 8005eb8:	e7d2      	b.n	8005e60 <_svfiprintf_r+0x9c>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	1d19      	adds	r1, r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	9103      	str	r1, [sp, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfbb      	ittet	lt
 8005ec6:	425b      	neglt	r3, r3
 8005ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ecc:	9307      	strge	r3, [sp, #28]
 8005ece:	9307      	strlt	r3, [sp, #28]
 8005ed0:	bfb8      	it	lt
 8005ed2:	9204      	strlt	r2, [sp, #16]
 8005ed4:	7823      	ldrb	r3, [r4, #0]
 8005ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ed8:	d10c      	bne.n	8005ef4 <_svfiprintf_r+0x130>
 8005eda:	7863      	ldrb	r3, [r4, #1]
 8005edc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ede:	d135      	bne.n	8005f4c <_svfiprintf_r+0x188>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	9203      	str	r2, [sp, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bfb8      	it	lt
 8005eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ef0:	3402      	adds	r4, #2
 8005ef2:	9305      	str	r3, [sp, #20]
 8005ef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fc0 <_svfiprintf_r+0x1fc>
 8005ef8:	7821      	ldrb	r1, [r4, #0]
 8005efa:	2203      	movs	r2, #3
 8005efc:	4650      	mov	r0, sl
 8005efe:	f7fa f96f 	bl	80001e0 <memchr>
 8005f02:	b140      	cbz	r0, 8005f16 <_svfiprintf_r+0x152>
 8005f04:	2340      	movs	r3, #64	; 0x40
 8005f06:	eba0 000a 	sub.w	r0, r0, sl
 8005f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	4303      	orrs	r3, r0
 8005f12:	3401      	adds	r4, #1
 8005f14:	9304      	str	r3, [sp, #16]
 8005f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1a:	4826      	ldr	r0, [pc, #152]	; (8005fb4 <_svfiprintf_r+0x1f0>)
 8005f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f20:	2206      	movs	r2, #6
 8005f22:	f7fa f95d 	bl	80001e0 <memchr>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d038      	beq.n	8005f9c <_svfiprintf_r+0x1d8>
 8005f2a:	4b23      	ldr	r3, [pc, #140]	; (8005fb8 <_svfiprintf_r+0x1f4>)
 8005f2c:	bb1b      	cbnz	r3, 8005f76 <_svfiprintf_r+0x1b2>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	3307      	adds	r3, #7
 8005f32:	f023 0307 	bic.w	r3, r3, #7
 8005f36:	3308      	adds	r3, #8
 8005f38:	9303      	str	r3, [sp, #12]
 8005f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3c:	4433      	add	r3, r6
 8005f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f40:	e767      	b.n	8005e12 <_svfiprintf_r+0x4e>
 8005f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f46:	460c      	mov	r4, r1
 8005f48:	2001      	movs	r0, #1
 8005f4a:	e7a5      	b.n	8005e98 <_svfiprintf_r+0xd4>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	3401      	adds	r4, #1
 8005f50:	9305      	str	r3, [sp, #20]
 8005f52:	4619      	mov	r1, r3
 8005f54:	f04f 0c0a 	mov.w	ip, #10
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f5e:	3a30      	subs	r2, #48	; 0x30
 8005f60:	2a09      	cmp	r2, #9
 8005f62:	d903      	bls.n	8005f6c <_svfiprintf_r+0x1a8>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0c5      	beq.n	8005ef4 <_svfiprintf_r+0x130>
 8005f68:	9105      	str	r1, [sp, #20]
 8005f6a:	e7c3      	b.n	8005ef4 <_svfiprintf_r+0x130>
 8005f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f70:	4604      	mov	r4, r0
 8005f72:	2301      	movs	r3, #1
 8005f74:	e7f0      	b.n	8005f58 <_svfiprintf_r+0x194>
 8005f76:	ab03      	add	r3, sp, #12
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	462a      	mov	r2, r5
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <_svfiprintf_r+0x1f8>)
 8005f7e:	a904      	add	r1, sp, #16
 8005f80:	4638      	mov	r0, r7
 8005f82:	f3af 8000 	nop.w
 8005f86:	1c42      	adds	r2, r0, #1
 8005f88:	4606      	mov	r6, r0
 8005f8a:	d1d6      	bne.n	8005f3a <_svfiprintf_r+0x176>
 8005f8c:	89ab      	ldrh	r3, [r5, #12]
 8005f8e:	065b      	lsls	r3, r3, #25
 8005f90:	f53f af2c 	bmi.w	8005dec <_svfiprintf_r+0x28>
 8005f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f96:	b01d      	add	sp, #116	; 0x74
 8005f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <_svfiprintf_r+0x1f8>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f000 f87a 	bl	80060a0 <_printf_i>
 8005fac:	e7eb      	b.n	8005f86 <_svfiprintf_r+0x1c2>
 8005fae:	bf00      	nop
 8005fb0:	0800647c 	.word	0x0800647c
 8005fb4:	08006486 	.word	0x08006486
 8005fb8:	00000000 	.word	0x00000000
 8005fbc:	08005d0d 	.word	0x08005d0d
 8005fc0:	08006482 	.word	0x08006482

08005fc4 <_printf_common>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	4616      	mov	r6, r2
 8005fca:	4699      	mov	r9, r3
 8005fcc:	688a      	ldr	r2, [r1, #8]
 8005fce:	690b      	ldr	r3, [r1, #16]
 8005fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	bfb8      	it	lt
 8005fd8:	4613      	movlt	r3, r2
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	b10a      	cbz	r2, 8005fea <_printf_common+0x26>
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	0699      	lsls	r1, r3, #26
 8005fee:	bf42      	ittt	mi
 8005ff0:	6833      	ldrmi	r3, [r6, #0]
 8005ff2:	3302      	addmi	r3, #2
 8005ff4:	6033      	strmi	r3, [r6, #0]
 8005ff6:	6825      	ldr	r5, [r4, #0]
 8005ff8:	f015 0506 	ands.w	r5, r5, #6
 8005ffc:	d106      	bne.n	800600c <_printf_common+0x48>
 8005ffe:	f104 0a19 	add.w	sl, r4, #25
 8006002:	68e3      	ldr	r3, [r4, #12]
 8006004:	6832      	ldr	r2, [r6, #0]
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	42ab      	cmp	r3, r5
 800600a:	dc26      	bgt.n	800605a <_printf_common+0x96>
 800600c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006010:	1e13      	subs	r3, r2, #0
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	bf18      	it	ne
 8006016:	2301      	movne	r3, #1
 8006018:	0692      	lsls	r2, r2, #26
 800601a:	d42b      	bmi.n	8006074 <_printf_common+0xb0>
 800601c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006020:	4649      	mov	r1, r9
 8006022:	4638      	mov	r0, r7
 8006024:	47c0      	blx	r8
 8006026:	3001      	adds	r0, #1
 8006028:	d01e      	beq.n	8006068 <_printf_common+0xa4>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	68e5      	ldr	r5, [r4, #12]
 800602e:	6832      	ldr	r2, [r6, #0]
 8006030:	f003 0306 	and.w	r3, r3, #6
 8006034:	2b04      	cmp	r3, #4
 8006036:	bf08      	it	eq
 8006038:	1aad      	subeq	r5, r5, r2
 800603a:	68a3      	ldr	r3, [r4, #8]
 800603c:	6922      	ldr	r2, [r4, #16]
 800603e:	bf0c      	ite	eq
 8006040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006044:	2500      	movne	r5, #0
 8006046:	4293      	cmp	r3, r2
 8006048:	bfc4      	itt	gt
 800604a:	1a9b      	subgt	r3, r3, r2
 800604c:	18ed      	addgt	r5, r5, r3
 800604e:	2600      	movs	r6, #0
 8006050:	341a      	adds	r4, #26
 8006052:	42b5      	cmp	r5, r6
 8006054:	d11a      	bne.n	800608c <_printf_common+0xc8>
 8006056:	2000      	movs	r0, #0
 8006058:	e008      	b.n	800606c <_printf_common+0xa8>
 800605a:	2301      	movs	r3, #1
 800605c:	4652      	mov	r2, sl
 800605e:	4649      	mov	r1, r9
 8006060:	4638      	mov	r0, r7
 8006062:	47c0      	blx	r8
 8006064:	3001      	adds	r0, #1
 8006066:	d103      	bne.n	8006070 <_printf_common+0xac>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006070:	3501      	adds	r5, #1
 8006072:	e7c6      	b.n	8006002 <_printf_common+0x3e>
 8006074:	18e1      	adds	r1, r4, r3
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	2030      	movs	r0, #48	; 0x30
 800607a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800607e:	4422      	add	r2, r4
 8006080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006088:	3302      	adds	r3, #2
 800608a:	e7c7      	b.n	800601c <_printf_common+0x58>
 800608c:	2301      	movs	r3, #1
 800608e:	4622      	mov	r2, r4
 8006090:	4649      	mov	r1, r9
 8006092:	4638      	mov	r0, r7
 8006094:	47c0      	blx	r8
 8006096:	3001      	adds	r0, #1
 8006098:	d0e6      	beq.n	8006068 <_printf_common+0xa4>
 800609a:	3601      	adds	r6, #1
 800609c:	e7d9      	b.n	8006052 <_printf_common+0x8e>
	...

080060a0 <_printf_i>:
 80060a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a4:	7e0f      	ldrb	r7, [r1, #24]
 80060a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060a8:	2f78      	cmp	r7, #120	; 0x78
 80060aa:	4691      	mov	r9, r2
 80060ac:	4680      	mov	r8, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	469a      	mov	sl, r3
 80060b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060b6:	d807      	bhi.n	80060c8 <_printf_i+0x28>
 80060b8:	2f62      	cmp	r7, #98	; 0x62
 80060ba:	d80a      	bhi.n	80060d2 <_printf_i+0x32>
 80060bc:	2f00      	cmp	r7, #0
 80060be:	f000 80d8 	beq.w	8006272 <_printf_i+0x1d2>
 80060c2:	2f58      	cmp	r7, #88	; 0x58
 80060c4:	f000 80a3 	beq.w	800620e <_printf_i+0x16e>
 80060c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d0:	e03a      	b.n	8006148 <_printf_i+0xa8>
 80060d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060d6:	2b15      	cmp	r3, #21
 80060d8:	d8f6      	bhi.n	80060c8 <_printf_i+0x28>
 80060da:	a101      	add	r1, pc, #4	; (adr r1, 80060e0 <_printf_i+0x40>)
 80060dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e0:	08006139 	.word	0x08006139
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	080060c9 	.word	0x080060c9
 80060ec:	080060c9 	.word	0x080060c9
 80060f0:	080060c9 	.word	0x080060c9
 80060f4:	080060c9 	.word	0x080060c9
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	080060c9 	.word	0x080060c9
 8006100:	080060c9 	.word	0x080060c9
 8006104:	080060c9 	.word	0x080060c9
 8006108:	080060c9 	.word	0x080060c9
 800610c:	08006259 	.word	0x08006259
 8006110:	0800617d 	.word	0x0800617d
 8006114:	0800623b 	.word	0x0800623b
 8006118:	080060c9 	.word	0x080060c9
 800611c:	080060c9 	.word	0x080060c9
 8006120:	0800627b 	.word	0x0800627b
 8006124:	080060c9 	.word	0x080060c9
 8006128:	0800617d 	.word	0x0800617d
 800612c:	080060c9 	.word	0x080060c9
 8006130:	080060c9 	.word	0x080060c9
 8006134:	08006243 	.word	0x08006243
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	1d1a      	adds	r2, r3, #4
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	602a      	str	r2, [r5, #0]
 8006140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006148:	2301      	movs	r3, #1
 800614a:	e0a3      	b.n	8006294 <_printf_i+0x1f4>
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	6829      	ldr	r1, [r5, #0]
 8006150:	0606      	lsls	r6, r0, #24
 8006152:	f101 0304 	add.w	r3, r1, #4
 8006156:	d50a      	bpl.n	800616e <_printf_i+0xce>
 8006158:	680e      	ldr	r6, [r1, #0]
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	2e00      	cmp	r6, #0
 800615e:	da03      	bge.n	8006168 <_printf_i+0xc8>
 8006160:	232d      	movs	r3, #45	; 0x2d
 8006162:	4276      	negs	r6, r6
 8006164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006168:	485e      	ldr	r0, [pc, #376]	; (80062e4 <_printf_i+0x244>)
 800616a:	230a      	movs	r3, #10
 800616c:	e019      	b.n	80061a2 <_printf_i+0x102>
 800616e:	680e      	ldr	r6, [r1, #0]
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006176:	bf18      	it	ne
 8006178:	b236      	sxthne	r6, r6
 800617a:	e7ef      	b.n	800615c <_printf_i+0xbc>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	1d19      	adds	r1, r3, #4
 8006182:	6029      	str	r1, [r5, #0]
 8006184:	0601      	lsls	r1, r0, #24
 8006186:	d501      	bpl.n	800618c <_printf_i+0xec>
 8006188:	681e      	ldr	r6, [r3, #0]
 800618a:	e002      	b.n	8006192 <_printf_i+0xf2>
 800618c:	0646      	lsls	r6, r0, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0xe8>
 8006190:	881e      	ldrh	r6, [r3, #0]
 8006192:	4854      	ldr	r0, [pc, #336]	; (80062e4 <_printf_i+0x244>)
 8006194:	2f6f      	cmp	r7, #111	; 0x6f
 8006196:	bf0c      	ite	eq
 8006198:	2308      	moveq	r3, #8
 800619a:	230a      	movne	r3, #10
 800619c:	2100      	movs	r1, #0
 800619e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061a2:	6865      	ldr	r5, [r4, #4]
 80061a4:	60a5      	str	r5, [r4, #8]
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	bfa2      	ittt	ge
 80061aa:	6821      	ldrge	r1, [r4, #0]
 80061ac:	f021 0104 	bicge.w	r1, r1, #4
 80061b0:	6021      	strge	r1, [r4, #0]
 80061b2:	b90e      	cbnz	r6, 80061b8 <_printf_i+0x118>
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	d04d      	beq.n	8006254 <_printf_i+0x1b4>
 80061b8:	4615      	mov	r5, r2
 80061ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80061be:	fb03 6711 	mls	r7, r3, r1, r6
 80061c2:	5dc7      	ldrb	r7, [r0, r7]
 80061c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061c8:	4637      	mov	r7, r6
 80061ca:	42bb      	cmp	r3, r7
 80061cc:	460e      	mov	r6, r1
 80061ce:	d9f4      	bls.n	80061ba <_printf_i+0x11a>
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d10b      	bne.n	80061ec <_printf_i+0x14c>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	07de      	lsls	r6, r3, #31
 80061d8:	d508      	bpl.n	80061ec <_printf_i+0x14c>
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	6861      	ldr	r1, [r4, #4]
 80061de:	4299      	cmp	r1, r3
 80061e0:	bfde      	ittt	le
 80061e2:	2330      	movle	r3, #48	; 0x30
 80061e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061ec:	1b52      	subs	r2, r2, r5
 80061ee:	6122      	str	r2, [r4, #16]
 80061f0:	f8cd a000 	str.w	sl, [sp]
 80061f4:	464b      	mov	r3, r9
 80061f6:	aa03      	add	r2, sp, #12
 80061f8:	4621      	mov	r1, r4
 80061fa:	4640      	mov	r0, r8
 80061fc:	f7ff fee2 	bl	8005fc4 <_printf_common>
 8006200:	3001      	adds	r0, #1
 8006202:	d14c      	bne.n	800629e <_printf_i+0x1fe>
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	b004      	add	sp, #16
 800620a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620e:	4835      	ldr	r0, [pc, #212]	; (80062e4 <_printf_i+0x244>)
 8006210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006214:	6829      	ldr	r1, [r5, #0]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	f851 6b04 	ldr.w	r6, [r1], #4
 800621c:	6029      	str	r1, [r5, #0]
 800621e:	061d      	lsls	r5, r3, #24
 8006220:	d514      	bpl.n	800624c <_printf_i+0x1ac>
 8006222:	07df      	lsls	r7, r3, #31
 8006224:	bf44      	itt	mi
 8006226:	f043 0320 	orrmi.w	r3, r3, #32
 800622a:	6023      	strmi	r3, [r4, #0]
 800622c:	b91e      	cbnz	r6, 8006236 <_printf_i+0x196>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f023 0320 	bic.w	r3, r3, #32
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	2310      	movs	r3, #16
 8006238:	e7b0      	b.n	800619c <_printf_i+0xfc>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f043 0320 	orr.w	r3, r3, #32
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	2378      	movs	r3, #120	; 0x78
 8006244:	4828      	ldr	r0, [pc, #160]	; (80062e8 <_printf_i+0x248>)
 8006246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800624a:	e7e3      	b.n	8006214 <_printf_i+0x174>
 800624c:	0659      	lsls	r1, r3, #25
 800624e:	bf48      	it	mi
 8006250:	b2b6      	uxthmi	r6, r6
 8006252:	e7e6      	b.n	8006222 <_printf_i+0x182>
 8006254:	4615      	mov	r5, r2
 8006256:	e7bb      	b.n	80061d0 <_printf_i+0x130>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	6826      	ldr	r6, [r4, #0]
 800625c:	6961      	ldr	r1, [r4, #20]
 800625e:	1d18      	adds	r0, r3, #4
 8006260:	6028      	str	r0, [r5, #0]
 8006262:	0635      	lsls	r5, r6, #24
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	d501      	bpl.n	800626c <_printf_i+0x1cc>
 8006268:	6019      	str	r1, [r3, #0]
 800626a:	e002      	b.n	8006272 <_printf_i+0x1d2>
 800626c:	0670      	lsls	r0, r6, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0x1c8>
 8006270:	8019      	strh	r1, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	4615      	mov	r5, r2
 8006278:	e7ba      	b.n	80061f0 <_printf_i+0x150>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	602a      	str	r2, [r5, #0]
 8006280:	681d      	ldr	r5, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	4628      	mov	r0, r5
 8006288:	f7f9 ffaa 	bl	80001e0 <memchr>
 800628c:	b108      	cbz	r0, 8006292 <_printf_i+0x1f2>
 800628e:	1b40      	subs	r0, r0, r5
 8006290:	6060      	str	r0, [r4, #4]
 8006292:	6863      	ldr	r3, [r4, #4]
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629c:	e7a8      	b.n	80061f0 <_printf_i+0x150>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	462a      	mov	r2, r5
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d0ab      	beq.n	8006204 <_printf_i+0x164>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d413      	bmi.n	80062da <_printf_i+0x23a>
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	4298      	cmp	r0, r3
 80062b8:	bfb8      	it	lt
 80062ba:	4618      	movlt	r0, r3
 80062bc:	e7a4      	b.n	8006208 <_printf_i+0x168>
 80062be:	2301      	movs	r3, #1
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	47d0      	blx	sl
 80062c8:	3001      	adds	r0, #1
 80062ca:	d09b      	beq.n	8006204 <_printf_i+0x164>
 80062cc:	3501      	adds	r5, #1
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	9903      	ldr	r1, [sp, #12]
 80062d2:	1a5b      	subs	r3, r3, r1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dcf2      	bgt.n	80062be <_printf_i+0x21e>
 80062d8:	e7eb      	b.n	80062b2 <_printf_i+0x212>
 80062da:	2500      	movs	r5, #0
 80062dc:	f104 0619 	add.w	r6, r4, #25
 80062e0:	e7f5      	b.n	80062ce <_printf_i+0x22e>
 80062e2:	bf00      	nop
 80062e4:	0800648d 	.word	0x0800648d
 80062e8:	0800649e 	.word	0x0800649e

080062ec <memmove>:
 80062ec:	4288      	cmp	r0, r1
 80062ee:	b510      	push	{r4, lr}
 80062f0:	eb01 0402 	add.w	r4, r1, r2
 80062f4:	d902      	bls.n	80062fc <memmove+0x10>
 80062f6:	4284      	cmp	r4, r0
 80062f8:	4623      	mov	r3, r4
 80062fa:	d807      	bhi.n	800630c <memmove+0x20>
 80062fc:	1e43      	subs	r3, r0, #1
 80062fe:	42a1      	cmp	r1, r4
 8006300:	d008      	beq.n	8006314 <memmove+0x28>
 8006302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800630a:	e7f8      	b.n	80062fe <memmove+0x12>
 800630c:	4402      	add	r2, r0
 800630e:	4601      	mov	r1, r0
 8006310:	428a      	cmp	r2, r1
 8006312:	d100      	bne.n	8006316 <memmove+0x2a>
 8006314:	bd10      	pop	{r4, pc}
 8006316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800631a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800631e:	e7f7      	b.n	8006310 <memmove+0x24>

08006320 <_realloc_r>:
 8006320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	4680      	mov	r8, r0
 8006326:	4614      	mov	r4, r2
 8006328:	460e      	mov	r6, r1
 800632a:	b921      	cbnz	r1, 8006336 <_realloc_r+0x16>
 800632c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006330:	4611      	mov	r1, r2
 8006332:	f7ff bb85 	b.w	8005a40 <_malloc_r>
 8006336:	b92a      	cbnz	r2, 8006344 <_realloc_r+0x24>
 8006338:	f7ff fc9c 	bl	8005c74 <_free_r>
 800633c:	4625      	mov	r5, r4
 800633e:	4628      	mov	r0, r5
 8006340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006344:	f000 f81b 	bl	800637e <_malloc_usable_size_r>
 8006348:	4284      	cmp	r4, r0
 800634a:	4607      	mov	r7, r0
 800634c:	d802      	bhi.n	8006354 <_realloc_r+0x34>
 800634e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006352:	d812      	bhi.n	800637a <_realloc_r+0x5a>
 8006354:	4621      	mov	r1, r4
 8006356:	4640      	mov	r0, r8
 8006358:	f7ff fb72 	bl	8005a40 <_malloc_r>
 800635c:	4605      	mov	r5, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	d0ed      	beq.n	800633e <_realloc_r+0x1e>
 8006362:	42bc      	cmp	r4, r7
 8006364:	4622      	mov	r2, r4
 8006366:	4631      	mov	r1, r6
 8006368:	bf28      	it	cs
 800636a:	463a      	movcs	r2, r7
 800636c:	f7ff fb32 	bl	80059d4 <memcpy>
 8006370:	4631      	mov	r1, r6
 8006372:	4640      	mov	r0, r8
 8006374:	f7ff fc7e 	bl	8005c74 <_free_r>
 8006378:	e7e1      	b.n	800633e <_realloc_r+0x1e>
 800637a:	4635      	mov	r5, r6
 800637c:	e7df      	b.n	800633e <_realloc_r+0x1e>

0800637e <_malloc_usable_size_r>:
 800637e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006382:	1f18      	subs	r0, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	bfbc      	itt	lt
 8006388:	580b      	ldrlt	r3, [r1, r0]
 800638a:	18c0      	addlt	r0, r0, r3
 800638c:	4770      	bx	lr
	...

08006390 <_init>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr

0800639c <_fini>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	bf00      	nop
 80063a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a2:	bc08      	pop	{r3}
 80063a4:	469e      	mov	lr, r3
 80063a6:	4770      	bx	lr
