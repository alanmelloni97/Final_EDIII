
FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e90  08006e90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e98  08006e98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c8  20000074  08006f14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000423c  08006f14  0002423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016089  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0a  00000000  00000000  0003612d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00039038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cd6  00000000  00000000  0003b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f5f  00000000  00000000  00052fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ad2  00000000  00000000  00067f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd9d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f88  00000000  00000000  000fda28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d70 	.word	0x08006d70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006d70 	.word	0x08006d70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fe57 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f879 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f9d7 	bl	8000988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f9ab 	bl	8000934 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005de:	f000 f8df 	bl	80007a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e2:	f000 f94d 	bl	8000880 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Timer que captura el ECHO del sensor
 80005e6:	2100      	movs	r1, #0
 80005e8:	482b      	ldr	r0, [pc, #172]	; (8000698 <main+0xd0>)
 80005ea:	f002 f813 	bl	8002614 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		//Timer que genera la señal sonora
 80005ee:	2100      	movs	r1, #0
 80005f0:	482a      	ldr	r0, [pc, #168]	; (800069c <main+0xd4>)
 80005f2:	f001 ff05 	bl	8002400 <HAL_TIM_PWM_Start>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  semaforo1=xSemaphoreCreateBinary();
 80005f6:	2203      	movs	r2, #3
 80005f8:	2100      	movs	r1, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	f003 fe6a 	bl	80042d4 <xQueueGenericCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <main+0xd8>)
 8000604:	6013      	str	r3, [r2, #0]
  semaforo2=xSemaphoreCreateBinary();
 8000606:	2203      	movs	r2, #3
 8000608:	2100      	movs	r1, #0
 800060a:	2001      	movs	r0, #1
 800060c:	f003 fe62 	bl	80042d4 <xQueueGenericCreate>
 8000610:	4603      	mov	r3, r0
 8000612:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <main+0xdc>)
 8000614:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(semaforo1);
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <main+0xd8>)
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	f003 feb2 	bl	8004388 <xQueueGenericSend>
  xSemaphoreGive(semaforo2);
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <main+0xdc>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	f003 feab 	bl	8004388 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <main+0xe0>)
 8000634:	1d3c      	adds	r4, r7, #4
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fcda 	bl	8004002 <osThreadCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0xe4>)
 8000652:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((void*) TrigSensor, "trigger", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 8000654:	2300      	movs	r3, #0
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	2301      	movs	r3, #1
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	4913      	ldr	r1, [pc, #76]	; (80006b0 <main+0xe8>)
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <main+0xec>)
 8000664:	f004 fa87 	bl	8004b76 <xTaskCreate>
  xTaskCreate((void*) FiltroDistancia, "filtro", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 8000668:	2300      	movs	r3, #0
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	4910      	ldr	r1, [pc, #64]	; (80006b8 <main+0xf0>)
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0xf4>)
 8000678:	f004 fa7d 	bl	8004b76 <xTaskCreate>
  xTaskCreate((void*) generacionPWM, "PWM", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+0, NULL);
 800067c:	2300      	movs	r3, #0
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	490d      	ldr	r1, [pc, #52]	; (80006c0 <main+0xf8>)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <main+0xfc>)
 800068c:	f004 fa73 	bl	8004b76 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f003 fcb0 	bl	8003ff4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0xcc>
 8000696:	bf00      	nop
 8000698:	20000344 	.word	0x20000344
 800069c:	2000038c 	.word	0x2000038c
 80006a0:	2000041c 	.word	0x2000041c
 80006a4:	20000420 	.word	0x20000420
 80006a8:	08006da8 	.word	0x08006da8
 80006ac:	20000418 	.word	0x20000418
 80006b0:	08006d94 	.word	0x08006d94
 80006b4:	08000b85 	.word	0x08000b85
 80006b8:	08006d9c 	.word	0x08006d9c
 80006bc:	08000bb5 	.word	0x08000bb5
 80006c0:	08006da4 	.word	0x08006da4
 80006c4:	08000cd1 	.word	0x08000cd1

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 fe7a 	bl	80063d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f888 	bl	8001868 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 fb6f 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 faea 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 fb59 	bl	8000e40 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_TIM2_Init+0xdc>)
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_TIM2_Init+0xdc>)
 80007d4:	2253      	movs	r2, #83	; 0x53
 80007d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_TIM2_Init+0xdc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_TIM2_Init+0xdc>)
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_TIM2_Init+0xdc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_TIM2_Init+0xdc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <MX_TIM2_Init+0xdc>)
 80007f4:	f001 fd02 	bl	80021fc <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007fe:	f000 fb1f 	bl	8000e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	4619      	mov	r1, r3
 800080e:	481b      	ldr	r0, [pc, #108]	; (800087c <MX_TIM2_Init+0xdc>)
 8000810:	f002 fa80 	bl	8002d14 <HAL_TIM_ConfigClockSource>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800081a:	f000 fb11 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <MX_TIM2_Init+0xdc>)
 8000820:	f001 fe9e 	bl	8002560 <HAL_TIM_IC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800082a:	f000 fb09 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <MX_TIM2_Init+0xdc>)
 800083e:	f002 ff7d 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000848:	f000 fafa 	bl	8000e40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_TIM2_Init+0xdc>)
 8000864:	f002 f8f8 	bl	8002a58 <HAL_TIM_IC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800086e:	f000 fae7 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000344 	.word	0x20000344

08000880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_TIM3_Init+0xac>)
 80008a4:	4a22      	ldr	r2, [pc, #136]	; (8000930 <MX_TIM3_Init+0xb0>)
 80008a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_TIM3_Init+0xac>)
 80008aa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80008ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_TIM3_Init+0xac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_TIM3_Init+0xac>)
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_TIM3_Init+0xac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_TIM3_Init+0xac>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <MX_TIM3_Init+0xac>)
 80008ca:	f001 fd49 	bl	8002360 <HAL_TIM_PWM_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 fab4 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4619      	mov	r1, r3
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <MX_TIM3_Init+0xac>)
 80008e8:	f002 ff28 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008f2:	f000 faa5 	bl	8000e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f6:	2360      	movs	r3, #96	; 0x60
 80008f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80008fa:	2332      	movs	r3, #50	; 0x32
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_TIM3_Init+0xac>)
 800090e:	f002 f93f 	bl	8002b90 <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000918:	f000 fa92 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <MX_TIM3_Init+0xac>)
 800091e:	f000 fb31 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000038c 	.word	0x2000038c
 8000930:	40000400 	.word	0x40000400

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f002 ff68 	bl	8003840 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 fa63 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200003d4 	.word	0x200003d4
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_GPIO_Init+0xe0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2121      	movs	r1, #33	; 0x21
 8000a12:	4816      	ldr	r0, [pc, #88]	; (8000a6c <MX_GPIO_Init+0xe4>)
 8000a14:	f000 fedc 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_GPIO_Init+0xe8>)
 8000a30:	f000 fd4a 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|LD2_Pin;
 8000a34:	2321      	movs	r3, #33	; 0x21
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_GPIO_Init+0xe4>)
 8000a4c:	f000 fd3c 	bl	80014c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2105      	movs	r1, #5
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f000 fd0d 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5a:	2028      	movs	r0, #40	; 0x28
 8000a5c:	f000 fd26 	bl	80014ac <HAL_NVIC_EnableIRQ>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020800 	.word	0x40020800

08000a74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000a82:	f000 febe 	bl	8001802 <HAL_GPIO_TogglePin>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_TIM_IC_CaptureCallback>:
int velocidadSonido=343;

uint32_t uartBufferLen=0;
char uart_buf [50];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	if(flancoAscendenteCapturado==0){
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d11b      	bne.n	8000adc <HAL_TIM_IC_CaptureCallback+0x48>
		valorInicial=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f002 f9fc 	bl	8002ea4 <HAL_TIM_ReadCapturedValue>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ab2:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=1;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a1a      	ldr	r2, [r3, #32]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 020a 	bic.w	r2, r2, #10
 8000ac8:	621a      	str	r2, [r3, #32]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6a1a      	ldr	r2, [r3, #32]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f042 0202 	orr.w	r2, r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
		else if (valorFinal <= valorInicial)
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorFinal+valorInicial;
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);

	}
}
 8000ada:	e042      	b.n	8000b62 <HAL_TIM_IC_CaptureCallback+0xce>
	else if(flancoAscendenteCapturado==1){
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d13e      	bne.n	8000b62 <HAL_TIM_IC_CaptureCallback+0xce>
		valorFinal=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f002 f9dc 	bl	8002ea4 <HAL_TIM_ReadCapturedValue>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000af2:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=0;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6a1a      	ldr	r2, [r3, #32]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 020a 	bic.w	r2, r2, #10
 8000b08:	621a      	str	r2, [r3, #32]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6a12      	ldr	r2, [r2, #32]
 8000b14:	621a      	str	r2, [r3, #32]
		if(valorFinal>valorInicial)
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dd07      	ble.n	8000b32 <HAL_TIM_IC_CaptureCallback+0x9e>
			pulso=valorFinal-valorInicial;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e011      	b.n	8000b56 <HAL_TIM_IC_CaptureCallback+0xc2>
		else if (valorFinal <= valorInicial)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dc0b      	bgt.n	8000b56 <HAL_TIM_IC_CaptureCallback+0xc2>
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorFinal+valorInicial;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000b54:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fd11 	bl	8004584 <xQueueGiveFromISR>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000424 	.word	0x20000424
 8000b70:	20000428 	.word	0x20000428
 8000b74:	2000042c 	.word	0x2000042c
 8000b78:	20000430 	.word	0x20000430
 8000b7c:	20000344 	.word	0x20000344
 8000b80:	2000041c 	.word	0x2000041c

08000b84 <TrigSensor>:


void TrigSensor(void const * argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <TrigSensor+0x2c>)
 8000b92:	f000 fe1d 	bl	80017d0 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f004 f93a 	bl	8004e10 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <TrigSensor+0x2c>)
 8000ba2:	f000 fe15 	bl	80017d0 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f004 f932 	bl	8004e10 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000bac:	e7ee      	b.n	8000b8c <TrigSensor+0x8>
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <FiltroDistancia>:

float muestras[TAM_FILTRO]={0};
int pos=0;
int distancia;
void FiltroDistancia(void const * argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	int i;

  /* Infinite loop */
  while(1)
  {
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000bbc:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <FiltroDistancia+0xe4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fd6b 	bl	80046a0 <xQueueSemaphoreTake>

	  muestras[pos]=(float) pulso*343*100/(2*1000000);
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <FiltroDistancia+0xe8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000ca0 <FiltroDistancia+0xec>
 8000bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bde:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000ca4 <FiltroDistancia+0xf0>
 8000be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000cac <FiltroDistancia+0xf8>
 8000bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <FiltroDistancia+0xfc>)
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	edc3 7a00 	vstr	s15, [r3]
	  pos++;
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a29      	ldr	r2, [pc, #164]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000c04:	6013      	str	r3, [r2, #0]
	  if(pos==TAM_FILTRO){
 8000c06:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	d1d6      	bne.n	8000bbc <FiltroDistancia+0x8>
		  pos=0;
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
		  for(i = 0; i < TAM_FILTRO; i++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	e00e      	b.n	8000c38 <FiltroDistancia+0x84>
		      suma = suma + muestras[i];
 8000c1a:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <FiltroDistancia+0xfc>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	edd3 7a00 	vldr	s15, [r3]
 8000c26:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2e:	edc7 7a03 	vstr	s15, [r7, #12]
		  for(i = 0; i < TAM_FILTRO; i++)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	dded      	ble.n	8000c1a <FiltroDistancia+0x66>
		  distancia=(int) suma/TAM_FILTRO;
 8000c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c46:	ee17 1a90 	vmov	r1, s15
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <FiltroDistancia+0x100>)
 8000c4c:	fb83 2301 	smull	r2, r3, r3, r1
 8000c50:	105a      	asrs	r2, r3, #1
 8000c52:	17cb      	asrs	r3, r1, #31
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <FiltroDistancia+0x104>)
 8000c58:	6013      	str	r3, [r2, #0]
		  suma=0;
 8000c5a:	f04f 0300 	mov.w	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
		  uartBufferLen=sprintf(uart_buf,"%u Cm \r\n",distancia);
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <FiltroDistancia+0x104>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4915      	ldr	r1, [pc, #84]	; (8000cbc <FiltroDistancia+0x108>)
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <FiltroDistancia+0x10c>)
 8000c6a:	f005 fcc7 	bl	80065fc <siprintf>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <FiltroDistancia+0x110>)
 8000c74:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <FiltroDistancia+0x110>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	490f      	ldr	r1, [pc, #60]	; (8000cc0 <FiltroDistancia+0x10c>)
 8000c82:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <FiltroDistancia+0x114>)
 8000c84:	f002 fe29 	bl	80038da <HAL_UART_Transmit>
		  xSemaphoreGive(semaforo2);
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <FiltroDistancia+0x118>)
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	f003 fb79 	bl	8004388 <xQueueGenericSend>
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000c96:	e791      	b.n	8000bbc <FiltroDistancia+0x8>
 8000c98:	2000041c 	.word	0x2000041c
 8000c9c:	20000430 	.word	0x20000430
 8000ca0:	43ab8000 	.word	0x43ab8000
 8000ca4:	42c80000 	.word	0x42c80000
 8000ca8:	20000480 	.word	0x20000480
 8000cac:	49f42400 	.word	0x49f42400
 8000cb0:	2000046c 	.word	0x2000046c
 8000cb4:	66666667 	.word	0x66666667
 8000cb8:	20000484 	.word	0x20000484
 8000cbc:	08006dc4 	.word	0x08006dc4
 8000cc0:	20000438 	.word	0x20000438
 8000cc4:	20000434 	.word	0x20000434
 8000cc8:	200003d4 	.word	0x200003d4
 8000ccc:	20000420 	.word	0x20000420

08000cd0 <generacionPWM>:

  }
  /* USER CODE END 5 */
}

void generacionPWM(void const * argument){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	int pwm;
	int pwm_ant=0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
	while(1){
		xSemaphoreTake(semaforo2,portMAX_DELAY);
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <generacionPWM+0xfc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fcdb 	bl	80046a0 <xQueueSemaphoreTake>

		if(distancia>600)	//si el sensor indica que no recibió el pulso, seteo la distancia máxima que puede medir
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <generacionPWM+0x100>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000cf2:	dd02      	ble.n	8000cfa <generacionPWM+0x2a>
			pwm = 600;
 8000cf4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cf8:	60fb      	str	r3, [r7, #12]

		// redondeo los períodos posibles a multiplos de 5
		if(distancia % 10 < 5)
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <generacionPWM+0x100>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <generacionPWM+0x104>)
 8000d00:	fb83 2301 	smull	r2, r3, r3, r1
 8000d04:	109a      	asrs	r2, r3, #2
 8000d06:	17cb      	asrs	r3, r1, #31
 8000d08:	1ad2      	subs	r2, r2, r3
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	1aca      	subs	r2, r1, r3
 8000d14:	2a04      	cmp	r2, #4
 8000d16:	dc11      	bgt.n	8000d3c <generacionPWM+0x6c>
			pwm = distancia - distancia % 10;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <generacionPWM+0x100>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <generacionPWM+0x100>)
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <generacionPWM+0x104>)
 8000d22:	fb83 2301 	smull	r2, r3, r3, r1
 8000d26:	109a      	asrs	r2, r3, #2
 8000d28:	17cb      	asrs	r3, r1, #31
 8000d2a:	1ad2      	subs	r2, r2, r3
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	1aca      	subs	r2, r1, r3
 8000d36:	1a83      	subs	r3, r0, r2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e021      	b.n	8000d80 <generacionPWM+0xb0>
		else if(distancia % 10 >=5)
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <generacionPWM+0x100>)
 8000d3e:	6819      	ldr	r1, [r3, #0]
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <generacionPWM+0x104>)
 8000d42:	fb83 2301 	smull	r2, r3, r3, r1
 8000d46:	109a      	asrs	r2, r3, #2
 8000d48:	17cb      	asrs	r3, r1, #31
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	1aca      	subs	r2, r1, r3
 8000d56:	2a04      	cmp	r2, #4
 8000d58:	dd12      	ble.n	8000d80 <generacionPWM+0xb0>
			pwm = distancia + 10 -distancia % 10;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <generacionPWM+0x100>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f103 000a 	add.w	r0, r3, #10
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <generacionPWM+0x100>)
 8000d64:	6819      	ldr	r1, [r3, #0]
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <generacionPWM+0x104>)
 8000d68:	fb83 2301 	smull	r2, r3, r3, r1
 8000d6c:	109a      	asrs	r2, r3, #2
 8000d6e:	17cb      	asrs	r3, r1, #31
 8000d70:	1ad2      	subs	r2, r2, r3
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	1aca      	subs	r2, r1, r3
 8000d7c:	1a83      	subs	r3, r0, r2
 8000d7e:	60fb      	str	r3, [r7, #12]

		uartBufferLen=sprintf(uart_buf,"%u pwm \r\n",pwm);
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4915      	ldr	r1, [pc, #84]	; (8000dd8 <generacionPWM+0x108>)
 8000d84:	4815      	ldr	r0, [pc, #84]	; (8000ddc <generacionPWM+0x10c>)
 8000d86:	f005 fc39 	bl	80065fc <siprintf>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <generacionPWM+0x110>)
 8000d90:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <generacionPWM+0x110>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	490f      	ldr	r1, [pc, #60]	; (8000ddc <generacionPWM+0x10c>)
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <generacionPWM+0x114>)
 8000da0:	f002 fd9b 	bl	80038da <HAL_UART_Transmit>

		if(pwm!=pwm_ant){
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d097      	beq.n	8000cdc <generacionPWM+0xc>
			TIM3->ARR = pwm;
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <generacionPWM+0x118>)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR1 = pwm/2;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	0fda      	lsrs	r2, r3, #31
 8000db6:	4413      	add	r3, r2
 8000db8:	105b      	asrs	r3, r3, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <generacionPWM+0x118>)
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CNT=0;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <generacionPWM+0x118>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
			pwm_ant=pwm;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
	while(1){
 8000dca:	e787      	b.n	8000cdc <generacionPWM+0xc>
 8000dcc:	20000420 	.word	0x20000420
 8000dd0:	20000484 	.word	0x20000484
 8000dd4:	66666667 	.word	0x66666667
 8000dd8:	08006dd0 	.word	0x08006dd0
 8000ddc:	20000438 	.word	0x20000438
 8000de0:	20000434 	.word	0x20000434
 8000de4:	200003d4 	.word	0x200003d4
 8000de8:	40000400 	.word	0x40000400

08000dec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2101      	movs	r1, #1
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <StartDefaultTask+0x2c>)
 8000dfa:	f000 fce9 	bl	80017d0 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f004 f806 	bl	8004e10 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2101      	movs	r1, #1
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <StartDefaultTask+0x2c>)
 8000e0a:	f000 fce1 	bl	80017d0 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);
 8000e0e:	2028      	movs	r0, #40	; 0x28
 8000e10:	f003 fffe 	bl	8004e10 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000e14:	e7ee      	b.n	8000df4 <StartDefaultTask+0x8>
 8000e16:	bf00      	nop
 8000e18:	40020000 	.word	0x40020000

08000e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e2e:	f000 fa49 	bl	80012c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40010000 	.word	0x40010000

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	210f      	movs	r1, #15
 8000e8e:	f06f 0001 	mvn.w	r0, #1
 8000e92:	f000 faef 	bl	8001474 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d134      	bne.n	8000f30 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_TIM_Base_MspInit+0x94>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <HAL_TIM_Base_MspInit+0x94>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_TIM_Base_MspInit+0x94>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_TIM_Base_MspInit+0x94>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_TIM_Base_MspInit+0x94>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_TIM_Base_MspInit+0x94>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f10:	2301      	movs	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <HAL_TIM_Base_MspInit+0x98>)
 8000f1c:	f000 fad4 	bl	80014c8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2105      	movs	r1, #5
 8000f24:	201c      	movs	r0, #28
 8000f26:	f000 faa5 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f2a:	201c      	movs	r0, #28
 8000f2c:	f000 fabe 	bl	80014ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10d      	bne.n	8000f6e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_TIM_PWM_MspInit+0x40>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_TIM_PWM_MspInit+0x40>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_TIM_PWM_MspInit+0x40>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11d      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fc2:	2340      	movs	r3, #64	; 0x40
 8000fc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_TIM_MspPostInit+0x70>)
 8000fde:	f000 fa73 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_UART_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12b      	bne.n	8001072 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_UART_MspInit+0x88>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_UART_MspInit+0x88>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_UART_MspInit+0x88>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_UART_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_UART_MspInit+0x88>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_UART_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001052:	230c      	movs	r3, #12
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001062:	2307      	movs	r3, #7
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_UART_MspInit+0x8c>)
 800106e:	f000 fa2b 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40004400 	.word	0x40004400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	2019      	movs	r0, #25
 800109e:	f000 f9e9 	bl	8001474 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010a2:	2019      	movs	r0, #25
 80010a4:	f000 fa02 	bl	80014ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <HAL_InitTick+0xa0>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <HAL_InitTick+0xa0>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6453      	str	r3, [r2, #68]	; 0x44
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_InitTick+0xa0>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c4:	f107 0210 	add.w	r2, r7, #16
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 f862 	bl	8002198 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010d4:	f001 f84c 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 80010d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010dc:	4a13      	ldr	r2, [pc, #76]	; (800112c <HAL_InitTick+0xa4>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9b      	lsrs	r3, r3, #18
 80010e4:	3b01      	subs	r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_InitTick+0xa8>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <HAL_InitTick+0xac>)
 80010ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_InitTick+0xa8>)
 80010f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_InitTick+0xa8>)
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_InitTick+0xa8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_InitTick+0xa8>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <HAL_InitTick+0xa8>)
 800110a:	f001 f877 	bl	80021fc <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d104      	bne.n	800111e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <HAL_InitTick+0xa8>)
 8001116:	f001 f8c1 	bl	800229c <HAL_TIM_Base_Start_IT>
 800111a:	4603      	mov	r3, r0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	431bde83 	.word	0x431bde83
 8001130:	20000488 	.word	0x20000488
 8001134:	40010000 	.word	0x40010000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800116a:	f001 fb6d 	bl	8002848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000488 	.word	0x20000488

08001178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM2_IRQHandler+0x10>)
 800117e:	f001 fb63 	bl	8002848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000344 	.word	0x20000344

0800118c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001190:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001194:	f000 fb50 	bl	8001838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f005 f8c6 	bl	800635c <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20018000 	.word	0x20018000
 80011fc:	00000400 	.word	0x00000400
 8001200:	200004d0 	.word	0x200004d0
 8001204:	20004240 	.word	0x20004240

08001208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001232:	490e      	ldr	r1, [pc, #56]	; (800126c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001248:	4c0b      	ldr	r4, [pc, #44]	; (8001278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001256:	f7ff ffd7 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f005 f885 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff f9b3 	bl	80005c8 <main>
  bx  lr    
 8001262:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001264:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001270:	08006ea0 	.word	0x08006ea0
  ldr r2, =_sbss
 8001274:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001278:	2000423c 	.word	0x2000423c

0800127c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_Init+0x40>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_Init+0x40>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_Init+0x40>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f8d8 	bl	800145e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	200f      	movs	r0, #15
 80012b0:	f7ff feea 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fdca 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	200004d4 	.word	0x200004d4

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200004d4 	.word	0x200004d4

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff4c 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001486:	f7ff ff61 	bl	800134c <__NVIC_GetPriorityGrouping>
 800148a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	6978      	ldr	r0, [r7, #20]
 8001492:	f7ff ffb1 	bl	80013f8 <NVIC_EncodePriority>
 8001496:	4602      	mov	r2, r0
 8001498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff80 	bl	80013a4 <__NVIC_SetPriority>
}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff54 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e159      	b.n	8001798 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8148 	bne.w	8001792 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d005      	beq.n	800151a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001516:	2b02      	cmp	r3, #2
 8001518:	d130      	bne.n	800157c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 0201 	and.w	r2, r3, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b03      	cmp	r3, #3
 8001586:	d017      	beq.n	80015b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80a2 	beq.w	8001792 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a56      	ldr	r2, [pc, #344]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <HAL_GPIO_Init+0x2ec>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <HAL_GPIO_Init+0x2f0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x202>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_GPIO_Init+0x2f4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x1fe>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <HAL_GPIO_Init+0x2f8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x1fa>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_GPIO_Init+0x2fc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x1f6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a45      	ldr	r2, [pc, #276]	; (80017c8 <HAL_GPIO_Init+0x300>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x1f2>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	; (80017b4 <HAL_GPIO_Init+0x2ec>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_GPIO_Init+0x304>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170e:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_GPIO_Init+0x304>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001762:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_GPIO_Init+0x304>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178c:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_GPIO_Init+0x304>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f aea2 	bls.w	80014e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40013c00 	.word	0x40013c00

080017d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017ec:	e003      	b.n	80017f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	041a      	lsls	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	619a      	str	r2, [r3, #24]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001814:	887a      	ldrh	r2, [r7, #2]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	041a      	lsls	r2, r3, #16
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43d9      	mvns	r1, r3
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	400b      	ands	r3, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	619a      	str	r2, [r3, #24]
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f90c 	bl	8000a74 <HAL_GPIO_EXTI_Callback>
  }
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40013c00 	.word	0x40013c00

08001868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e267      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d075      	beq.n	8001972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d00c      	beq.n	80018ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001892:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189a:	2b08      	cmp	r3, #8
 800189c:	d112      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018aa:	d10b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d05b      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d157      	bne.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e242      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x74>
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e01d      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x98>
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a68      	ldr	r2, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fce4 	bl	80012ec <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fce0 	bl	80012ec <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e207      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0xc0>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fcd0 	bl	80012ec <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fccc 	bl	80012ec <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1f3      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0xe8>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d11c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1c7      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fc85 	bl	80012ec <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fc81 	bl	80012ec <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1a8      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc64 	bl	80012ec <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc60 	bl	80012ec <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e187      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d036      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fc44 	bl	80012ec <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fc40 	bl	80012ec <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e167      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x200>
 8001a86:	e01b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fc2d 	bl	80012ec <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	e00e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fc29 	bl	80012ec <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d907      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e150      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470000 	.word	0x42470000
 8001ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ea      	bne.n	8001a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8097 	beq.w	8001bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10f      	bne.n	8001afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a7c      	ldr	r2, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fbe9 	bl	80012ec <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fbe5 	bl	80012ec <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e10c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2ea>
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a63      	ldr	r2, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x30c>
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fbaa 	bl	80012ec <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fba6 	bl	80012ec <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0cb      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ee      	beq.n	8001b9c <HAL_RCC_OscConfig+0x334>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fb94 	bl	80012ec <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb90 	bl	80012ec <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0b5      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a1 	beq.w	8001d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d05c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d141      	bne.n	8001c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb64 	bl	80012ec <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fb60 	bl	80012ec <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e087      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fb39 	bl	80012ec <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fb35 	bl	80012ec <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e05c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x416>
 8001c9c:	e054      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb22 	bl	80012ec <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fb1e 	bl	80012ec <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e045      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x444>
 8001cca:	e03d      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e038      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4ec>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d028      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d121      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d11a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cc      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d90c      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d044      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e067      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fa50 	bl	80012ec <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff fa4c 	bl	80012ec <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f8c2 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08006de4 	.word	0x08006de4
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f28:	b094      	sub	sp, #80	; 0x50
 8001f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f30:	2300      	movs	r3, #0
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f34:	2300      	movs	r3, #0
 8001f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3c:	4b79      	ldr	r3, [pc, #484]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d00d      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x40>
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	f200 80e1 	bhi.w	8002110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x34>
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f56:	e0db      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f5c:	e0db      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f5e:	4b73      	ldr	r3, [pc, #460]	; (800212c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f62:	e0d8      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f64:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	2200      	movs	r2, #0
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
 8001f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f96:	4622      	mov	r2, r4
 8001f98:	462b      	mov	r3, r5
 8001f9a:	f04f 0000 	mov.w	r0, #0
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	0159      	lsls	r1, r3, #5
 8001fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa8:	0150      	lsls	r0, r2, #5
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4621      	mov	r1, r4
 8001fb0:	1a51      	subs	r1, r2, r1
 8001fb2:	6139      	str	r1, [r7, #16]
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fc8:	4659      	mov	r1, fp
 8001fca:	018b      	lsls	r3, r1, #6
 8001fcc:	4651      	mov	r1, sl
 8001fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fd2:	4651      	mov	r1, sl
 8001fd4:	018a      	lsls	r2, r1, #6
 8001fd6:	4651      	mov	r1, sl
 8001fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8001fdc:	4659      	mov	r1, fp
 8001fde:	eb63 0901 	sbc.w	r9, r3, r1
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ff6:	4690      	mov	r8, r2
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	eb18 0303 	adds.w	r3, r8, r3
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	462b      	mov	r3, r5
 8002004:	eb49 0303 	adc.w	r3, r9, r3
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002016:	4629      	mov	r1, r5
 8002018:	024b      	lsls	r3, r1, #9
 800201a:	4621      	mov	r1, r4
 800201c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002020:	4621      	mov	r1, r4
 8002022:	024a      	lsls	r2, r1, #9
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202a:	2200      	movs	r2, #0
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
 800202e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002034:	f7fe f924 	bl	8000280 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002040:	e058      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	2200      	movs	r2, #0
 800204a:	4618      	mov	r0, r3
 800204c:	4611      	mov	r1, r2
 800204e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800205c:	4642      	mov	r2, r8
 800205e:	464b      	mov	r3, r9
 8002060:	f04f 0000 	mov.w	r0, #0
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	0159      	lsls	r1, r3, #5
 800206a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800206e:	0150      	lsls	r0, r2, #5
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4641      	mov	r1, r8
 8002076:	ebb2 0a01 	subs.w	sl, r2, r1
 800207a:	4649      	mov	r1, r9
 800207c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800208c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002094:	ebb2 040a 	subs.w	r4, r2, sl
 8002098:	eb63 050b 	sbc.w	r5, r3, fp
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	00eb      	lsls	r3, r5, #3
 80020a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020aa:	00e2      	lsls	r2, r4, #3
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	4643      	mov	r3, r8
 80020b2:	18e3      	adds	r3, r4, r3
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	464b      	mov	r3, r9
 80020b8:	eb45 0303 	adc.w	r3, r5, r3
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ca:	4629      	mov	r1, r5
 80020cc:	028b      	lsls	r3, r1, #10
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d4:	4621      	mov	r1, r4
 80020d6:	028a      	lsls	r2, r1, #10
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020de:	2200      	movs	r2, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	61fa      	str	r2, [r7, #28]
 80020e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e8:	f7fe f8ca 	bl	8000280 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002118:	4618      	mov	r0, r3
 800211a:	3750      	adds	r7, #80	; 0x50
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	00f42400 	.word	0x00f42400
 800212c:	007a1200 	.word	0x007a1200

08002130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_GetHCLKFreq+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800214c:	f7ff fff0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	; (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	08006df4 	.word	0x08006df4

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002174:	f7ff ffdc 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0b5b      	lsrs	r3, r3, #13
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	08006df4 	.word	0x08006df4

08002198 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	220f      	movs	r2, #15
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_RCC_GetClockConfig+0x60>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0207 	and.w	r2, r3, #7
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40023c00 	.word	0x40023c00

080021fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e041      	b.n	8002292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fe3e 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f000 fe94 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e044      	b.n	800233e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_TIM_Base_Start_IT+0xb0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d018      	beq.n	8002308 <HAL_TIM_Base_Start_IT+0x6c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d013      	beq.n	8002308 <HAL_TIM_Base_Start_IT+0x6c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <HAL_TIM_Base_Start_IT+0xb4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_TIM_Base_Start_IT+0x6c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a19      	ldr	r2, [pc, #100]	; (8002354 <HAL_TIM_Base_Start_IT+0xb8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_TIM_Base_Start_IT+0x6c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_TIM_Base_Start_IT+0xbc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_TIM_Base_Start_IT+0x6c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_TIM_Base_Start_IT+0xc0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d111      	bne.n	800232c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b06      	cmp	r3, #6
 8002318:	d010      	beq.n	800233c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232a:	e007      	b.n	800233c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800
 8002358:	40000c00 	.word	0x40000c00
 800235c:	40014000 	.word	0x40014000

08002360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e041      	b.n	80023f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe fdda 	bl	8000f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f000 fde2 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_TIM_PWM_Start+0x24>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e022      	b.n	800246a <HAL_TIM_PWM_Start+0x6a>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b04      	cmp	r3, #4
 8002428:	d109      	bne.n	800243e <HAL_TIM_PWM_Start+0x3e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e015      	b.n	800246a <HAL_TIM_PWM_Start+0x6a>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d109      	bne.n	8002458 <HAL_TIM_PWM_Start+0x58>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e008      	b.n	800246a <HAL_TIM_PWM_Start+0x6a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e068      	b.n	8002544 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <HAL_TIM_PWM_Start+0x82>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	e013      	b.n	80024aa <HAL_TIM_PWM_Start+0xaa>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d104      	bne.n	8002492 <HAL_TIM_PWM_Start+0x92>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002490:	e00b      	b.n	80024aa <HAL_TIM_PWM_Start+0xaa>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d104      	bne.n	80024a2 <HAL_TIM_PWM_Start+0xa2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a0:	e003      	b.n	80024aa <HAL_TIM_PWM_Start+0xaa>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2201      	movs	r2, #1
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 f91c 	bl	80036f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a23      	ldr	r2, [pc, #140]	; (800254c <HAL_TIM_PWM_Start+0x14c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d107      	bne.n	80024d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_TIM_PWM_Start+0x14c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d018      	beq.n	800250e <HAL_TIM_PWM_Start+0x10e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d013      	beq.n	800250e <HAL_TIM_PWM_Start+0x10e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_TIM_PWM_Start+0x150>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00e      	beq.n	800250e <HAL_TIM_PWM_Start+0x10e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_TIM_PWM_Start+0x154>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_TIM_PWM_Start+0x10e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_TIM_PWM_Start+0x158>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_TIM_PWM_Start+0x10e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_TIM_PWM_Start+0x15c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d111      	bne.n	8002532 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d010      	beq.n	8002542 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002530:	e007      	b.n	8002542 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40010000 	.word	0x40010000
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800
 8002558:	40000c00 	.word	0x40000c00
 800255c:	40014000 	.word	0x40014000

08002560 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e041      	b.n	80025f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f839 	bl	80025fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 fce2 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <HAL_TIM_IC_Start_IT+0x1e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e013      	b.n	800265a <HAL_TIM_IC_Start_IT+0x46>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d104      	bne.n	8002642 <HAL_TIM_IC_Start_IT+0x2e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800263e:	b2db      	uxtb	r3, r3
 8002640:	e00b      	b.n	800265a <HAL_TIM_IC_Start_IT+0x46>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b08      	cmp	r3, #8
 8002646:	d104      	bne.n	8002652 <HAL_TIM_IC_Start_IT+0x3e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800264e:	b2db      	uxtb	r3, r3
 8002650:	e003      	b.n	800265a <HAL_TIM_IC_Start_IT+0x46>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d104      	bne.n	800266c <HAL_TIM_IC_Start_IT+0x58>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e013      	b.n	8002694 <HAL_TIM_IC_Start_IT+0x80>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b04      	cmp	r3, #4
 8002670:	d104      	bne.n	800267c <HAL_TIM_IC_Start_IT+0x68>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e00b      	b.n	8002694 <HAL_TIM_IC_Start_IT+0x80>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b08      	cmp	r3, #8
 8002680:	d104      	bne.n	800268c <HAL_TIM_IC_Start_IT+0x78>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e003      	b.n	8002694 <HAL_TIM_IC_Start_IT+0x80>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002692:	b2db      	uxtb	r3, r3
 8002694:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002696:	7bbb      	ldrb	r3, [r7, #14]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d102      	bne.n	80026a2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800269c:	7b7b      	ldrb	r3, [r7, #13]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d001      	beq.n	80026a6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0c2      	b.n	800282c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_IC_Start_IT+0xa2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b4:	e013      	b.n	80026de <HAL_TIM_IC_Start_IT+0xca>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_IC_Start_IT+0xb2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	e00b      	b.n	80026de <HAL_TIM_IC_Start_IT+0xca>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_IC_Start_IT+0xc2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d4:	e003      	b.n	80026de <HAL_TIM_IC_Start_IT+0xca>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <HAL_TIM_IC_Start_IT+0xda>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ec:	e013      	b.n	8002716 <HAL_TIM_IC_Start_IT+0x102>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d104      	bne.n	80026fe <HAL_TIM_IC_Start_IT+0xea>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026fc:	e00b      	b.n	8002716 <HAL_TIM_IC_Start_IT+0x102>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d104      	bne.n	800270e <HAL_TIM_IC_Start_IT+0xfa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800270c:	e003      	b.n	8002716 <HAL_TIM_IC_Start_IT+0x102>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b0c      	cmp	r3, #12
 800271a:	d841      	bhi.n	80027a0 <HAL_TIM_IC_Start_IT+0x18c>
 800271c:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <HAL_TIM_IC_Start_IT+0x110>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002759 	.word	0x08002759
 8002728:	080027a1 	.word	0x080027a1
 800272c:	080027a1 	.word	0x080027a1
 8002730:	080027a1 	.word	0x080027a1
 8002734:	0800276b 	.word	0x0800276b
 8002738:	080027a1 	.word	0x080027a1
 800273c:	080027a1 	.word	0x080027a1
 8002740:	080027a1 	.word	0x080027a1
 8002744:	0800277d 	.word	0x0800277d
 8002748:	080027a1 	.word	0x080027a1
 800274c:	080027a1 	.word	0x080027a1
 8002750:	080027a1 	.word	0x080027a1
 8002754:	0800278f 	.word	0x0800278f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0202 	orr.w	r2, r2, #2
 8002766:	60da      	str	r2, [r3, #12]
      break;
 8002768:	e01d      	b.n	80027a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0204 	orr.w	r2, r2, #4
 8002778:	60da      	str	r2, [r3, #12]
      break;
 800277a:	e014      	b.n	80027a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0208 	orr.w	r2, r2, #8
 800278a:	60da      	str	r2, [r3, #12]
      break;
 800278c:	e00b      	b.n	80027a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0210 	orr.w	r2, r2, #16
 800279c:	60da      	str	r2, [r3, #12]
      break;
 800279e:	e002      	b.n	80027a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      break;
 80027a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d13e      	bne.n	800282a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2201      	movs	r2, #1
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 ff9b 	bl	80036f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_TIM_IC_Start_IT+0x220>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d018      	beq.n	80027f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d013      	beq.n	80027f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a19      	ldr	r2, [pc, #100]	; (8002838 <HAL_TIM_IC_Start_IT+0x224>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00e      	beq.n	80027f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_TIM_IC_Start_IT+0x228>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a16      	ldr	r2, [pc, #88]	; (8002840 <HAL_TIM_IC_Start_IT+0x22c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <HAL_TIM_IC_Start_IT+0x230>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d111      	bne.n	800281a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d010      	beq.n	800282a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002818:	e007      	b.n	800282a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40014000 	.word	0x40014000

08002848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0202 	mvn.w	r2, #2
 8002874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe f902 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fb4a 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fb51 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d122      	bne.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11b      	bne.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0204 	mvn.w	r2, #4
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe f8d8 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fb20 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fb27 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b08      	cmp	r3, #8
 8002904:	d122      	bne.n	800294c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d11b      	bne.n	800294c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0208 	mvn.w	r2, #8
 800291c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2204      	movs	r2, #4
 8002922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe f8ae 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 8002938:	e005      	b.n	8002946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 faf6 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fafd 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b10      	cmp	r3, #16
 8002958:	d122      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b10      	cmp	r3, #16
 8002966:	d11b      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0210 	mvn.w	r2, #16
 8002970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2208      	movs	r2, #8
 8002976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe f884 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 facc 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fad3 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d107      	bne.n	80029cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0201 	mvn.w	r2, #1
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fa28 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d107      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 ff1a 	bl	800382c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d10e      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d107      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa98 	bl	8002f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d107      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0220 	mvn.w	r2, #32
 8002a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fee4 	bl	8003818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e088      	b.n	8002b88 <HAL_TIM_IC_ConfigChannel+0x130>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f000 fc74 	bl	8003380 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 020c 	bic.w	r2, r2, #12
 8002aa6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6999      	ldr	r1, [r3, #24]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	619a      	str	r2, [r3, #24]
 8002aba:	e060      	b.n	8002b7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d11c      	bne.n	8002afc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f000 fcec 	bl	80034ae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ae4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6999      	ldr	r1, [r3, #24]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	619a      	str	r2, [r3, #24]
 8002afa:	e040      	b.n	8002b7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11b      	bne.n	8002b3a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f000 fd39 	bl	8003588 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020c 	bic.w	r2, r2, #12
 8002b24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69d9      	ldr	r1, [r3, #28]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	61da      	str	r2, [r3, #28]
 8002b38:	e021      	b.n	8002b7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d11c      	bne.n	8002b7a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f000 fd56 	bl	8003600 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b62:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69d9      	ldr	r1, [r3, #28]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	021a      	lsls	r2, r3, #8
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	61da      	str	r2, [r3, #28]
 8002b78:	e001      	b.n	8002b7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0ae      	b.n	8002d0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	f200 809f 	bhi.w	8002cfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002cfd 	.word	0x08002cfd
 8002bcc:	08002cfd 	.word	0x08002cfd
 8002bd0:	08002cfd 	.word	0x08002cfd
 8002bd4:	08002c39 	.word	0x08002c39
 8002bd8:	08002cfd 	.word	0x08002cfd
 8002bdc:	08002cfd 	.word	0x08002cfd
 8002be0:	08002cfd 	.word	0x08002cfd
 8002be4:	08002c7b 	.word	0x08002c7b
 8002be8:	08002cfd 	.word	0x08002cfd
 8002bec:	08002cfd 	.word	0x08002cfd
 8002bf0:	08002cfd 	.word	0x08002cfd
 8002bf4:	08002cbb 	.word	0x08002cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fa32 	bl	8003068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	619a      	str	r2, [r3, #24]
      break;
 8002c36:	e064      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fa78 	bl	8003134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6999      	ldr	r1, [r3, #24]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
      break;
 8002c78:	e043      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fac3 	bl	800320c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0208 	orr.w	r2, r2, #8
 8002c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0204 	bic.w	r2, r2, #4
 8002ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
      break;
 8002cb8:	e023      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fb0d 	bl	80032e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_ConfigClockSource+0x1c>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e0b4      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x186>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d68:	d03e      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6e:	f200 8087 	bhi.w	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d76:	f000 8086 	beq.w	8002e86 <HAL_TIM_ConfigClockSource+0x172>
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	d87f      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b70      	cmp	r3, #112	; 0x70
 8002d82:	d01a      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0xa6>
 8002d84:	2b70      	cmp	r3, #112	; 0x70
 8002d86:	d87b      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b60      	cmp	r3, #96	; 0x60
 8002d8a:	d050      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x11a>
 8002d8c:	2b60      	cmp	r3, #96	; 0x60
 8002d8e:	d877      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b50      	cmp	r3, #80	; 0x50
 8002d92:	d03c      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xfa>
 8002d94:	2b50      	cmp	r3, #80	; 0x50
 8002d96:	d873      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d058      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x13a>
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d86f      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	2b30      	cmp	r3, #48	; 0x30
 8002da2:	d064      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x15a>
 8002da4:	2b30      	cmp	r3, #48	; 0x30
 8002da6:	d86b      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d060      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x15a>
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d867      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d05c      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x15a>
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d05a      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	e062      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6899      	ldr	r1, [r3, #8]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f000 fc71 	bl	80036b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	609a      	str	r2, [r3, #8]
      break;
 8002de6:	e04f      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f000 fc5a 	bl	80036b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0a:	609a      	str	r2, [r3, #8]
      break;
 8002e0c:	e03c      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 fb18 	bl	8003450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2150      	movs	r1, #80	; 0x50
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc27 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e02c      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 fb74 	bl	8003528 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2160      	movs	r1, #96	; 0x60
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fc17 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e01c      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f000 faf8 	bl	8003450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2140      	movs	r1, #64	; 0x40
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fc07 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 8002e6c:	e00c      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f000 fbfe 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 8002e7e:	e003      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      break;
 8002e84:	e000      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d831      	bhi.n	8002f1c <HAL_TIM_ReadCapturedValue+0x78>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002ef5 	.word	0x08002ef5
 8002ec4:	08002f1d 	.word	0x08002f1d
 8002ec8:	08002f1d 	.word	0x08002f1d
 8002ecc:	08002f1d 	.word	0x08002f1d
 8002ed0:	08002eff 	.word	0x08002eff
 8002ed4:	08002f1d 	.word	0x08002f1d
 8002ed8:	08002f1d 	.word	0x08002f1d
 8002edc:	08002f1d 	.word	0x08002f1d
 8002ee0:	08002f09 	.word	0x08002f09
 8002ee4:	08002f1d 	.word	0x08002f1d
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	08002f1d 	.word	0x08002f1d
 8002ef0:	08002f13 	.word	0x08002f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	60fb      	str	r3, [r7, #12]

      break;
 8002efc:	e00f      	b.n	8002f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	60fb      	str	r3, [r7, #12]

      break;
 8002f06:	e00a      	b.n	8002f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	60fb      	str	r3, [r7, #12]

      break;
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	60fb      	str	r3, [r7, #12]

      break;
 8002f1a:	e000      	b.n	8002f1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002f1c:	bf00      	nop
  }

  return tmpreg;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a34      	ldr	r2, [pc, #208]	; (800304c <TIM_Base_SetConfig+0xe4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00f      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d00b      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a31      	ldr	r2, [pc, #196]	; (8003050 <TIM_Base_SetConfig+0xe8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a30      	ldr	r2, [pc, #192]	; (8003054 <TIM_Base_SetConfig+0xec>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <TIM_Base_SetConfig+0xf0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a25      	ldr	r2, [pc, #148]	; (800304c <TIM_Base_SetConfig+0xe4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d017      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a22      	ldr	r2, [pc, #136]	; (8003050 <TIM_Base_SetConfig+0xe8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <TIM_Base_SetConfig+0xec>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00f      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a20      	ldr	r2, [pc, #128]	; (8003058 <TIM_Base_SetConfig+0xf0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1f      	ldr	r2, [pc, #124]	; (800305c <TIM_Base_SetConfig+0xf4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <TIM_Base_SetConfig+0xf8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <TIM_Base_SetConfig+0xfc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d108      	bne.n	8003004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <TIM_Base_SetConfig+0xe4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d103      	bne.n	8003038 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	615a      	str	r2, [r3, #20]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40010000 	.word	0x40010000
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800
 8003058:	40000c00 	.word	0x40000c00
 800305c:	40014000 	.word	0x40014000
 8003060:	40014400 	.word	0x40014400
 8003064:	40014800 	.word	0x40014800

08003068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0302 	bic.w	r3, r3, #2
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <TIM_OC1_SetConfig+0xc8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10c      	bne.n	80030de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0308 	bic.w	r3, r3, #8
 80030ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a13      	ldr	r2, [pc, #76]	; (8003130 <TIM_OC1_SetConfig+0xc8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d111      	bne.n	800310a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40010000 	.word	0x40010000

08003134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0210 	bic.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0320 	bic.w	r3, r3, #32
 800317e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <TIM_OC2_SetConfig+0xd4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d10d      	bne.n	80031b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <TIM_OC2_SetConfig+0xd4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d113      	bne.n	80031e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000

0800320c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <TIM_OC3_SetConfig+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10d      	bne.n	8003286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <TIM_OC3_SetConfig+0xd0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d113      	bne.n	80032b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800329c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	621a      	str	r2, [r3, #32]
}
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40010000 	.word	0x40010000

080032e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800332a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	031b      	lsls	r3, r3, #12
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a10      	ldr	r2, [pc, #64]	; (800337c <TIM_OC4_SetConfig+0x9c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d109      	bne.n	8003354 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40010000 	.word	0x40010000

08003380 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f023 0201 	bic.w	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a24      	ldr	r2, [pc, #144]	; (800343c <TIM_TI1_SetConfig+0xbc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <TIM_TI1_SetConfig+0x56>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b4:	d00f      	beq.n	80033d6 <TIM_TI1_SetConfig+0x56>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4a21      	ldr	r2, [pc, #132]	; (8003440 <TIM_TI1_SetConfig+0xc0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <TIM_TI1_SetConfig+0x56>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a20      	ldr	r2, [pc, #128]	; (8003444 <TIM_TI1_SetConfig+0xc4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <TIM_TI1_SetConfig+0x56>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <TIM_TI1_SetConfig+0xc8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_TI1_SetConfig+0x56>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a1e      	ldr	r2, [pc, #120]	; (800344c <TIM_TI1_SetConfig+0xcc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <TIM_TI1_SetConfig+0x5a>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <TIM_TI1_SetConfig+0x5c>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e003      	b.n	80033fa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	b2db      	uxtb	r3, r3
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f023 030a 	bic.w	r3, r3, #10
 8003414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f003 030a 	and.w	r3, r3, #10
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40010000 	.word	0x40010000
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	40014000 	.word	0x40014000

08003450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800347a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 030a 	bic.w	r3, r3, #10
 800348c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	621a      	str	r2, [r3, #32]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b087      	sub	sp, #28
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f023 0210 	bic.w	r2, r3, #16
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	031b      	lsls	r3, r3, #12
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003500:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	621a      	str	r2, [r3, #32]
}
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f023 0210 	bic.w	r2, r3, #16
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003552:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	031b      	lsls	r3, r3, #12
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	621a      	str	r2, [r3, #32]
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 0303 	bic.w	r3, r3, #3
 80035b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80035d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800363e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	031b      	lsls	r3, r3, #12
 8003644:	b29b      	uxth	r3, r3
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003652:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	031b      	lsls	r3, r3, #12
 8003658:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	f043 0307 	orr.w	r3, r3, #7
 800369c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2201      	movs	r2, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1a      	ldr	r2, [r3, #32]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e050      	b.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d018      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d013      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00e      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10c      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40010000 	.word	0x40010000
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40000c00 	.word	0x40000c00
 8003814:	40014000 	.word	0x40014000

08003818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e03f      	b.n	80038d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fbc6 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f929 	bl	8003adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b08a      	sub	sp, #40	; 0x28
 80038de:	af02      	add	r7, sp, #8
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d17c      	bne.n	80039f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_Transmit+0x2c>
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e075      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_UART_Transmit+0x3e>
 8003914:	2302      	movs	r3, #2
 8003916:	e06e      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fd fcdd 	bl	80012ec <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d108      	bne.n	800395c <HAL_UART_Transmit+0x82>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e003      	b.n	8003964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800396c:	e02a      	b.n	80039c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f840 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e036      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3302      	adds	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e007      	b.n	80039b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1cf      	bne.n	800396e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f810 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e006      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e000      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b090      	sub	sp, #64	; 0x40
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0e:	e050      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d04c      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1e:	f7fd fc65 	bl	80012ec <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d241      	bcs.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a4e:	637a      	str	r2, [r7, #52]	; 0x34
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e5      	bne.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	613b      	str	r3, [r7, #16]
   return(result);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a82:	623a      	str	r2, [r7, #32]
 8003a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	69f9      	ldr	r1, [r7, #28]
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e00f      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d09f      	beq.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3740      	adds	r7, #64	; 0x40
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b0c0      	sub	sp, #256	; 0x100
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	68d9      	ldr	r1, [r3, #12]
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	ea40 0301 	orr.w	r3, r0, r1
 8003b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b34:	f021 010c 	bic.w	r1, r1, #12
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b42:	430b      	orrs	r3, r1
 8003b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	6999      	ldr	r1, [r3, #24]
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	ea40 0301 	orr.w	r3, r0, r1
 8003b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b8f      	ldr	r3, [pc, #572]	; (8003da8 <UART_SetConfig+0x2cc>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d005      	beq.n	8003b7c <UART_SetConfig+0xa0>
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b8d      	ldr	r3, [pc, #564]	; (8003dac <UART_SetConfig+0x2d0>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d104      	bne.n	8003b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7fe faf8 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 8003b80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b84:	e003      	b.n	8003b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b86:	f7fe fadf 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 8003b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b98:	f040 810c 	bne.w	8003db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	1891      	adds	r1, r2, r2
 8003bb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bb6:	415b      	adcs	r3, r3
 8003bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	eb12 0801 	adds.w	r8, r2, r1
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	eb43 0901 	adc.w	r9, r3, r1
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bde:	4690      	mov	r8, r2
 8003be0:	4699      	mov	r9, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	eb18 0303 	adds.w	r3, r8, r3
 8003be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bec:	462b      	mov	r3, r5
 8003bee:	eb49 0303 	adc.w	r3, r9, r3
 8003bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	18db      	adds	r3, r3, r3
 8003c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c10:	4613      	mov	r3, r2
 8003c12:	eb42 0303 	adc.w	r3, r2, r3
 8003c16:	657b      	str	r3, [r7, #84]	; 0x54
 8003c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c20:	f7fc fb2e 	bl	8000280 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	011c      	lsls	r4, r3, #4
 8003c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c54:	4641      	mov	r1, r8
 8003c56:	eb12 0a01 	adds.w	sl, r2, r1
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c74:	4692      	mov	sl, r2
 8003c76:	469b      	mov	fp, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c82:	464b      	mov	r3, r9
 8003c84:	eb4b 0303 	adc.w	r3, fp, r3
 8003c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	18db      	adds	r3, r3, r3
 8003ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	647b      	str	r3, [r7, #68]	; 0x44
 8003cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cb6:	f7fc fae3 	bl	8000280 <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2264      	movs	r2, #100	; 0x64
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	1acb      	subs	r3, r1, r3
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ce4:	441c      	add	r4, r3
 8003ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	1891      	adds	r1, r2, r2
 8003cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d00:	415b      	adcs	r3, r3
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d08:	4641      	mov	r1, r8
 8003d0a:	1851      	adds	r1, r2, r1
 8003d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d0e:	4649      	mov	r1, r9
 8003d10:	414b      	adcs	r3, r1
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d20:	4659      	mov	r1, fp
 8003d22:	00cb      	lsls	r3, r1, #3
 8003d24:	4651      	mov	r1, sl
 8003d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	00ca      	lsls	r2, r1, #3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	4642      	mov	r2, r8
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	460a      	mov	r2, r1
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	18db      	adds	r3, r3, r3
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d62:	4613      	mov	r3, r2
 8003d64:	eb42 0303 	adc.w	r3, r2, r3
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d72:	f7fc fa85 	bl	8000280 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	2164      	movs	r1, #100	; 0x64
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	3332      	adds	r3, #50	; 0x32
 8003d8e:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	f003 0207 	and.w	r2, r3, #7
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4422      	add	r2, r4
 8003da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003da4:	e105      	b.n	8003fb2 <UART_SetConfig+0x4d6>
 8003da6:	bf00      	nop
 8003da8:	40011000 	.word	0x40011000
 8003dac:	40011400 	.word	0x40011400
 8003db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	464b      	mov	r3, r9
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	6239      	str	r1, [r7, #32]
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	1854      	adds	r4, r2, r1
 8003dda:	4649      	mov	r1, r9
 8003ddc:	eb43 0501 	adc.w	r5, r3, r1
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	00eb      	lsls	r3, r5, #3
 8003dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dee:	00e2      	lsls	r2, r4, #3
 8003df0:	4614      	mov	r4, r2
 8003df2:	461d      	mov	r5, r3
 8003df4:	4643      	mov	r3, r8
 8003df6:	18e3      	adds	r3, r4, r3
 8003df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	eb45 0303 	adc.w	r3, r5, r3
 8003e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e22:	4629      	mov	r1, r5
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	4621      	mov	r1, r4
 8003e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	008a      	lsls	r2, r1, #2
 8003e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e34:	f7fc fa24 	bl	8000280 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b60      	ldr	r3, [pc, #384]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	011c      	lsls	r4, r3, #4
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	1891      	adds	r1, r2, r2
 8003e5e:	61b9      	str	r1, [r7, #24]
 8003e60:	415b      	adcs	r3, r3
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e68:	4641      	mov	r1, r8
 8003e6a:	1851      	adds	r1, r2, r1
 8003e6c:	6139      	str	r1, [r7, #16]
 8003e6e:	4649      	mov	r1, r9
 8003e70:	414b      	adcs	r3, r1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e80:	4659      	mov	r1, fp
 8003e82:	00cb      	lsls	r3, r1, #3
 8003e84:	4651      	mov	r1, sl
 8003e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	00ca      	lsls	r2, r1, #3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	4642      	mov	r2, r8
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	eb42 0303 	adc.w	r3, r2, r3
 8003ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	008b      	lsls	r3, r1, #2
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eca:	4641      	mov	r1, r8
 8003ecc:	008a      	lsls	r2, r1, #2
 8003ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ed2:	f7fc f9d5 	bl	8000280 <__aeabi_uldivmod>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003edc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	2164      	movs	r1, #100	; 0x64
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	3332      	adds	r3, #50	; 0x32
 8003eee:	4a34      	ldr	r2, [pc, #208]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efa:	441c      	add	r4, r3
 8003efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f00:	2200      	movs	r2, #0
 8003f02:	673b      	str	r3, [r7, #112]	; 0x70
 8003f04:	677a      	str	r2, [r7, #116]	; 0x74
 8003f06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f0a:	4642      	mov	r2, r8
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	1891      	adds	r1, r2, r2
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	415b      	adcs	r3, r3
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	1851      	adds	r1, r2, r1
 8003f1e:	6039      	str	r1, [r7, #0]
 8003f20:	4649      	mov	r1, r9
 8003f22:	414b      	adcs	r3, r1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f32:	4659      	mov	r1, fp
 8003f34:	00cb      	lsls	r3, r1, #3
 8003f36:	4651      	mov	r1, sl
 8003f38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3c:	4651      	mov	r1, sl
 8003f3e:	00ca      	lsls	r2, r1, #3
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	4603      	mov	r3, r0
 8003f46:	4642      	mov	r2, r8
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	460a      	mov	r2, r1
 8003f50:	eb42 0303 	adc.w	r3, r2, r3
 8003f54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f60:	667a      	str	r2, [r7, #100]	; 0x64
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f6e:	4649      	mov	r1, r9
 8003f70:	008b      	lsls	r3, r1, #2
 8003f72:	4641      	mov	r1, r8
 8003f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f78:	4641      	mov	r1, r8
 8003f7a:	008a      	lsls	r2, r1, #2
 8003f7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f80:	f7fc f97e 	bl	8000280 <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2164      	movs	r1, #100	; 0x64
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	3332      	adds	r3, #50	; 0x32
 8003f9c:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4422      	add	r2, r4
 8003fb0:	609a      	str	r2, [r3, #8]
}
 8003fb2:	bf00      	nop
 8003fb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fbe:	bf00      	nop
 8003fc0:	51eb851f 	.word	0x51eb851f

08003fc4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fd6:	2b84      	cmp	r3, #132	; 0x84
 8003fd8:	d005      	beq.n	8003fe6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3303      	adds	r3, #3
 8003fe4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ff8:	f000 ff3e 	bl	8004e78 <vTaskStartScheduler>
  
  return osOK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	bd80      	pop	{r7, pc}

08004002 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004004:	b089      	sub	sp, #36	; 0x24
 8004006:	af04      	add	r7, sp, #16
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <osThreadCreate+0x54>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01c      	beq.n	8004056 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685c      	ldr	r4, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681d      	ldr	r5, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691e      	ldr	r6, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ffc8 	bl	8003fc4 <makeFreeRtosPriority>
 8004034:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800403e:	9202      	str	r2, [sp, #8]
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	9100      	str	r1, [sp, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4632      	mov	r2, r6
 8004048:	4629      	mov	r1, r5
 800404a:	4620      	mov	r0, r4
 800404c:	f000 fd36 	bl	8004abc <xTaskCreateStatic>
 8004050:	4603      	mov	r3, r0
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e01c      	b.n	8004090 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685c      	ldr	r4, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004062:	b29e      	uxth	r6, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ffaa 	bl	8003fc4 <makeFreeRtosPriority>
 8004070:	4602      	mov	r2, r0
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	9200      	str	r2, [sp, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	4632      	mov	r2, r6
 800407e:	4629      	mov	r1, r5
 8004080:	4620      	mov	r0, r4
 8004082:	f000 fd78 	bl	8004b76 <xTaskCreate>
 8004086:	4603      	mov	r3, r0
 8004088:	2b01      	cmp	r3, #1
 800408a:	d001      	beq.n	8004090 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004090:	68fb      	ldr	r3, [r7, #12]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800409a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f103 0208 	add.w	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295
 80040b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0208 	add.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f103 0208 	add.w	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d103      	bne.n	800415c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e00c      	b.n	8004176 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3308      	adds	r3, #8
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e002      	b.n	800416a <vListInsert+0x2e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d2f6      	bcs.n	8004164 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6852      	ldr	r2, [r2, #4]
 80041ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d103      	bne.n	80041e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800422e:	f001 fd89 	bl	8005d44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	3b01      	subs	r3, #1
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	441a      	add	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	22ff      	movs	r2, #255	; 0xff
 8004272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d114      	bne.n	80042ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01a      	beq.n	80042c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3310      	adds	r3, #16
 8004290:	4618      	mov	r0, r3
 8004292:	f001 f843 	bl	800531c <xTaskRemoveFromEventList>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d012      	beq.n	80042c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <xQueueGenericReset+0xcc>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	e009      	b.n	80042c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3310      	adds	r3, #16
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fef1 	bl	800409a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3324      	adds	r3, #36	; 0x24
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff feec 	bl	800409a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042c2:	f001 fd6f 	bl	8005da4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042c6:	2301      	movs	r3, #1
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	e000ed04 	.word	0xe000ed04

080042d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	613b      	str	r3, [r7, #16]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	fb02 f303 	mul.w	r3, r2, r3
 8004306:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3348      	adds	r3, #72	; 0x48
 800430c:	4618      	mov	r0, r3
 800430e:	f001 fe3b 	bl	8005f88 <pvPortMalloc>
 8004312:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d011      	beq.n	800433e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	3348      	adds	r3, #72	; 0x48
 8004322:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800432c:	79fa      	ldrb	r2, [r7, #7]
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f805 	bl	8004348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800433e:	69bb      	ldr	r3, [r7, #24]
	}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e002      	b.n	800436a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004376:	2101      	movs	r1, #1
 8004378:	69b8      	ldr	r0, [r7, #24]
 800437a:	f7ff ff43 	bl	8004204 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08e      	sub	sp, #56	; 0x38
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004396:	2300      	movs	r3, #0
 8004398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <xQueueGenericSend+0x32>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <xQueueGenericSend+0x40>
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <xQueueGenericSend+0x44>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <xQueueGenericSend+0x46>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <xQueueGenericSend+0x60>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d103      	bne.n	80043f6 <xQueueGenericSend+0x6e>
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <xQueueGenericSend+0x72>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <xQueueGenericSend+0x74>
 80043fa:	2300      	movs	r3, #0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericSend+0x8e>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	623b      	str	r3, [r7, #32]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004416:	f001 f943 	bl	80056a0 <xTaskGetSchedulerState>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <xQueueGenericSend+0x9e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <xQueueGenericSend+0xa2>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <xQueueGenericSend+0xa4>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <xQueueGenericSend+0xbe>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	61fb      	str	r3, [r7, #28]
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004446:	f001 fc7d 	bl	8005d44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <xQueueGenericSend+0xd4>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d129      	bne.n	80044b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004462:	f000 fa41 	bl	80048e8 <prvCopyDataToQueue>
 8004466:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d010      	beq.n	8004492 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	3324      	adds	r3, #36	; 0x24
 8004474:	4618      	mov	r0, r3
 8004476:	f000 ff51 	bl	800531c <xTaskRemoveFromEventList>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004480:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <xQueueGenericSend+0x1f8>)
 8004482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	e00a      	b.n	80044a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004498:	4b39      	ldr	r3, [pc, #228]	; (8004580 <xQueueGenericSend+0x1f8>)
 800449a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044a8:	f001 fc7c 	bl	8005da4 <vPortExitCritical>
				return pdPASS;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e063      	b.n	8004578 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d103      	bne.n	80044be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044b6:	f001 fc75 	bl	8005da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e05c      	b.n	8004578 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 ff89 	bl	80053e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044d2:	f001 fc67 	bl	8005da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044d6:	f000 fd39 	bl	8004f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044da:	f001 fc33 	bl	8005d44 <vPortEnterCritical>
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e4:	b25b      	sxtb	r3, r3
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d103      	bne.n	80044f4 <xQueueGenericSend+0x16c>
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d103      	bne.n	800450a <xQueueGenericSend+0x182>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800450a:	f001 fc4b 	bl	8005da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800450e:	1d3a      	adds	r2, r7, #4
 8004510:	f107 0314 	add.w	r3, r7, #20
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 ff78 	bl	800540c <xTaskCheckForTimeOut>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d124      	bne.n	800456c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004524:	f000 fab2 	bl	8004a8c <prvIsQueueFull>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d018      	beq.n	8004560 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	3310      	adds	r3, #16
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4611      	mov	r1, r2
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fecc 	bl	80052d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800453c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800453e:	f000 fa3d 	bl	80049bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004542:	f000 fd11 	bl	8004f68 <xTaskResumeAll>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	f47f af7c 	bne.w	8004446 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <xQueueGenericSend+0x1f8>)
 8004550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	e772      	b.n	8004446 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004562:	f000 fa2b 	bl	80049bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004566:	f000 fcff 	bl	8004f68 <xTaskResumeAll>
 800456a:	e76c      	b.n	8004446 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800456c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800456e:	f000 fa25 	bl	80049bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004572:	f000 fcf9 	bl	8004f68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004576:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004578:	4618      	mov	r0, r3
 800457a:	3738      	adds	r7, #56	; 0x38
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	e000ed04 	.word	0xe000ed04

08004584 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	; 0x38
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	623b      	str	r3, [r7, #32]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <xQueueGiveFromISR+0x48>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61fb      	str	r3, [r7, #28]
}
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <xQueueGiveFromISR+0x58>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <xQueueGiveFromISR+0x5c>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <xQueueGiveFromISR+0x5e>
 80045e0:	2300      	movs	r3, #0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <xQueueGiveFromISR+0x78>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	61bb      	str	r3, [r7, #24]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045fc:	f001 fc84 	bl	8005f08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004600:	f3ef 8211 	mrs	r2, BASEPRI
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	617a      	str	r2, [r7, #20]
 8004616:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004618:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004628:	429a      	cmp	r2, r3
 800462a:	d22b      	bcs.n	8004684 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800463e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d112      	bne.n	800466e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d016      	beq.n	800467e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	3324      	adds	r3, #36	; 0x24
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fe61 	bl	800531c <xTaskRemoveFromEventList>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e007      	b.n	800467e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800466e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004672:	3301      	adds	r3, #1
 8004674:	b2db      	uxtb	r3, r3
 8004676:	b25a      	sxtb	r2, r3
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800467e:	2301      	movs	r3, #1
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
 8004682:	e001      	b.n	8004688 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004684:	2300      	movs	r3, #0
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004692:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004696:	4618      	mov	r0, r3
 8004698:	3738      	adds	r7, #56	; 0x38
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08e      	sub	sp, #56	; 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	623b      	str	r3, [r7, #32]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	61fb      	str	r3, [r7, #28]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046f0:	f000 ffd6 	bl	80056a0 <xTaskGetSchedulerState>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <xQueueSemaphoreTake+0x60>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <xQueueSemaphoreTake+0x64>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <xQueueSemaphoreTake+0x66>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	61bb      	str	r3, [r7, #24]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004720:	f001 fb10 	bl	8005d44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	2b00      	cmp	r3, #0
 800472e:	d024      	beq.n	800477a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	1e5a      	subs	r2, r3, #1
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004740:	f001 f956 	bl	80059f0 <pvTaskIncrementMutexHeldCount>
 8004744:	4602      	mov	r2, r0
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00f      	beq.n	8004772 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	3310      	adds	r3, #16
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fde0 	bl	800531c <xTaskRemoveFromEventList>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004762:	4b54      	ldr	r3, [pc, #336]	; (80048b4 <xQueueSemaphoreTake+0x214>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004772:	f001 fb17 	bl	8005da4 <vPortExitCritical>
				return pdPASS;
 8004776:	2301      	movs	r3, #1
 8004778:	e097      	b.n	80048aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	617b      	str	r3, [r7, #20]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800479c:	f001 fb02 	bl	8005da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e082      	b.n	80048aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fe16 	bl	80053e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047b8:	f001 faf4 	bl	8005da4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047bc:	f000 fbc6 	bl	8004f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047c0:	f001 fac0 	bl	8005d44 <vPortEnterCritical>
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d103      	bne.n	80047da <xQueueSemaphoreTake+0x13a>
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e0:	b25b      	sxtb	r3, r3
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d103      	bne.n	80047f0 <xQueueSemaphoreTake+0x150>
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f0:	f001 fad8 	bl	8005da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f4:	463a      	mov	r2, r7
 80047f6:	f107 030c 	add.w	r3, r7, #12
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fe05 	bl	800540c <xTaskCheckForTimeOut>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d132      	bne.n	800486e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800480a:	f000 f929 	bl	8004a60 <prvIsQueueEmpty>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d026      	beq.n	8004862 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800481c:	f001 fa92 	bl	8005d44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 ff59 	bl	80056dc <xTaskPriorityInherit>
 800482a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800482c:	f001 faba 	bl	8005da4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	3324      	adds	r3, #36	; 0x24
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fd4b 	bl	80052d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800483e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004840:	f000 f8bc 	bl	80049bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004844:	f000 fb90 	bl	8004f68 <xTaskResumeAll>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	f47f af68 	bne.w	8004720 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004850:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <xQueueSemaphoreTake+0x214>)
 8004852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	e75e      	b.n	8004720 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004864:	f000 f8aa 	bl	80049bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004868:	f000 fb7e 	bl	8004f68 <xTaskResumeAll>
 800486c:	e758      	b.n	8004720 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800486e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004870:	f000 f8a4 	bl	80049bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004874:	f000 fb78 	bl	8004f68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800487a:	f000 f8f1 	bl	8004a60 <prvIsQueueEmpty>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	f43f af4d 	beq.w	8004720 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800488c:	f001 fa5a 	bl	8005d44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004892:	f000 f811 	bl	80048b8 <prvGetDisinheritPriorityAfterTimeout>
 8004896:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 f818 	bl	80058d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048a4:	f001 fa7e 	bl	8005da4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3738      	adds	r7, #56	; 0x38
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1c3 0307 	rsb	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e001      	b.n	80048da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048da:	68fb      	ldr	r3, [r7, #12]
	}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10d      	bne.n	8004922 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d14d      	bne.n	80049aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 ff58 	bl	80057c8 <xTaskPriorityDisinherit>
 8004918:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	e043      	b.n	80049aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d119      	bne.n	800495c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6858      	ldr	r0, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	461a      	mov	r2, r3
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	f001 fd3e 	bl	80063b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	441a      	add	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d32b      	bcc.n	80049aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	e026      	b.n	80049aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68d8      	ldr	r0, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	461a      	mov	r2, r3
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	f001 fd24 	bl	80063b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	425b      	negs	r3, r3
 8004976:	441a      	add	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d207      	bcs.n	8004998 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	425b      	negs	r3, r3
 8004992:	441a      	add	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d105      	bne.n	80049aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049b2:	697b      	ldr	r3, [r7, #20]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049c4:	f001 f9be 	bl	8005d44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049d0:	e011      	b.n	80049f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d012      	beq.n	8004a00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3324      	adds	r3, #36	; 0x24
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fc9c 	bl	800531c <xTaskRemoveFromEventList>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049ea:	f000 fd71 	bl	80054d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	dce9      	bgt.n	80049d2 <prvUnlockQueue+0x16>
 80049fe:	e000      	b.n	8004a02 <prvUnlockQueue+0x46>
					break;
 8004a00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a0a:	f001 f9cb 	bl	8005da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a0e:	f001 f999 	bl	8005d44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a1a:	e011      	b.n	8004a40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d012      	beq.n	8004a4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3310      	adds	r3, #16
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fc77 	bl	800531c <xTaskRemoveFromEventList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a34:	f000 fd4c 	bl	80054d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a38:	7bbb      	ldrb	r3, [r7, #14]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	dce9      	bgt.n	8004a1c <prvUnlockQueue+0x60>
 8004a48:	e000      	b.n	8004a4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	22ff      	movs	r2, #255	; 0xff
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a54:	f001 f9a6 	bl	8005da4 <vPortExitCritical>
}
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a68:	f001 f96c 	bl	8005d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e001      	b.n	8004a7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a7e:	f001 f991 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 8004a82:	68fb      	ldr	r3, [r7, #12]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a94:	f001 f956 	bl	8005d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d102      	bne.n	8004aaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e001      	b.n	8004aae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aae:	f001 f979 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08e      	sub	sp, #56	; 0x38
 8004ac0:	af04      	add	r7, sp, #16
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	623b      	str	r3, [r7, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xTaskCreateStatic+0x46>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	61fb      	str	r3, [r7, #28]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b02:	23b4      	movs	r3, #180	; 0xb4
 8004b04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2bb4      	cmp	r3, #180	; 0xb4
 8004b0a:	d00a      	beq.n	8004b22 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	61bb      	str	r3, [r7, #24]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01e      	beq.n	8004b68 <xTaskCreateStatic+0xac>
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01b      	beq.n	8004b68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b42:	2300      	movs	r3, #0
 8004b44:	9303      	str	r3, [sp, #12]
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f850 	bl	8004c00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b62:	f000 f8eb 	bl	8004d3c <prvAddNewTaskToReadyList>
 8004b66:	e001      	b.n	8004b6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b6c:	697b      	ldr	r3, [r7, #20]
	}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3728      	adds	r7, #40	; 0x28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08c      	sub	sp, #48	; 0x30
 8004b7a:	af04      	add	r7, sp, #16
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 f9fc 	bl	8005f88 <pvPortMalloc>
 8004b90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b98:	20b4      	movs	r0, #180	; 0xb4
 8004b9a:	f001 f9f5 	bl	8005f88 <pvPortMalloc>
 8004b9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
 8004bac:	e005      	b.n	8004bba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bae:	6978      	ldr	r0, [r7, #20]
 8004bb0:	f001 fab6 	bl	8006120 <vPortFree>
 8004bb4:	e001      	b.n	8004bba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d017      	beq.n	8004bf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bc8:	88fa      	ldrh	r2, [r7, #6]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9303      	str	r3, [sp, #12]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f80e 	bl	8004c00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004be4:	69f8      	ldr	r0, [r7, #28]
 8004be6:	f000 f8a9 	bl	8004d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	e002      	b.n	8004bf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
	}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f023 0307 	bic.w	r3, r3, #7
 8004c26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	617b      	str	r3, [r7, #20]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01f      	beq.n	8004c8e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e012      	b.n	8004c7a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	7819      	ldrb	r1, [r3, #0]
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	3334      	adds	r3, #52	; 0x34
 8004c64:	460a      	mov	r2, r1
 8004c66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	3301      	adds	r3, #1
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d9e9      	bls.n	8004c54 <prvInitialiseNewTask+0x54>
 8004c80:	e000      	b.n	8004c84 <prvInitialiseNewTask+0x84>
			{
				break;
 8004c82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c8c:	e003      	b.n	8004c96 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d901      	bls.n	8004ca0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c9c:	2306      	movs	r3, #6
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004caa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	2200      	movs	r2, #0
 8004cb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fa0f 	bl	80040da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	3318      	adds	r3, #24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fa0a 	bl	80040da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	f1c3 0207 	rsb	r2, r3, #7
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	334c      	adds	r3, #76	; 0x4c
 8004cf0:	2260      	movs	r2, #96	; 0x60
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 fb6b 	bl	80063d0 <memset>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <prvInitialiseNewTask+0x130>)
 8004cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <prvInitialiseNewTask+0x134>)
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	4a0b      	ldr	r2, [pc, #44]	; (8004d38 <prvInitialiseNewTask+0x138>)
 8004d0a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	69b8      	ldr	r0, [r7, #24]
 8004d12:	f000 fee7 	bl	8005ae4 <pxPortInitialiseStack>
 8004d16:	4602      	mov	r2, r0
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d28:	bf00      	nop
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08006e1c 	.word	0x08006e1c
 8004d34:	08006e3c 	.word	0x08006e3c
 8004d38:	08006dfc 	.word	0x08006dfc

08004d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d44:	f000 fffe 	bl	8005d44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <prvAddNewTaskToReadyList+0xb8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <prvAddNewTaskToReadyList+0xb8>)
 8004d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d52:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <prvAddNewTaskToReadyList+0xbc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d5a:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <prvAddNewTaskToReadyList+0xbc>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d60:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <prvAddNewTaskToReadyList+0xb8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d110      	bne.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d68:	f000 fbd8 	bl	800551c <prvInitialiseTaskLists>
 8004d6c:	e00d      	b.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d6e:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <prvAddNewTaskToReadyList+0xc0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <prvAddNewTaskToReadyList+0xbc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d802      	bhi.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d84:	4a1c      	ldr	r2, [pc, #112]	; (8004df8 <prvAddNewTaskToReadyList+0xbc>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <prvAddNewTaskToReadyList+0xc4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <prvAddNewTaskToReadyList+0xc4>)
 8004d92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	2201      	movs	r2, #1
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <prvAddNewTaskToReadyList+0xcc>)
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f7ff f999 	bl	80040f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dc2:	f000 ffef 	bl	8005da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <prvAddNewTaskToReadyList+0xc0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00e      	beq.n	8004dec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <prvAddNewTaskToReadyList+0xbc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d207      	bcs.n	8004dec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <prvAddNewTaskToReadyList+0xd0>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	200005d8 	.word	0x200005d8
 8004df8:	200004d8 	.word	0x200004d8
 8004dfc:	200005e4 	.word	0x200005e4
 8004e00:	200005f4 	.word	0x200005f4
 8004e04:	200005e0 	.word	0x200005e0
 8004e08:	200004dc 	.word	0x200004dc
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d017      	beq.n	8004e52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e22:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <vTaskDelay+0x60>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <vTaskDelay+0x30>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	60bb      	str	r3, [r7, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e40:	f000 f884 	bl	8004f4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e44:	2100      	movs	r1, #0
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fde6 	bl	8005a18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e4c:	f000 f88c 	bl	8004f68 <xTaskResumeAll>
 8004e50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d107      	bne.n	8004e68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <vTaskDelay+0x64>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000600 	.word	0x20000600
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e86:	463a      	mov	r2, r7
 8004e88:	1d39      	adds	r1, r7, #4
 8004e8a:	f107 0308 	add.w	r3, r7, #8
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fb fb80 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	9202      	str	r2, [sp, #8]
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	460a      	mov	r2, r1
 8004ea6:	4921      	ldr	r1, [pc, #132]	; (8004f2c <vTaskStartScheduler+0xb4>)
 8004ea8:	4821      	ldr	r0, [pc, #132]	; (8004f30 <vTaskStartScheduler+0xb8>)
 8004eaa:	f7ff fe07 	bl	8004abc <xTaskCreateStatic>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <vTaskStartScheduler+0xbc>)
 8004eb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <vTaskStartScheduler+0xbc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e001      	b.n	8004ec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d11b      	bne.n	8004f04 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	613b      	str	r3, [r7, #16]
}
 8004ede:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ee0:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <vTaskStartScheduler+0xc0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	334c      	adds	r3, #76	; 0x4c
 8004ee6:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <vTaskStartScheduler+0xc4>)
 8004ee8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004eea:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <vTaskStartScheduler+0xc8>)
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <vTaskStartScheduler+0xcc>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <vTaskStartScheduler+0xd0>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004efe:	f000 fe7f 	bl	8005c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f02:	e00e      	b.n	8004f22 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d10a      	bne.n	8004f22 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60fb      	str	r3, [r7, #12]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <vTaskStartScheduler+0xa8>
}
 8004f22:	bf00      	nop
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	08006ddc 	.word	0x08006ddc
 8004f30:	080054e9 	.word	0x080054e9
 8004f34:	200005fc 	.word	0x200005fc
 8004f38:	200004d8 	.word	0x200004d8
 8004f3c:	20000010 	.word	0x20000010
 8004f40:	200005f8 	.word	0x200005f8
 8004f44:	200005e4 	.word	0x200005e4
 8004f48:	200005dc 	.word	0x200005dc

08004f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <vTaskSuspendAll+0x18>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a03      	ldr	r2, [pc, #12]	; (8004f64 <vTaskSuspendAll+0x18>)
 8004f58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f5a:	bf00      	nop
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000600 	.word	0x20000600

08004f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f76:	4b41      	ldr	r3, [pc, #260]	; (800507c <xTaskResumeAll+0x114>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	603b      	str	r3, [r7, #0]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f94:	f000 fed6 	bl	8005d44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f98:	4b38      	ldr	r3, [pc, #224]	; (800507c <xTaskResumeAll+0x114>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	4a37      	ldr	r2, [pc, #220]	; (800507c <xTaskResumeAll+0x114>)
 8004fa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa2:	4b36      	ldr	r3, [pc, #216]	; (800507c <xTaskResumeAll+0x114>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d161      	bne.n	800506e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004faa:	4b35      	ldr	r3, [pc, #212]	; (8005080 <xTaskResumeAll+0x118>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d05d      	beq.n	800506e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fb2:	e02e      	b.n	8005012 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb4:	4b33      	ldr	r3, [pc, #204]	; (8005084 <xTaskResumeAll+0x11c>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff f8f4 	bl	80041ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff f8ef 	bl	80041ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	409a      	lsls	r2, r3
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <xTaskResumeAll+0x120>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <xTaskResumeAll+0x120>)
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4a27      	ldr	r2, [pc, #156]	; (800508c <xTaskResumeAll+0x124>)
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f7ff f87b 	bl	80040f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005002:	4b23      	ldr	r3, [pc, #140]	; (8005090 <xTaskResumeAll+0x128>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <xTaskResumeAll+0x12c>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <xTaskResumeAll+0x11c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1cc      	bne.n	8004fb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005020:	f000 fb1e 	bl	8005660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005024:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <xTaskResumeAll+0x130>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d010      	beq.n	8005052 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005030:	f000 f836 	bl	80050a0 <xTaskIncrementTick>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <xTaskResumeAll+0x12c>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f1      	bne.n	8005030 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800504c:	4b12      	ldr	r3, [pc, #72]	; (8005098 <xTaskResumeAll+0x130>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <xTaskResumeAll+0x12c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800505a:	2301      	movs	r3, #1
 800505c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <xTaskResumeAll+0x134>)
 8005060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800506e:	f000 fe99 	bl	8005da4 <vPortExitCritical>

	return xAlreadyYielded;
 8005072:	68bb      	ldr	r3, [r7, #8]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20000600 	.word	0x20000600
 8005080:	200005d8 	.word	0x200005d8
 8005084:	20000598 	.word	0x20000598
 8005088:	200005e0 	.word	0x200005e0
 800508c:	200004dc 	.word	0x200004dc
 8005090:	200004d8 	.word	0x200004d8
 8005094:	200005ec 	.word	0x200005ec
 8005098:	200005e8 	.word	0x200005e8
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050aa:	4b4e      	ldr	r3, [pc, #312]	; (80051e4 <xTaskIncrementTick+0x144>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f040 808e 	bne.w	80051d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050b4:	4b4c      	ldr	r3, [pc, #304]	; (80051e8 <xTaskIncrementTick+0x148>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050bc:	4a4a      	ldr	r2, [pc, #296]	; (80051e8 <xTaskIncrementTick+0x148>)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d120      	bne.n	800510a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050c8:	4b48      	ldr	r3, [pc, #288]	; (80051ec <xTaskIncrementTick+0x14c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	603b      	str	r3, [r7, #0]
}
 80050e4:	bf00      	nop
 80050e6:	e7fe      	b.n	80050e6 <xTaskIncrementTick+0x46>
 80050e8:	4b40      	ldr	r3, [pc, #256]	; (80051ec <xTaskIncrementTick+0x14c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <xTaskIncrementTick+0x150>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a3e      	ldr	r2, [pc, #248]	; (80051ec <xTaskIncrementTick+0x14c>)
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	4a3e      	ldr	r2, [pc, #248]	; (80051f0 <xTaskIncrementTick+0x150>)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	4b3d      	ldr	r3, [pc, #244]	; (80051f4 <xTaskIncrementTick+0x154>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	4a3c      	ldr	r2, [pc, #240]	; (80051f4 <xTaskIncrementTick+0x154>)
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	f000 faab 	bl	8005660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800510a:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <xTaskIncrementTick+0x158>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	429a      	cmp	r2, r3
 8005112:	d348      	bcc.n	80051a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005114:	4b35      	ldr	r3, [pc, #212]	; (80051ec <xTaskIncrementTick+0x14c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <xTaskIncrementTick+0x158>)
 8005120:	f04f 32ff 	mov.w	r2, #4294967295
 8005124:	601a      	str	r2, [r3, #0]
					break;
 8005126:	e03e      	b.n	80051a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005128:	4b30      	ldr	r3, [pc, #192]	; (80051ec <xTaskIncrementTick+0x14c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d203      	bcs.n	8005148 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005140:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <xTaskIncrementTick+0x158>)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005146:	e02e      	b.n	80051a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	3304      	adds	r3, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff f82e 	bl	80041ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3318      	adds	r3, #24
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff f825 	bl	80041ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	2201      	movs	r2, #1
 800516a:	409a      	lsls	r2, r3
 800516c:	4b23      	ldr	r3, [pc, #140]	; (80051fc <xTaskIncrementTick+0x15c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4313      	orrs	r3, r2
 8005172:	4a22      	ldr	r2, [pc, #136]	; (80051fc <xTaskIncrementTick+0x15c>)
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <xTaskIncrementTick+0x160>)
 8005184:	441a      	add	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fe ffb1 	bl	80040f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <xTaskIncrementTick+0x164>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d3b9      	bcc.n	8005114 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a4:	e7b6      	b.n	8005114 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051a6:	4b17      	ldr	r3, [pc, #92]	; (8005204 <xTaskIncrementTick+0x164>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	4914      	ldr	r1, [pc, #80]	; (8005200 <xTaskIncrementTick+0x160>)
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d901      	bls.n	80051c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80051be:	2301      	movs	r3, #1
 80051c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051c2:	4b11      	ldr	r3, [pc, #68]	; (8005208 <xTaskIncrementTick+0x168>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e004      	b.n	80051da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051d0:	4b0e      	ldr	r3, [pc, #56]	; (800520c <xTaskIncrementTick+0x16c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	4a0d      	ldr	r2, [pc, #52]	; (800520c <xTaskIncrementTick+0x16c>)
 80051d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051da:	697b      	ldr	r3, [r7, #20]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000600 	.word	0x20000600
 80051e8:	200005dc 	.word	0x200005dc
 80051ec:	20000590 	.word	0x20000590
 80051f0:	20000594 	.word	0x20000594
 80051f4:	200005f0 	.word	0x200005f0
 80051f8:	200005f8 	.word	0x200005f8
 80051fc:	200005e0 	.word	0x200005e0
 8005200:	200004dc 	.word	0x200004dc
 8005204:	200004d8 	.word	0x200004d8
 8005208:	200005ec 	.word	0x200005ec
 800520c:	200005e8 	.word	0x200005e8

08005210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005216:	4b29      	ldr	r3, [pc, #164]	; (80052bc <vTaskSwitchContext+0xac>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800521e:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <vTaskSwitchContext+0xb0>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005224:	e044      	b.n	80052b0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005226:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <vTaskSwitchContext+0xb0>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522c:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <vTaskSwitchContext+0xb4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	fab3 f383 	clz	r3, r3
 8005238:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800523a:	7afb      	ldrb	r3, [r7, #11]
 800523c:	f1c3 031f 	rsb	r3, r3, #31
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	4921      	ldr	r1, [pc, #132]	; (80052c8 <vTaskSwitchContext+0xb8>)
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	607b      	str	r3, [r7, #4]
}
 8005268:	bf00      	nop
 800526a:	e7fe      	b.n	800526a <vTaskSwitchContext+0x5a>
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <vTaskSwitchContext+0xb8>)
 8005278:	4413      	add	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3308      	adds	r3, #8
 800528e:	429a      	cmp	r2, r3
 8005290:	d104      	bne.n	800529c <vTaskSwitchContext+0x8c>
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <vTaskSwitchContext+0xbc>)
 80052a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052a6:	4b09      	ldr	r3, [pc, #36]	; (80052cc <vTaskSwitchContext+0xbc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	334c      	adds	r3, #76	; 0x4c
 80052ac:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <vTaskSwitchContext+0xc0>)
 80052ae:	6013      	str	r3, [r2, #0]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	20000600 	.word	0x20000600
 80052c0:	200005ec 	.word	0x200005ec
 80052c4:	200005e0 	.word	0x200005e0
 80052c8:	200004dc 	.word	0x200004dc
 80052cc:	200004d8 	.word	0x200004d8
 80052d0:	20000010 	.word	0x20000010

080052d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60fb      	str	r3, [r7, #12]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052fa:	4b07      	ldr	r3, [pc, #28]	; (8005318 <vTaskPlaceOnEventList+0x44>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3318      	adds	r3, #24
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fe ff1a 	bl	800413c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005308:	2101      	movs	r1, #1
 800530a:	6838      	ldr	r0, [r7, #0]
 800530c:	f000 fb84 	bl	8005a18 <prvAddCurrentTaskToDelayedList>
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	200004d8 	.word	0x200004d8

0800531c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	60fb      	str	r3, [r7, #12]
}
 8005344:	bf00      	nop
 8005346:	e7fe      	b.n	8005346 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	3318      	adds	r3, #24
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe ff2e 	bl	80041ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <xTaskRemoveFromEventList+0xac>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d11c      	bne.n	8005394 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3304      	adds	r3, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe ff25 	bl	80041ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	4b17      	ldr	r3, [pc, #92]	; (80053cc <xTaskRemoveFromEventList+0xb0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4313      	orrs	r3, r2
 8005372:	4a16      	ldr	r2, [pc, #88]	; (80053cc <xTaskRemoveFromEventList+0xb0>)
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <xTaskRemoveFromEventList+0xb4>)
 8005384:	441a      	add	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f7fe feb1 	bl	80040f4 <vListInsertEnd>
 8005392:	e005      	b.n	80053a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	3318      	adds	r3, #24
 8005398:	4619      	mov	r1, r3
 800539a:	480e      	ldr	r0, [pc, #56]	; (80053d4 <xTaskRemoveFromEventList+0xb8>)
 800539c:	f7fe feaa 	bl	80040f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <xTaskRemoveFromEventList+0xbc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d905      	bls.n	80053ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053b2:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <xTaskRemoveFromEventList+0xc0>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e001      	b.n	80053be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053be:	697b      	ldr	r3, [r7, #20]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000600 	.word	0x20000600
 80053cc:	200005e0 	.word	0x200005e0
 80053d0:	200004dc 	.word	0x200004dc
 80053d4:	20000598 	.word	0x20000598
 80053d8:	200004d8 	.word	0x200004d8
 80053dc:	200005ec 	.word	0x200005ec

080053e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <vTaskInternalSetTimeOutState+0x24>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <vTaskInternalSetTimeOutState+0x28>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	605a      	str	r2, [r3, #4]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	200005f0 	.word	0x200005f0
 8005408:	200005dc 	.word	0x200005dc

0800540c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	613b      	str	r3, [r7, #16]
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	60fb      	str	r3, [r7, #12]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800544e:	f000 fc79 	bl	8005d44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005452:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <xTaskCheckForTimeOut+0xbc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d102      	bne.n	8005472 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e023      	b.n	80054ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <xTaskCheckForTimeOut+0xc0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d007      	beq.n	800548e <xTaskCheckForTimeOut+0x82>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	429a      	cmp	r2, r3
 8005486:	d302      	bcc.n	800548e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005488:	2301      	movs	r3, #1
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e015      	b.n	80054ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	429a      	cmp	r2, r3
 8005496:	d20b      	bcs.n	80054b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff ff9b 	bl	80053e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	e004      	b.n	80054ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054ba:	f000 fc73 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 80054be:	69fb      	ldr	r3, [r7, #28]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	200005dc 	.word	0x200005dc
 80054cc:	200005f0 	.word	0x200005f0

080054d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <vTaskMissedYield+0x14>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
}
 80054da:	bf00      	nop
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	200005ec 	.word	0x200005ec

080054e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054f0:	f000 f854 	bl	800559c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054f4:	4b07      	ldr	r3, [pc, #28]	; (8005514 <prvIdleTask+0x2c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d907      	bls.n	800550c <prvIdleTask+0x24>
			{
				taskYIELD();
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <prvIdleTask+0x30>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800550c:	f7fb f83a 	bl	8000584 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005510:	e7ee      	b.n	80054f0 <prvIdleTask+0x8>
 8005512:	bf00      	nop
 8005514:	200004dc 	.word	0x200004dc
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	e00c      	b.n	8005542 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4a12      	ldr	r2, [pc, #72]	; (800557c <prvInitialiseTaskLists+0x60>)
 8005534:	4413      	add	r3, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe fdaf 	bl	800409a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3301      	adds	r3, #1
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b06      	cmp	r3, #6
 8005546:	d9ef      	bls.n	8005528 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005548:	480d      	ldr	r0, [pc, #52]	; (8005580 <prvInitialiseTaskLists+0x64>)
 800554a:	f7fe fda6 	bl	800409a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800554e:	480d      	ldr	r0, [pc, #52]	; (8005584 <prvInitialiseTaskLists+0x68>)
 8005550:	f7fe fda3 	bl	800409a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005554:	480c      	ldr	r0, [pc, #48]	; (8005588 <prvInitialiseTaskLists+0x6c>)
 8005556:	f7fe fda0 	bl	800409a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800555a:	480c      	ldr	r0, [pc, #48]	; (800558c <prvInitialiseTaskLists+0x70>)
 800555c:	f7fe fd9d 	bl	800409a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005560:	480b      	ldr	r0, [pc, #44]	; (8005590 <prvInitialiseTaskLists+0x74>)
 8005562:	f7fe fd9a 	bl	800409a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <prvInitialiseTaskLists+0x78>)
 8005568:	4a05      	ldr	r2, [pc, #20]	; (8005580 <prvInitialiseTaskLists+0x64>)
 800556a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <prvInitialiseTaskLists+0x7c>)
 800556e:	4a05      	ldr	r2, [pc, #20]	; (8005584 <prvInitialiseTaskLists+0x68>)
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	200004dc 	.word	0x200004dc
 8005580:	20000568 	.word	0x20000568
 8005584:	2000057c 	.word	0x2000057c
 8005588:	20000598 	.word	0x20000598
 800558c:	200005ac 	.word	0x200005ac
 8005590:	200005c4 	.word	0x200005c4
 8005594:	20000590 	.word	0x20000590
 8005598:	20000594 	.word	0x20000594

0800559c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055a2:	e019      	b.n	80055d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055a4:	f000 fbce 	bl	8005d44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <prvCheckTasksWaitingTermination+0x50>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe fdfa 	bl	80041ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <prvCheckTasksWaitingTermination+0x54>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3b01      	subs	r3, #1
 80055c0:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <prvCheckTasksWaitingTermination+0x54>)
 80055c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055c4:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ce:	f000 fbe9 	bl	8005da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f810 	bl	80055f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e1      	bne.n	80055a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	200005ac 	.word	0x200005ac
 80055f0:	200005d8 	.word	0x200005d8
 80055f4:	200005c0 	.word	0x200005c0

080055f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	334c      	adds	r3, #76	; 0x4c
 8005604:	4618      	mov	r0, r3
 8005606:	f000 ff8d 	bl	8006524 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d108      	bne.n	8005626 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fd81 	bl	8006120 <vPortFree>
				vPortFree( pxTCB );
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fd7e 	bl	8006120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005624:	e018      	b.n	8005658 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800562c:	2b01      	cmp	r3, #1
 800562e:	d103      	bne.n	8005638 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fd75 	bl	8006120 <vPortFree>
	}
 8005636:	e00f      	b.n	8005658 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800563e:	2b02      	cmp	r3, #2
 8005640:	d00a      	beq.n	8005658 <prvDeleteTCB+0x60>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60fb      	str	r3, [r7, #12]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <prvDeleteTCB+0x5e>
	}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <prvResetNextTaskUnblockTime+0x38>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <prvResetNextTaskUnblockTime+0x3c>)
 8005672:	f04f 32ff 	mov.w	r2, #4294967295
 8005676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005678:	e008      	b.n	800568c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <prvResetNextTaskUnblockTime+0x38>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <prvResetNextTaskUnblockTime+0x3c>)
 800568a:	6013      	str	r3, [r2, #0]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000590 	.word	0x20000590
 800569c:	200005f8 	.word	0x200005f8

080056a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <xTaskGetSchedulerState+0x34>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ae:	2301      	movs	r3, #1
 80056b0:	607b      	str	r3, [r7, #4]
 80056b2:	e008      	b.n	80056c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <xTaskGetSchedulerState+0x38>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056bc:	2302      	movs	r3, #2
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	e001      	b.n	80056c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056c2:	2300      	movs	r3, #0
 80056c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056c6:	687b      	ldr	r3, [r7, #4]
	}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	200005e4 	.word	0x200005e4
 80056d8:	20000600 	.word	0x20000600

080056dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d05e      	beq.n	80057b0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <xTaskPriorityInherit+0xe0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d24e      	bcs.n	800579e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	db06      	blt.n	8005716 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005708:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <xTaskPriorityInherit+0xe0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f1c3 0207 	rsb	r2, r3, #7
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6959      	ldr	r1, [r3, #20]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4a26      	ldr	r2, [pc, #152]	; (80057c0 <xTaskPriorityInherit+0xe4>)
 8005728:	4413      	add	r3, r2
 800572a:	4299      	cmp	r1, r3
 800572c:	d12f      	bne.n	800578e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	3304      	adds	r3, #4
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fd3b 	bl	80041ae <uxListRemove>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	2201      	movs	r2, #1
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43da      	mvns	r2, r3
 800574a:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <xTaskPriorityInherit+0xe8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4013      	ands	r3, r2
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <xTaskPriorityInherit+0xe8>)
 8005752:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <xTaskPriorityInherit+0xe0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	2201      	movs	r2, #1
 8005764:	409a      	lsls	r2, r3
 8005766:	4b17      	ldr	r3, [pc, #92]	; (80057c4 <xTaskPriorityInherit+0xe8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4313      	orrs	r3, r2
 800576c:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <xTaskPriorityInherit+0xe8>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4a10      	ldr	r2, [pc, #64]	; (80057c0 <xTaskPriorityInherit+0xe4>)
 800577e:	441a      	add	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7fe fcb4 	bl	80040f4 <vListInsertEnd>
 800578c:	e004      	b.n	8005798 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800578e:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <xTaskPriorityInherit+0xe0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e008      	b.n	80057b0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <xTaskPriorityInherit+0xe0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d201      	bcs.n	80057b0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057b0:	68fb      	ldr	r3, [r7, #12]
	}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200004d8 	.word	0x200004d8
 80057c0:	200004dc 	.word	0x200004dc
 80057c4:	200005e0 	.word	0x200005e0

080057c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d06e      	beq.n	80058bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057de:	4b3a      	ldr	r3, [pc, #232]	; (80058c8 <xTaskPriorityDisinherit+0x100>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d00a      	beq.n	80057fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	60fb      	str	r3, [r7, #12]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60bb      	str	r3, [r7, #8]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005820:	1e5a      	subs	r2, r3, #1
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	429a      	cmp	r2, r3
 8005830:	d044      	beq.n	80058bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005836:	2b00      	cmp	r3, #0
 8005838:	d140      	bne.n	80058bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3304      	adds	r3, #4
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe fcb5 	bl	80041ae <uxListRemove>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d115      	bne.n	8005876 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	491f      	ldr	r1, [pc, #124]	; (80058cc <xTaskPriorityDisinherit+0x104>)
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xTaskPriorityDisinherit+0xae>
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	2201      	movs	r2, #1
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43da      	mvns	r2, r3
 800586c:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <xTaskPriorityDisinherit+0x108>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4013      	ands	r3, r2
 8005872:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <xTaskPriorityDisinherit+0x108>)
 8005874:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	f1c3 0207 	rsb	r2, r3, #7
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	2201      	movs	r2, #1
 8005890:	409a      	lsls	r2, r3
 8005892:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <xTaskPriorityDisinherit+0x108>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4313      	orrs	r3, r2
 8005898:	4a0d      	ldr	r2, [pc, #52]	; (80058d0 <xTaskPriorityDisinherit+0x108>)
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4a08      	ldr	r2, [pc, #32]	; (80058cc <xTaskPriorityDisinherit+0x104>)
 80058aa:	441a      	add	r2, r3
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7fe fc1e 	bl	80040f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058bc:	697b      	ldr	r3, [r7, #20]
	}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	200004d8 	.word	0x200004d8
 80058cc:	200004dc 	.word	0x200004dc
 80058d0:	200005e0 	.word	0x200005e0

080058d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80058e2:	2301      	movs	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d077      	beq.n	80059dc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	60fb      	str	r3, [r7, #12]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d902      	bls.n	800591a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e002      	b.n	8005920 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	429a      	cmp	r2, r3
 8005928:	d058      	beq.n	80059dc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	429a      	cmp	r2, r3
 8005932:	d153      	bne.n	80059dc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	429a      	cmp	r2, r3
 800593c:	d10a      	bne.n	8005954 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	60bb      	str	r3, [r7, #8]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	db04      	blt.n	8005972 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f1c3 0207 	rsb	r2, r3, #7
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	6959      	ldr	r1, [r3, #20]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005982:	4413      	add	r3, r2
 8005984:	4299      	cmp	r1, r3
 8005986:	d129      	bne.n	80059dc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	3304      	adds	r3, #4
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe fc0e 	bl	80041ae <uxListRemove>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	2201      	movs	r2, #1
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43da      	mvns	r2, r3
 80059a4:	4b11      	ldr	r3, [pc, #68]	; (80059ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4013      	ands	r3, r2
 80059aa:	4a10      	ldr	r2, [pc, #64]	; (80059ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80059ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	2201      	movs	r2, #1
 80059b4:	409a      	lsls	r2, r3
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	4a0b      	ldr	r2, [pc, #44]	; (80059ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4a06      	ldr	r2, [pc, #24]	; (80059e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80059ce:	441a      	add	r2, r3
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f7fe fb8c 	bl	80040f4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059dc:	bf00      	nop
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	200004d8 	.word	0x200004d8
 80059e8:	200004dc 	.word	0x200004dc
 80059ec:	200005e0 	.word	0x200005e0

080059f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <pvTaskIncrementMutexHeldCount+0x24>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <pvTaskIncrementMutexHeldCount+0x24>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a02:	3201      	adds	r2, #1
 8005a04:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005a06:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a08:	681b      	ldr	r3, [r3, #0]
	}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	200004d8 	.word	0x200004d8

08005a18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a22:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fbbd 	bl	80041ae <uxListRemove>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a3a:	4b24      	ldr	r3, [pc, #144]	; (8005acc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	2201      	movs	r2, #1
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	43da      	mvns	r2, r3
 8005a48:	4b21      	ldr	r3, [pc, #132]	; (8005ad0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	4a20      	ldr	r2, [pc, #128]	; (8005ad0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d10a      	bne.n	8005a70 <prvAddCurrentTaskToDelayedList+0x58>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a60:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	481a      	ldr	r0, [pc, #104]	; (8005ad4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a6a:	f7fe fb43 	bl	80040f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a6e:	e026      	b.n	8005abe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4413      	add	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a78:	4b14      	ldr	r3, [pc, #80]	; (8005acc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d209      	bcs.n	8005a9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a88:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fe fb51 	bl	800413c <vListInsert>
}
 8005a9a:	e010      	b.n	8005abe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7fe fb47 	bl	800413c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d202      	bcs.n	8005abe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6013      	str	r3, [r2, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200005dc 	.word	0x200005dc
 8005acc:	200004d8 	.word	0x200004d8
 8005ad0:	200005e0 	.word	0x200005e0
 8005ad4:	200005c4 	.word	0x200005c4
 8005ad8:	20000594 	.word	0x20000594
 8005adc:	20000590 	.word	0x20000590
 8005ae0:	200005f8 	.word	0x200005f8

08005ae4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3b04      	subs	r3, #4
 8005af4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3b04      	subs	r3, #4
 8005b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3b04      	subs	r3, #4
 8005b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b14:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <pxPortInitialiseStack+0x64>)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3b14      	subs	r3, #20
 8005b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3b04      	subs	r3, #4
 8005b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f06f 0202 	mvn.w	r2, #2
 8005b32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3b20      	subs	r3, #32
 8005b38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	08005b4d 	.word	0x08005b4d

08005b4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <prvTaskExitError+0x54>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d00a      	beq.n	8005b76 <prvTaskExitError+0x2a>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	60fb      	str	r3, [r7, #12]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <prvTaskExitError+0x28>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60bb      	str	r3, [r7, #8]
}
 8005b88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b8a:	bf00      	nop
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0fc      	beq.n	8005b8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	2000000c 	.word	0x2000000c
	...

08005bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <pxCurrentTCBConst2>)
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	6808      	ldr	r0, [r1, #0]
 8005bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	f380 8809 	msr	PSP, r0
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f380 8811 	msr	BASEPRI, r0
 8005bca:	4770      	bx	lr
 8005bcc:	f3af 8000 	nop.w

08005bd0 <pxCurrentTCBConst2>:
 8005bd0:	200004d8 	.word	0x200004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop

08005bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bd8:	4808      	ldr	r0, [pc, #32]	; (8005bfc <prvPortStartFirstTask+0x24>)
 8005bda:	6800      	ldr	r0, [r0, #0]
 8005bdc:	6800      	ldr	r0, [r0, #0]
 8005bde:	f380 8808 	msr	MSP, r0
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f380 8814 	msr	CONTROL, r0
 8005bea:	b662      	cpsie	i
 8005bec:	b661      	cpsie	f
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	df00      	svc	0
 8005bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bfa:	bf00      	nop
 8005bfc:	e000ed08 	.word	0xe000ed08

08005c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c06:	4b46      	ldr	r3, [pc, #280]	; (8005d20 <xPortStartScheduler+0x120>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a46      	ldr	r2, [pc, #280]	; (8005d24 <xPortStartScheduler+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10a      	bne.n	8005c26 <xPortStartScheduler+0x26>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	613b      	str	r3, [r7, #16]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c26:	4b3e      	ldr	r3, [pc, #248]	; (8005d20 <xPortStartScheduler+0x120>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3f      	ldr	r2, [pc, #252]	; (8005d28 <xPortStartScheduler+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10a      	bne.n	8005c46 <xPortStartScheduler+0x46>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c46:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005c48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <xPortStartScheduler+0x130>)
 8005c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c70:	2207      	movs	r2, #7
 8005c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c74:	e009      	b.n	8005c8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c76:	4b2f      	ldr	r3, [pc, #188]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c92:	2b80      	cmp	r3, #128	; 0x80
 8005c94:	d0ef      	beq.n	8005c76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c96:	4b27      	ldr	r3, [pc, #156]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1c3 0307 	rsb	r3, r3, #7
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d00a      	beq.n	8005cb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60bb      	str	r3, [r7, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cb8:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <xPortStartScheduler+0x134>)
 8005ccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cd6:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <xPortStartScheduler+0x138>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <xPortStartScheduler+0x138>)
 8005cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <xPortStartScheduler+0x138>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <xPortStartScheduler+0x138>)
 8005ce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cee:	f000 f8dd 	bl	8005eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cf2:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <xPortStartScheduler+0x13c>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cf8:	f000 f8fc 	bl	8005ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cfc:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <xPortStartScheduler+0x140>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <xPortStartScheduler+0x140>)
 8005d02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d08:	f7ff ff66 	bl	8005bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d0c:	f7ff fa80 	bl	8005210 <vTaskSwitchContext>
	prvTaskExitError();
 8005d10:	f7ff ff1c 	bl	8005b4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed00 	.word	0xe000ed00
 8005d24:	410fc271 	.word	0x410fc271
 8005d28:	410fc270 	.word	0x410fc270
 8005d2c:	e000e400 	.word	0xe000e400
 8005d30:	20000604 	.word	0x20000604
 8005d34:	20000608 	.word	0x20000608
 8005d38:	e000ed20 	.word	0xe000ed20
 8005d3c:	2000000c 	.word	0x2000000c
 8005d40:	e000ef34 	.word	0xe000ef34

08005d44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	607b      	str	r3, [r7, #4]
}
 8005d5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d10f      	bne.n	8005d90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <vPortEnterCritical+0x5c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	603b      	str	r3, [r7, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <vPortEnterCritical+0x4a>
	}
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	2000000c 	.word	0x2000000c
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <vPortExitCritical+0x50>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <vPortExitCritical+0x24>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	607b      	str	r3, [r7, #4]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <vPortExitCritical+0x50>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <vPortExitCritical+0x50>)
 8005dd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <vPortExitCritical+0x50>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <vPortExitCritical+0x42>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f383 8811 	msr	BASEPRI, r3
}
 8005de4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	2000000c 	.word	0x2000000c
	...

08005e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e00:	f3ef 8009 	mrs	r0, PSP
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <pxCurrentTCBConst>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	f01e 0f10 	tst.w	lr, #16
 8005e10:	bf08      	it	eq
 8005e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1a:	6010      	str	r0, [r2, #0]
 8005e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e24:	f380 8811 	msr	BASEPRI, r0
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f7ff f9ee 	bl	8005210 <vTaskSwitchContext>
 8005e34:	f04f 0000 	mov.w	r0, #0
 8005e38:	f380 8811 	msr	BASEPRI, r0
 8005e3c:	bc09      	pop	{r0, r3}
 8005e3e:	6819      	ldr	r1, [r3, #0]
 8005e40:	6808      	ldr	r0, [r1, #0]
 8005e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e46:	f01e 0f10 	tst.w	lr, #16
 8005e4a:	bf08      	it	eq
 8005e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e50:	f380 8809 	msr	PSP, r0
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	f3af 8000 	nop.w

08005e60 <pxCurrentTCBConst>:
 8005e60:	200004d8 	.word	0x200004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop

08005e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	607b      	str	r3, [r7, #4]
}
 8005e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e82:	f7ff f90d 	bl	80050a0 <xTaskIncrementTick>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <SysTick_Handler+0x40>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <vPortSetupTimerInterrupt+0x34>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <vPortSetupTimerInterrupt+0x38>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <vPortSetupTimerInterrupt+0x3c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <vPortSetupTimerInterrupt+0x40>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	099b      	lsrs	r3, r3, #6
 8005ec8:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <vPortSetupTimerInterrupt+0x44>)
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ece:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <vPortSetupTimerInterrupt+0x34>)
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	e000e010 	.word	0xe000e010
 8005ee4:	e000e018 	.word	0xe000e018
 8005ee8:	20000000 	.word	0x20000000
 8005eec:	10624dd3 	.word	0x10624dd3
 8005ef0:	e000e014 	.word	0xe000e014

08005ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f04 <vPortEnableVFP+0x10>
 8005ef8:	6801      	ldr	r1, [r0, #0]
 8005efa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005efe:	6001      	str	r1, [r0, #0]
 8005f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f02:	bf00      	nop
 8005f04:	e000ed88 	.word	0xe000ed88

08005f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f0e:	f3ef 8305 	mrs	r3, IPSR
 8005f12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b0f      	cmp	r3, #15
 8005f18:	d914      	bls.n	8005f44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <vPortValidateInterruptPriority+0x70>)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f24:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <vPortValidateInterruptPriority+0x74>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	7afa      	ldrb	r2, [r7, #11]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d20a      	bcs.n	8005f44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <vPortValidateInterruptPriority+0x78>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <vPortValidateInterruptPriority+0x7c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d90a      	bls.n	8005f6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	603b      	str	r3, [r7, #0]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <vPortValidateInterruptPriority+0x60>
	}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e000e3f0 	.word	0xe000e3f0
 8005f7c:	20000604 	.word	0x20000604
 8005f80:	e000ed0c 	.word	0xe000ed0c
 8005f84:	20000608 	.word	0x20000608

08005f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f94:	f7fe ffda 	bl	8004f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f98:	4b5b      	ldr	r3, [pc, #364]	; (8006108 <pvPortMalloc+0x180>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fa0:	f000 f920 	bl	80061e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fa4:	4b59      	ldr	r3, [pc, #356]	; (800610c <pvPortMalloc+0x184>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 8093 	bne.w	80060d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01d      	beq.n	8005ff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fb8:	2208      	movs	r2, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d014      	beq.n	8005ff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f023 0307 	bic.w	r3, r3, #7
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	617b      	str	r3, [r7, #20]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d06e      	beq.n	80060d8 <pvPortMalloc+0x150>
 8005ffa:	4b45      	ldr	r3, [pc, #276]	; (8006110 <pvPortMalloc+0x188>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d869      	bhi.n	80060d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006004:	4b43      	ldr	r3, [pc, #268]	; (8006114 <pvPortMalloc+0x18c>)
 8006006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006008:	4b42      	ldr	r3, [pc, #264]	; (8006114 <pvPortMalloc+0x18c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800600e:	e004      	b.n	800601a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d903      	bls.n	800602c <pvPortMalloc+0xa4>
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f1      	bne.n	8006010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800602c:	4b36      	ldr	r3, [pc, #216]	; (8006108 <pvPortMalloc+0x180>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006032:	429a      	cmp	r2, r3
 8006034:	d050      	beq.n	80060d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2208      	movs	r2, #8
 800603c:	4413      	add	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	2308      	movs	r3, #8
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	429a      	cmp	r2, r3
 8006056:	d91f      	bls.n	8006098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <pvPortMalloc+0xf8>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	613b      	str	r3, [r7, #16]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006092:	69b8      	ldr	r0, [r7, #24]
 8006094:	f000 f908 	bl	80062a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006098:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <pvPortMalloc+0x188>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <pvPortMalloc+0x188>)
 80060a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060a6:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <pvPortMalloc+0x188>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <pvPortMalloc+0x190>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d203      	bcs.n	80060ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060b2:	4b17      	ldr	r3, [pc, #92]	; (8006110 <pvPortMalloc+0x188>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <pvPortMalloc+0x190>)
 80060b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <pvPortMalloc+0x184>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <pvPortMalloc+0x194>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	4a11      	ldr	r2, [pc, #68]	; (800611c <pvPortMalloc+0x194>)
 80060d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060d8:	f7fe ff46 	bl	8004f68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <pvPortMalloc+0x174>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	60fb      	str	r3, [r7, #12]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <pvPortMalloc+0x172>
	return pvReturn;
 80060fc:	69fb      	ldr	r3, [r7, #28]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3728      	adds	r7, #40	; 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20004214 	.word	0x20004214
 800610c:	20004228 	.word	0x20004228
 8006110:	20004218 	.word	0x20004218
 8006114:	2000420c 	.word	0x2000420c
 8006118:	2000421c 	.word	0x2000421c
 800611c:	20004220 	.word	0x20004220

08006120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d04d      	beq.n	80061ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006132:	2308      	movs	r3, #8
 8006134:	425b      	negs	r3, r3
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <vPortFree+0xb8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <vPortFree+0x44>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	60fb      	str	r3, [r7, #12]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <vPortFree+0x62>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60bb      	str	r3, [r7, #8]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <vPortFree+0xb8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01e      	beq.n	80061ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11a      	bne.n	80061ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <vPortFree+0xb8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061a8:	f7fe fed0 	bl	8004f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <vPortFree+0xbc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <vPortFree+0xbc>)
 80061b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f000 f874 	bl	80062a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <vPortFree+0xc0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	4a06      	ldr	r2, [pc, #24]	; (80061e0 <vPortFree+0xc0>)
 80061c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061ca:	f7fe fecd 	bl	8004f68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20004228 	.word	0x20004228
 80061dc:	20004218 	.word	0x20004218
 80061e0:	20004224 	.word	0x20004224

080061e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061f0:	4b27      	ldr	r3, [pc, #156]	; (8006290 <prvHeapInit+0xac>)
 80061f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00c      	beq.n	8006218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3307      	adds	r3, #7
 8006202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <prvHeapInit+0xac>)
 8006214:	4413      	add	r3, r2
 8006216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800621c:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <prvHeapInit+0xb0>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006222:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <prvHeapInit+0xb0>)
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4413      	add	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006230:	2208      	movs	r2, #8
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a15      	ldr	r2, [pc, #84]	; (8006298 <prvHeapInit+0xb4>)
 8006244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006246:	4b14      	ldr	r3, [pc, #80]	; (8006298 <prvHeapInit+0xb4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800624e:	4b12      	ldr	r3, [pc, #72]	; (8006298 <prvHeapInit+0xb4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	1ad2      	subs	r2, r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <prvHeapInit+0xb4>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <prvHeapInit+0xb8>)
 8006272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <prvHeapInit+0xbc>)
 800627a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800627c:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <prvHeapInit+0xc0>)
 800627e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	2000060c 	.word	0x2000060c
 8006294:	2000420c 	.word	0x2000420c
 8006298:	20004214 	.word	0x20004214
 800629c:	2000421c 	.word	0x2000421c
 80062a0:	20004218 	.word	0x20004218
 80062a4:	20004228 	.word	0x20004228

080062a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062b0:	4b28      	ldr	r3, [pc, #160]	; (8006354 <prvInsertBlockIntoFreeList+0xac>)
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e002      	b.n	80062bc <prvInsertBlockIntoFreeList+0x14>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d8f7      	bhi.n	80062b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4413      	add	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d108      	bne.n	80062ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	441a      	add	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	441a      	add	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d118      	bne.n	8006330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <prvInsertBlockIntoFreeList+0xb0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d00d      	beq.n	8006326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e008      	b.n	8006338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <prvInsertBlockIntoFreeList+0xb0>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e003      	b.n	8006338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	429a      	cmp	r2, r3
 800633e:	d002      	beq.n	8006346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	2000420c 	.word	0x2000420c
 8006358:	20004214 	.word	0x20004214

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000010 	.word	0x20000010

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4d0d      	ldr	r5, [pc, #52]	; (80063a0 <__libc_init_array+0x38>)
 800636c:	4c0d      	ldr	r4, [pc, #52]	; (80063a4 <__libc_init_array+0x3c>)
 800636e:	1b64      	subs	r4, r4, r5
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	2600      	movs	r6, #0
 8006374:	42a6      	cmp	r6, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	4d0b      	ldr	r5, [pc, #44]	; (80063a8 <__libc_init_array+0x40>)
 800637a:	4c0c      	ldr	r4, [pc, #48]	; (80063ac <__libc_init_array+0x44>)
 800637c:	f000 fcf8 	bl	8006d70 <_init>
 8006380:	1b64      	subs	r4, r4, r5
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	2600      	movs	r6, #0
 8006386:	42a6      	cmp	r6, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006390:	4798      	blx	r3
 8006392:	3601      	adds	r6, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f855 3b04 	ldr.w	r3, [r5], #4
 800639a:	4798      	blx	r3
 800639c:	3601      	adds	r6, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	08006e98 	.word	0x08006e98
 80063a4:	08006e98 	.word	0x08006e98
 80063a8:	08006e98 	.word	0x08006e98
 80063ac:	08006e9c 	.word	0x08006e9c

080063b0 <__retarget_lock_acquire_recursive>:
 80063b0:	4770      	bx	lr

080063b2 <__retarget_lock_release_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memset>:
 80063d0:	4402      	add	r2, r0
 80063d2:	4603      	mov	r3, r0
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d100      	bne.n	80063da <memset+0xa>
 80063d8:	4770      	bx	lr
 80063da:	f803 1b01 	strb.w	r1, [r3], #1
 80063de:	e7f9      	b.n	80063d4 <memset+0x4>

080063e0 <sbrk_aligned>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	4e0e      	ldr	r6, [pc, #56]	; (800641c <sbrk_aligned+0x3c>)
 80063e4:	460c      	mov	r4, r1
 80063e6:	6831      	ldr	r1, [r6, #0]
 80063e8:	4605      	mov	r5, r0
 80063ea:	b911      	cbnz	r1, 80063f2 <sbrk_aligned+0x12>
 80063ec:	f000 f8f6 	bl	80065dc <_sbrk_r>
 80063f0:	6030      	str	r0, [r6, #0]
 80063f2:	4621      	mov	r1, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f8f1 	bl	80065dc <_sbrk_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d00a      	beq.n	8006414 <sbrk_aligned+0x34>
 80063fe:	1cc4      	adds	r4, r0, #3
 8006400:	f024 0403 	bic.w	r4, r4, #3
 8006404:	42a0      	cmp	r0, r4
 8006406:	d007      	beq.n	8006418 <sbrk_aligned+0x38>
 8006408:	1a21      	subs	r1, r4, r0
 800640a:	4628      	mov	r0, r5
 800640c:	f000 f8e6 	bl	80065dc <_sbrk_r>
 8006410:	3001      	adds	r0, #1
 8006412:	d101      	bne.n	8006418 <sbrk_aligned+0x38>
 8006414:	f04f 34ff 	mov.w	r4, #4294967295
 8006418:	4620      	mov	r0, r4
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	20004234 	.word	0x20004234

08006420 <_malloc_r>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	1ccd      	adds	r5, r1, #3
 8006426:	f025 0503 	bic.w	r5, r5, #3
 800642a:	3508      	adds	r5, #8
 800642c:	2d0c      	cmp	r5, #12
 800642e:	bf38      	it	cc
 8006430:	250c      	movcc	r5, #12
 8006432:	2d00      	cmp	r5, #0
 8006434:	4607      	mov	r7, r0
 8006436:	db01      	blt.n	800643c <_malloc_r+0x1c>
 8006438:	42a9      	cmp	r1, r5
 800643a:	d905      	bls.n	8006448 <_malloc_r+0x28>
 800643c:	230c      	movs	r3, #12
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	2600      	movs	r6, #0
 8006442:	4630      	mov	r0, r6
 8006444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006448:	4e2e      	ldr	r6, [pc, #184]	; (8006504 <_malloc_r+0xe4>)
 800644a:	f000 f8f7 	bl	800663c <__malloc_lock>
 800644e:	6833      	ldr	r3, [r6, #0]
 8006450:	461c      	mov	r4, r3
 8006452:	bb34      	cbnz	r4, 80064a2 <_malloc_r+0x82>
 8006454:	4629      	mov	r1, r5
 8006456:	4638      	mov	r0, r7
 8006458:	f7ff ffc2 	bl	80063e0 <sbrk_aligned>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	4604      	mov	r4, r0
 8006460:	d14d      	bne.n	80064fe <_malloc_r+0xde>
 8006462:	6834      	ldr	r4, [r6, #0]
 8006464:	4626      	mov	r6, r4
 8006466:	2e00      	cmp	r6, #0
 8006468:	d140      	bne.n	80064ec <_malloc_r+0xcc>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	4631      	mov	r1, r6
 800646e:	4638      	mov	r0, r7
 8006470:	eb04 0803 	add.w	r8, r4, r3
 8006474:	f000 f8b2 	bl	80065dc <_sbrk_r>
 8006478:	4580      	cmp	r8, r0
 800647a:	d13a      	bne.n	80064f2 <_malloc_r+0xd2>
 800647c:	6821      	ldr	r1, [r4, #0]
 800647e:	3503      	adds	r5, #3
 8006480:	1a6d      	subs	r5, r5, r1
 8006482:	f025 0503 	bic.w	r5, r5, #3
 8006486:	3508      	adds	r5, #8
 8006488:	2d0c      	cmp	r5, #12
 800648a:	bf38      	it	cc
 800648c:	250c      	movcc	r5, #12
 800648e:	4629      	mov	r1, r5
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ffa5 	bl	80063e0 <sbrk_aligned>
 8006496:	3001      	adds	r0, #1
 8006498:	d02b      	beq.n	80064f2 <_malloc_r+0xd2>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	442b      	add	r3, r5
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	e00e      	b.n	80064c0 <_malloc_r+0xa0>
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	1b52      	subs	r2, r2, r5
 80064a6:	d41e      	bmi.n	80064e6 <_malloc_r+0xc6>
 80064a8:	2a0b      	cmp	r2, #11
 80064aa:	d916      	bls.n	80064da <_malloc_r+0xba>
 80064ac:	1961      	adds	r1, r4, r5
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	6025      	str	r5, [r4, #0]
 80064b2:	bf18      	it	ne
 80064b4:	6059      	strne	r1, [r3, #4]
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	bf08      	it	eq
 80064ba:	6031      	streq	r1, [r6, #0]
 80064bc:	5162      	str	r2, [r4, r5]
 80064be:	604b      	str	r3, [r1, #4]
 80064c0:	4638      	mov	r0, r7
 80064c2:	f104 060b 	add.w	r6, r4, #11
 80064c6:	f000 f8bf 	bl	8006648 <__malloc_unlock>
 80064ca:	f026 0607 	bic.w	r6, r6, #7
 80064ce:	1d23      	adds	r3, r4, #4
 80064d0:	1af2      	subs	r2, r6, r3
 80064d2:	d0b6      	beq.n	8006442 <_malloc_r+0x22>
 80064d4:	1b9b      	subs	r3, r3, r6
 80064d6:	50a3      	str	r3, [r4, r2]
 80064d8:	e7b3      	b.n	8006442 <_malloc_r+0x22>
 80064da:	6862      	ldr	r2, [r4, #4]
 80064dc:	42a3      	cmp	r3, r4
 80064de:	bf0c      	ite	eq
 80064e0:	6032      	streq	r2, [r6, #0]
 80064e2:	605a      	strne	r2, [r3, #4]
 80064e4:	e7ec      	b.n	80064c0 <_malloc_r+0xa0>
 80064e6:	4623      	mov	r3, r4
 80064e8:	6864      	ldr	r4, [r4, #4]
 80064ea:	e7b2      	b.n	8006452 <_malloc_r+0x32>
 80064ec:	4634      	mov	r4, r6
 80064ee:	6876      	ldr	r6, [r6, #4]
 80064f0:	e7b9      	b.n	8006466 <_malloc_r+0x46>
 80064f2:	230c      	movs	r3, #12
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	4638      	mov	r0, r7
 80064f8:	f000 f8a6 	bl	8006648 <__malloc_unlock>
 80064fc:	e7a1      	b.n	8006442 <_malloc_r+0x22>
 80064fe:	6025      	str	r5, [r4, #0]
 8006500:	e7de      	b.n	80064c0 <_malloc_r+0xa0>
 8006502:	bf00      	nop
 8006504:	20004230 	.word	0x20004230

08006508 <cleanup_glue>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	460c      	mov	r4, r1
 800650c:	6809      	ldr	r1, [r1, #0]
 800650e:	4605      	mov	r5, r0
 8006510:	b109      	cbz	r1, 8006516 <cleanup_glue+0xe>
 8006512:	f7ff fff9 	bl	8006508 <cleanup_glue>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800651e:	f000 b899 	b.w	8006654 <_free_r>
	...

08006524 <_reclaim_reent>:
 8006524:	4b2c      	ldr	r3, [pc, #176]	; (80065d8 <_reclaim_reent+0xb4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4283      	cmp	r3, r0
 800652a:	b570      	push	{r4, r5, r6, lr}
 800652c:	4604      	mov	r4, r0
 800652e:	d051      	beq.n	80065d4 <_reclaim_reent+0xb0>
 8006530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006532:	b143      	cbz	r3, 8006546 <_reclaim_reent+0x22>
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d14a      	bne.n	80065d0 <_reclaim_reent+0xac>
 800653a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653c:	6819      	ldr	r1, [r3, #0]
 800653e:	b111      	cbz	r1, 8006546 <_reclaim_reent+0x22>
 8006540:	4620      	mov	r0, r4
 8006542:	f000 f887 	bl	8006654 <_free_r>
 8006546:	6961      	ldr	r1, [r4, #20]
 8006548:	b111      	cbz	r1, 8006550 <_reclaim_reent+0x2c>
 800654a:	4620      	mov	r0, r4
 800654c:	f000 f882 	bl	8006654 <_free_r>
 8006550:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006552:	b111      	cbz	r1, 800655a <_reclaim_reent+0x36>
 8006554:	4620      	mov	r0, r4
 8006556:	f000 f87d 	bl	8006654 <_free_r>
 800655a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800655c:	b111      	cbz	r1, 8006564 <_reclaim_reent+0x40>
 800655e:	4620      	mov	r0, r4
 8006560:	f000 f878 	bl	8006654 <_free_r>
 8006564:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006566:	b111      	cbz	r1, 800656e <_reclaim_reent+0x4a>
 8006568:	4620      	mov	r0, r4
 800656a:	f000 f873 	bl	8006654 <_free_r>
 800656e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006570:	b111      	cbz	r1, 8006578 <_reclaim_reent+0x54>
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f86e 	bl	8006654 <_free_r>
 8006578:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800657a:	b111      	cbz	r1, 8006582 <_reclaim_reent+0x5e>
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f869 	bl	8006654 <_free_r>
 8006582:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006584:	b111      	cbz	r1, 800658c <_reclaim_reent+0x68>
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f864 	bl	8006654 <_free_r>
 800658c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800658e:	b111      	cbz	r1, 8006596 <_reclaim_reent+0x72>
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f85f 	bl	8006654 <_free_r>
 8006596:	69a3      	ldr	r3, [r4, #24]
 8006598:	b1e3      	cbz	r3, 80065d4 <_reclaim_reent+0xb0>
 800659a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800659c:	4620      	mov	r0, r4
 800659e:	4798      	blx	r3
 80065a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065a2:	b1b9      	cbz	r1, 80065d4 <_reclaim_reent+0xb0>
 80065a4:	4620      	mov	r0, r4
 80065a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065aa:	f7ff bfad 	b.w	8006508 <cleanup_glue>
 80065ae:	5949      	ldr	r1, [r1, r5]
 80065b0:	b941      	cbnz	r1, 80065c4 <_reclaim_reent+0xa0>
 80065b2:	3504      	adds	r5, #4
 80065b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b6:	2d80      	cmp	r5, #128	; 0x80
 80065b8:	68d9      	ldr	r1, [r3, #12]
 80065ba:	d1f8      	bne.n	80065ae <_reclaim_reent+0x8a>
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 f849 	bl	8006654 <_free_r>
 80065c2:	e7ba      	b.n	800653a <_reclaim_reent+0x16>
 80065c4:	680e      	ldr	r6, [r1, #0]
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 f844 	bl	8006654 <_free_r>
 80065cc:	4631      	mov	r1, r6
 80065ce:	e7ef      	b.n	80065b0 <_reclaim_reent+0x8c>
 80065d0:	2500      	movs	r5, #0
 80065d2:	e7ef      	b.n	80065b4 <_reclaim_reent+0x90>
 80065d4:	bd70      	pop	{r4, r5, r6, pc}
 80065d6:	bf00      	nop
 80065d8:	20000010 	.word	0x20000010

080065dc <_sbrk_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4d06      	ldr	r5, [pc, #24]	; (80065f8 <_sbrk_r+0x1c>)
 80065e0:	2300      	movs	r3, #0
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	602b      	str	r3, [r5, #0]
 80065e8:	f7fa fdd8 	bl	800119c <_sbrk>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_sbrk_r+0x1a>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_sbrk_r+0x1a>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20004238 	.word	0x20004238

080065fc <siprintf>:
 80065fc:	b40e      	push	{r1, r2, r3}
 80065fe:	b500      	push	{lr}
 8006600:	b09c      	sub	sp, #112	; 0x70
 8006602:	ab1d      	add	r3, sp, #116	; 0x74
 8006604:	9002      	str	r0, [sp, #8]
 8006606:	9006      	str	r0, [sp, #24]
 8006608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800660c:	4809      	ldr	r0, [pc, #36]	; (8006634 <siprintf+0x38>)
 800660e:	9107      	str	r1, [sp, #28]
 8006610:	9104      	str	r1, [sp, #16]
 8006612:	4909      	ldr	r1, [pc, #36]	; (8006638 <siprintf+0x3c>)
 8006614:	f853 2b04 	ldr.w	r2, [r3], #4
 8006618:	9105      	str	r1, [sp, #20]
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	a902      	add	r1, sp, #8
 8006620:	f000 f8c0 	bl	80067a4 <_svfiprintf_r>
 8006624:	9b02      	ldr	r3, [sp, #8]
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	b01c      	add	sp, #112	; 0x70
 800662c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006630:	b003      	add	sp, #12
 8006632:	4770      	bx	lr
 8006634:	20000010 	.word	0x20000010
 8006638:	ffff0208 	.word	0xffff0208

0800663c <__malloc_lock>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__malloc_lock+0x8>)
 800663e:	f7ff beb7 	b.w	80063b0 <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	2000422c 	.word	0x2000422c

08006648 <__malloc_unlock>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__malloc_unlock+0x8>)
 800664a:	f7ff beb2 	b.w	80063b2 <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	2000422c 	.word	0x2000422c

08006654 <_free_r>:
 8006654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006656:	2900      	cmp	r1, #0
 8006658:	d044      	beq.n	80066e4 <_free_r+0x90>
 800665a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800665e:	9001      	str	r0, [sp, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f1a1 0404 	sub.w	r4, r1, #4
 8006666:	bfb8      	it	lt
 8006668:	18e4      	addlt	r4, r4, r3
 800666a:	f7ff ffe7 	bl	800663c <__malloc_lock>
 800666e:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <_free_r+0x94>)
 8006670:	9801      	ldr	r0, [sp, #4]
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	b933      	cbnz	r3, 8006684 <_free_r+0x30>
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	6014      	str	r4, [r2, #0]
 800667a:	b003      	add	sp, #12
 800667c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006680:	f7ff bfe2 	b.w	8006648 <__malloc_unlock>
 8006684:	42a3      	cmp	r3, r4
 8006686:	d908      	bls.n	800669a <_free_r+0x46>
 8006688:	6825      	ldr	r5, [r4, #0]
 800668a:	1961      	adds	r1, r4, r5
 800668c:	428b      	cmp	r3, r1
 800668e:	bf01      	itttt	eq
 8006690:	6819      	ldreq	r1, [r3, #0]
 8006692:	685b      	ldreq	r3, [r3, #4]
 8006694:	1949      	addeq	r1, r1, r5
 8006696:	6021      	streq	r1, [r4, #0]
 8006698:	e7ed      	b.n	8006676 <_free_r+0x22>
 800669a:	461a      	mov	r2, r3
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	b10b      	cbz	r3, 80066a4 <_free_r+0x50>
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	d9fa      	bls.n	800669a <_free_r+0x46>
 80066a4:	6811      	ldr	r1, [r2, #0]
 80066a6:	1855      	adds	r5, r2, r1
 80066a8:	42a5      	cmp	r5, r4
 80066aa:	d10b      	bne.n	80066c4 <_free_r+0x70>
 80066ac:	6824      	ldr	r4, [r4, #0]
 80066ae:	4421      	add	r1, r4
 80066b0:	1854      	adds	r4, r2, r1
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	6011      	str	r1, [r2, #0]
 80066b6:	d1e0      	bne.n	800667a <_free_r+0x26>
 80066b8:	681c      	ldr	r4, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	6053      	str	r3, [r2, #4]
 80066be:	4421      	add	r1, r4
 80066c0:	6011      	str	r1, [r2, #0]
 80066c2:	e7da      	b.n	800667a <_free_r+0x26>
 80066c4:	d902      	bls.n	80066cc <_free_r+0x78>
 80066c6:	230c      	movs	r3, #12
 80066c8:	6003      	str	r3, [r0, #0]
 80066ca:	e7d6      	b.n	800667a <_free_r+0x26>
 80066cc:	6825      	ldr	r5, [r4, #0]
 80066ce:	1961      	adds	r1, r4, r5
 80066d0:	428b      	cmp	r3, r1
 80066d2:	bf04      	itt	eq
 80066d4:	6819      	ldreq	r1, [r3, #0]
 80066d6:	685b      	ldreq	r3, [r3, #4]
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	bf04      	itt	eq
 80066dc:	1949      	addeq	r1, r1, r5
 80066de:	6021      	streq	r1, [r4, #0]
 80066e0:	6054      	str	r4, [r2, #4]
 80066e2:	e7ca      	b.n	800667a <_free_r+0x26>
 80066e4:	b003      	add	sp, #12
 80066e6:	bd30      	pop	{r4, r5, pc}
 80066e8:	20004230 	.word	0x20004230

080066ec <__ssputs_r>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	688e      	ldr	r6, [r1, #8]
 80066f2:	429e      	cmp	r6, r3
 80066f4:	4682      	mov	sl, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	4690      	mov	r8, r2
 80066fa:	461f      	mov	r7, r3
 80066fc:	d838      	bhi.n	8006770 <__ssputs_r+0x84>
 80066fe:	898a      	ldrh	r2, [r1, #12]
 8006700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006704:	d032      	beq.n	800676c <__ssputs_r+0x80>
 8006706:	6825      	ldr	r5, [r4, #0]
 8006708:	6909      	ldr	r1, [r1, #16]
 800670a:	eba5 0901 	sub.w	r9, r5, r1
 800670e:	6965      	ldr	r5, [r4, #20]
 8006710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006718:	3301      	adds	r3, #1
 800671a:	444b      	add	r3, r9
 800671c:	106d      	asrs	r5, r5, #1
 800671e:	429d      	cmp	r5, r3
 8006720:	bf38      	it	cc
 8006722:	461d      	movcc	r5, r3
 8006724:	0553      	lsls	r3, r2, #21
 8006726:	d531      	bpl.n	800678c <__ssputs_r+0xa0>
 8006728:	4629      	mov	r1, r5
 800672a:	f7ff fe79 	bl	8006420 <_malloc_r>
 800672e:	4606      	mov	r6, r0
 8006730:	b950      	cbnz	r0, 8006748 <__ssputs_r+0x5c>
 8006732:	230c      	movs	r3, #12
 8006734:	f8ca 3000 	str.w	r3, [sl]
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006748:	6921      	ldr	r1, [r4, #16]
 800674a:	464a      	mov	r2, r9
 800674c:	f7ff fe32 	bl	80063b4 <memcpy>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675a:	81a3      	strh	r3, [r4, #12]
 800675c:	6126      	str	r6, [r4, #16]
 800675e:	6165      	str	r5, [r4, #20]
 8006760:	444e      	add	r6, r9
 8006762:	eba5 0509 	sub.w	r5, r5, r9
 8006766:	6026      	str	r6, [r4, #0]
 8006768:	60a5      	str	r5, [r4, #8]
 800676a:	463e      	mov	r6, r7
 800676c:	42be      	cmp	r6, r7
 800676e:	d900      	bls.n	8006772 <__ssputs_r+0x86>
 8006770:	463e      	mov	r6, r7
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	4632      	mov	r2, r6
 8006776:	4641      	mov	r1, r8
 8006778:	f000 faa8 	bl	8006ccc <memmove>
 800677c:	68a3      	ldr	r3, [r4, #8]
 800677e:	1b9b      	subs	r3, r3, r6
 8006780:	60a3      	str	r3, [r4, #8]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	4433      	add	r3, r6
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	2000      	movs	r0, #0
 800678a:	e7db      	b.n	8006744 <__ssputs_r+0x58>
 800678c:	462a      	mov	r2, r5
 800678e:	f000 fab7 	bl	8006d00 <_realloc_r>
 8006792:	4606      	mov	r6, r0
 8006794:	2800      	cmp	r0, #0
 8006796:	d1e1      	bne.n	800675c <__ssputs_r+0x70>
 8006798:	6921      	ldr	r1, [r4, #16]
 800679a:	4650      	mov	r0, sl
 800679c:	f7ff ff5a 	bl	8006654 <_free_r>
 80067a0:	e7c7      	b.n	8006732 <__ssputs_r+0x46>
	...

080067a4 <_svfiprintf_r>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	4698      	mov	r8, r3
 80067aa:	898b      	ldrh	r3, [r1, #12]
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	b09d      	sub	sp, #116	; 0x74
 80067b0:	4607      	mov	r7, r0
 80067b2:	460d      	mov	r5, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	d50e      	bpl.n	80067d6 <_svfiprintf_r+0x32>
 80067b8:	690b      	ldr	r3, [r1, #16]
 80067ba:	b963      	cbnz	r3, 80067d6 <_svfiprintf_r+0x32>
 80067bc:	2140      	movs	r1, #64	; 0x40
 80067be:	f7ff fe2f 	bl	8006420 <_malloc_r>
 80067c2:	6028      	str	r0, [r5, #0]
 80067c4:	6128      	str	r0, [r5, #16]
 80067c6:	b920      	cbnz	r0, 80067d2 <_svfiprintf_r+0x2e>
 80067c8:	230c      	movs	r3, #12
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	e0d1      	b.n	8006976 <_svfiprintf_r+0x1d2>
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	616b      	str	r3, [r5, #20]
 80067d6:	2300      	movs	r3, #0
 80067d8:	9309      	str	r3, [sp, #36]	; 0x24
 80067da:	2320      	movs	r3, #32
 80067dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80067e4:	2330      	movs	r3, #48	; 0x30
 80067e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006990 <_svfiprintf_r+0x1ec>
 80067ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067ee:	f04f 0901 	mov.w	r9, #1
 80067f2:	4623      	mov	r3, r4
 80067f4:	469a      	mov	sl, r3
 80067f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067fa:	b10a      	cbz	r2, 8006800 <_svfiprintf_r+0x5c>
 80067fc:	2a25      	cmp	r2, #37	; 0x25
 80067fe:	d1f9      	bne.n	80067f4 <_svfiprintf_r+0x50>
 8006800:	ebba 0b04 	subs.w	fp, sl, r4
 8006804:	d00b      	beq.n	800681e <_svfiprintf_r+0x7a>
 8006806:	465b      	mov	r3, fp
 8006808:	4622      	mov	r2, r4
 800680a:	4629      	mov	r1, r5
 800680c:	4638      	mov	r0, r7
 800680e:	f7ff ff6d 	bl	80066ec <__ssputs_r>
 8006812:	3001      	adds	r0, #1
 8006814:	f000 80aa 	beq.w	800696c <_svfiprintf_r+0x1c8>
 8006818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800681a:	445a      	add	r2, fp
 800681c:	9209      	str	r2, [sp, #36]	; 0x24
 800681e:	f89a 3000 	ldrb.w	r3, [sl]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80a2 	beq.w	800696c <_svfiprintf_r+0x1c8>
 8006828:	2300      	movs	r3, #0
 800682a:	f04f 32ff 	mov.w	r2, #4294967295
 800682e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006832:	f10a 0a01 	add.w	sl, sl, #1
 8006836:	9304      	str	r3, [sp, #16]
 8006838:	9307      	str	r3, [sp, #28]
 800683a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800683e:	931a      	str	r3, [sp, #104]	; 0x68
 8006840:	4654      	mov	r4, sl
 8006842:	2205      	movs	r2, #5
 8006844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006848:	4851      	ldr	r0, [pc, #324]	; (8006990 <_svfiprintf_r+0x1ec>)
 800684a:	f7f9 fcc9 	bl	80001e0 <memchr>
 800684e:	9a04      	ldr	r2, [sp, #16]
 8006850:	b9d8      	cbnz	r0, 800688a <_svfiprintf_r+0xe6>
 8006852:	06d0      	lsls	r0, r2, #27
 8006854:	bf44      	itt	mi
 8006856:	2320      	movmi	r3, #32
 8006858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685c:	0711      	lsls	r1, r2, #28
 800685e:	bf44      	itt	mi
 8006860:	232b      	movmi	r3, #43	; 0x2b
 8006862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006866:	f89a 3000 	ldrb.w	r3, [sl]
 800686a:	2b2a      	cmp	r3, #42	; 0x2a
 800686c:	d015      	beq.n	800689a <_svfiprintf_r+0xf6>
 800686e:	9a07      	ldr	r2, [sp, #28]
 8006870:	4654      	mov	r4, sl
 8006872:	2000      	movs	r0, #0
 8006874:	f04f 0c0a 	mov.w	ip, #10
 8006878:	4621      	mov	r1, r4
 800687a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800687e:	3b30      	subs	r3, #48	; 0x30
 8006880:	2b09      	cmp	r3, #9
 8006882:	d94e      	bls.n	8006922 <_svfiprintf_r+0x17e>
 8006884:	b1b0      	cbz	r0, 80068b4 <_svfiprintf_r+0x110>
 8006886:	9207      	str	r2, [sp, #28]
 8006888:	e014      	b.n	80068b4 <_svfiprintf_r+0x110>
 800688a:	eba0 0308 	sub.w	r3, r0, r8
 800688e:	fa09 f303 	lsl.w	r3, r9, r3
 8006892:	4313      	orrs	r3, r2
 8006894:	9304      	str	r3, [sp, #16]
 8006896:	46a2      	mov	sl, r4
 8006898:	e7d2      	b.n	8006840 <_svfiprintf_r+0x9c>
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	1d19      	adds	r1, r3, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	9103      	str	r1, [sp, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bfbb      	ittet	lt
 80068a6:	425b      	neglt	r3, r3
 80068a8:	f042 0202 	orrlt.w	r2, r2, #2
 80068ac:	9307      	strge	r3, [sp, #28]
 80068ae:	9307      	strlt	r3, [sp, #28]
 80068b0:	bfb8      	it	lt
 80068b2:	9204      	strlt	r2, [sp, #16]
 80068b4:	7823      	ldrb	r3, [r4, #0]
 80068b6:	2b2e      	cmp	r3, #46	; 0x2e
 80068b8:	d10c      	bne.n	80068d4 <_svfiprintf_r+0x130>
 80068ba:	7863      	ldrb	r3, [r4, #1]
 80068bc:	2b2a      	cmp	r3, #42	; 0x2a
 80068be:	d135      	bne.n	800692c <_svfiprintf_r+0x188>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	1d1a      	adds	r2, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	9203      	str	r2, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfb8      	it	lt
 80068cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80068d0:	3402      	adds	r4, #2
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069a0 <_svfiprintf_r+0x1fc>
 80068d8:	7821      	ldrb	r1, [r4, #0]
 80068da:	2203      	movs	r2, #3
 80068dc:	4650      	mov	r0, sl
 80068de:	f7f9 fc7f 	bl	80001e0 <memchr>
 80068e2:	b140      	cbz	r0, 80068f6 <_svfiprintf_r+0x152>
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	eba0 000a 	sub.w	r0, r0, sl
 80068ea:	fa03 f000 	lsl.w	r0, r3, r0
 80068ee:	9b04      	ldr	r3, [sp, #16]
 80068f0:	4303      	orrs	r3, r0
 80068f2:	3401      	adds	r4, #1
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068fa:	4826      	ldr	r0, [pc, #152]	; (8006994 <_svfiprintf_r+0x1f0>)
 80068fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006900:	2206      	movs	r2, #6
 8006902:	f7f9 fc6d 	bl	80001e0 <memchr>
 8006906:	2800      	cmp	r0, #0
 8006908:	d038      	beq.n	800697c <_svfiprintf_r+0x1d8>
 800690a:	4b23      	ldr	r3, [pc, #140]	; (8006998 <_svfiprintf_r+0x1f4>)
 800690c:	bb1b      	cbnz	r3, 8006956 <_svfiprintf_r+0x1b2>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	3307      	adds	r3, #7
 8006912:	f023 0307 	bic.w	r3, r3, #7
 8006916:	3308      	adds	r3, #8
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691c:	4433      	add	r3, r6
 800691e:	9309      	str	r3, [sp, #36]	; 0x24
 8006920:	e767      	b.n	80067f2 <_svfiprintf_r+0x4e>
 8006922:	fb0c 3202 	mla	r2, ip, r2, r3
 8006926:	460c      	mov	r4, r1
 8006928:	2001      	movs	r0, #1
 800692a:	e7a5      	b.n	8006878 <_svfiprintf_r+0xd4>
 800692c:	2300      	movs	r3, #0
 800692e:	3401      	adds	r4, #1
 8006930:	9305      	str	r3, [sp, #20]
 8006932:	4619      	mov	r1, r3
 8006934:	f04f 0c0a 	mov.w	ip, #10
 8006938:	4620      	mov	r0, r4
 800693a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800693e:	3a30      	subs	r2, #48	; 0x30
 8006940:	2a09      	cmp	r2, #9
 8006942:	d903      	bls.n	800694c <_svfiprintf_r+0x1a8>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0c5      	beq.n	80068d4 <_svfiprintf_r+0x130>
 8006948:	9105      	str	r1, [sp, #20]
 800694a:	e7c3      	b.n	80068d4 <_svfiprintf_r+0x130>
 800694c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006950:	4604      	mov	r4, r0
 8006952:	2301      	movs	r3, #1
 8006954:	e7f0      	b.n	8006938 <_svfiprintf_r+0x194>
 8006956:	ab03      	add	r3, sp, #12
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	462a      	mov	r2, r5
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <_svfiprintf_r+0x1f8>)
 800695e:	a904      	add	r1, sp, #16
 8006960:	4638      	mov	r0, r7
 8006962:	f3af 8000 	nop.w
 8006966:	1c42      	adds	r2, r0, #1
 8006968:	4606      	mov	r6, r0
 800696a:	d1d6      	bne.n	800691a <_svfiprintf_r+0x176>
 800696c:	89ab      	ldrh	r3, [r5, #12]
 800696e:	065b      	lsls	r3, r3, #25
 8006970:	f53f af2c 	bmi.w	80067cc <_svfiprintf_r+0x28>
 8006974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006976:	b01d      	add	sp, #116	; 0x74
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	ab03      	add	r3, sp, #12
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	462a      	mov	r2, r5
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <_svfiprintf_r+0x1f8>)
 8006984:	a904      	add	r1, sp, #16
 8006986:	4638      	mov	r0, r7
 8006988:	f000 f87a 	bl	8006a80 <_printf_i>
 800698c:	e7eb      	b.n	8006966 <_svfiprintf_r+0x1c2>
 800698e:	bf00      	nop
 8006990:	08006e5c 	.word	0x08006e5c
 8006994:	08006e66 	.word	0x08006e66
 8006998:	00000000 	.word	0x00000000
 800699c:	080066ed 	.word	0x080066ed
 80069a0:	08006e62 	.word	0x08006e62

080069a4 <_printf_common>:
 80069a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a8:	4616      	mov	r6, r2
 80069aa:	4699      	mov	r9, r3
 80069ac:	688a      	ldr	r2, [r1, #8]
 80069ae:	690b      	ldr	r3, [r1, #16]
 80069b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069b4:	4293      	cmp	r3, r2
 80069b6:	bfb8      	it	lt
 80069b8:	4613      	movlt	r3, r2
 80069ba:	6033      	str	r3, [r6, #0]
 80069bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069c0:	4607      	mov	r7, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	b10a      	cbz	r2, 80069ca <_printf_common+0x26>
 80069c6:	3301      	adds	r3, #1
 80069c8:	6033      	str	r3, [r6, #0]
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	0699      	lsls	r1, r3, #26
 80069ce:	bf42      	ittt	mi
 80069d0:	6833      	ldrmi	r3, [r6, #0]
 80069d2:	3302      	addmi	r3, #2
 80069d4:	6033      	strmi	r3, [r6, #0]
 80069d6:	6825      	ldr	r5, [r4, #0]
 80069d8:	f015 0506 	ands.w	r5, r5, #6
 80069dc:	d106      	bne.n	80069ec <_printf_common+0x48>
 80069de:	f104 0a19 	add.w	sl, r4, #25
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	6832      	ldr	r2, [r6, #0]
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	42ab      	cmp	r3, r5
 80069ea:	dc26      	bgt.n	8006a3a <_printf_common+0x96>
 80069ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069f0:	1e13      	subs	r3, r2, #0
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	bf18      	it	ne
 80069f6:	2301      	movne	r3, #1
 80069f8:	0692      	lsls	r2, r2, #26
 80069fa:	d42b      	bmi.n	8006a54 <_printf_common+0xb0>
 80069fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a00:	4649      	mov	r1, r9
 8006a02:	4638      	mov	r0, r7
 8006a04:	47c0      	blx	r8
 8006a06:	3001      	adds	r0, #1
 8006a08:	d01e      	beq.n	8006a48 <_printf_common+0xa4>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	68e5      	ldr	r5, [r4, #12]
 8006a0e:	6832      	ldr	r2, [r6, #0]
 8006a10:	f003 0306 	and.w	r3, r3, #6
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	bf08      	it	eq
 8006a18:	1aad      	subeq	r5, r5, r2
 8006a1a:	68a3      	ldr	r3, [r4, #8]
 8006a1c:	6922      	ldr	r2, [r4, #16]
 8006a1e:	bf0c      	ite	eq
 8006a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a24:	2500      	movne	r5, #0
 8006a26:	4293      	cmp	r3, r2
 8006a28:	bfc4      	itt	gt
 8006a2a:	1a9b      	subgt	r3, r3, r2
 8006a2c:	18ed      	addgt	r5, r5, r3
 8006a2e:	2600      	movs	r6, #0
 8006a30:	341a      	adds	r4, #26
 8006a32:	42b5      	cmp	r5, r6
 8006a34:	d11a      	bne.n	8006a6c <_printf_common+0xc8>
 8006a36:	2000      	movs	r0, #0
 8006a38:	e008      	b.n	8006a4c <_printf_common+0xa8>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	4652      	mov	r2, sl
 8006a3e:	4649      	mov	r1, r9
 8006a40:	4638      	mov	r0, r7
 8006a42:	47c0      	blx	r8
 8006a44:	3001      	adds	r0, #1
 8006a46:	d103      	bne.n	8006a50 <_printf_common+0xac>
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a50:	3501      	adds	r5, #1
 8006a52:	e7c6      	b.n	80069e2 <_printf_common+0x3e>
 8006a54:	18e1      	adds	r1, r4, r3
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	2030      	movs	r0, #48	; 0x30
 8006a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a5e:	4422      	add	r2, r4
 8006a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a68:	3302      	adds	r3, #2
 8006a6a:	e7c7      	b.n	80069fc <_printf_common+0x58>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4622      	mov	r2, r4
 8006a70:	4649      	mov	r1, r9
 8006a72:	4638      	mov	r0, r7
 8006a74:	47c0      	blx	r8
 8006a76:	3001      	adds	r0, #1
 8006a78:	d0e6      	beq.n	8006a48 <_printf_common+0xa4>
 8006a7a:	3601      	adds	r6, #1
 8006a7c:	e7d9      	b.n	8006a32 <_printf_common+0x8e>
	...

08006a80 <_printf_i>:
 8006a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a84:	7e0f      	ldrb	r7, [r1, #24]
 8006a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a88:	2f78      	cmp	r7, #120	; 0x78
 8006a8a:	4691      	mov	r9, r2
 8006a8c:	4680      	mov	r8, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	469a      	mov	sl, r3
 8006a92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a96:	d807      	bhi.n	8006aa8 <_printf_i+0x28>
 8006a98:	2f62      	cmp	r7, #98	; 0x62
 8006a9a:	d80a      	bhi.n	8006ab2 <_printf_i+0x32>
 8006a9c:	2f00      	cmp	r7, #0
 8006a9e:	f000 80d8 	beq.w	8006c52 <_printf_i+0x1d2>
 8006aa2:	2f58      	cmp	r7, #88	; 0x58
 8006aa4:	f000 80a3 	beq.w	8006bee <_printf_i+0x16e>
 8006aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ab0:	e03a      	b.n	8006b28 <_printf_i+0xa8>
 8006ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ab6:	2b15      	cmp	r3, #21
 8006ab8:	d8f6      	bhi.n	8006aa8 <_printf_i+0x28>
 8006aba:	a101      	add	r1, pc, #4	; (adr r1, 8006ac0 <_printf_i+0x40>)
 8006abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b2d 	.word	0x08006b2d
 8006ac8:	08006aa9 	.word	0x08006aa9
 8006acc:	08006aa9 	.word	0x08006aa9
 8006ad0:	08006aa9 	.word	0x08006aa9
 8006ad4:	08006aa9 	.word	0x08006aa9
 8006ad8:	08006b2d 	.word	0x08006b2d
 8006adc:	08006aa9 	.word	0x08006aa9
 8006ae0:	08006aa9 	.word	0x08006aa9
 8006ae4:	08006aa9 	.word	0x08006aa9
 8006ae8:	08006aa9 	.word	0x08006aa9
 8006aec:	08006c39 	.word	0x08006c39
 8006af0:	08006b5d 	.word	0x08006b5d
 8006af4:	08006c1b 	.word	0x08006c1b
 8006af8:	08006aa9 	.word	0x08006aa9
 8006afc:	08006aa9 	.word	0x08006aa9
 8006b00:	08006c5b 	.word	0x08006c5b
 8006b04:	08006aa9 	.word	0x08006aa9
 8006b08:	08006b5d 	.word	0x08006b5d
 8006b0c:	08006aa9 	.word	0x08006aa9
 8006b10:	08006aa9 	.word	0x08006aa9
 8006b14:	08006c23 	.word	0x08006c23
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	1d1a      	adds	r2, r3, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	602a      	str	r2, [r5, #0]
 8006b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e0a3      	b.n	8006c74 <_printf_i+0x1f4>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	6829      	ldr	r1, [r5, #0]
 8006b30:	0606      	lsls	r6, r0, #24
 8006b32:	f101 0304 	add.w	r3, r1, #4
 8006b36:	d50a      	bpl.n	8006b4e <_printf_i+0xce>
 8006b38:	680e      	ldr	r6, [r1, #0]
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	2e00      	cmp	r6, #0
 8006b3e:	da03      	bge.n	8006b48 <_printf_i+0xc8>
 8006b40:	232d      	movs	r3, #45	; 0x2d
 8006b42:	4276      	negs	r6, r6
 8006b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b48:	485e      	ldr	r0, [pc, #376]	; (8006cc4 <_printf_i+0x244>)
 8006b4a:	230a      	movs	r3, #10
 8006b4c:	e019      	b.n	8006b82 <_printf_i+0x102>
 8006b4e:	680e      	ldr	r6, [r1, #0]
 8006b50:	602b      	str	r3, [r5, #0]
 8006b52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b56:	bf18      	it	ne
 8006b58:	b236      	sxthne	r6, r6
 8006b5a:	e7ef      	b.n	8006b3c <_printf_i+0xbc>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	6820      	ldr	r0, [r4, #0]
 8006b60:	1d19      	adds	r1, r3, #4
 8006b62:	6029      	str	r1, [r5, #0]
 8006b64:	0601      	lsls	r1, r0, #24
 8006b66:	d501      	bpl.n	8006b6c <_printf_i+0xec>
 8006b68:	681e      	ldr	r6, [r3, #0]
 8006b6a:	e002      	b.n	8006b72 <_printf_i+0xf2>
 8006b6c:	0646      	lsls	r6, r0, #25
 8006b6e:	d5fb      	bpl.n	8006b68 <_printf_i+0xe8>
 8006b70:	881e      	ldrh	r6, [r3, #0]
 8006b72:	4854      	ldr	r0, [pc, #336]	; (8006cc4 <_printf_i+0x244>)
 8006b74:	2f6f      	cmp	r7, #111	; 0x6f
 8006b76:	bf0c      	ite	eq
 8006b78:	2308      	moveq	r3, #8
 8006b7a:	230a      	movne	r3, #10
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b82:	6865      	ldr	r5, [r4, #4]
 8006b84:	60a5      	str	r5, [r4, #8]
 8006b86:	2d00      	cmp	r5, #0
 8006b88:	bfa2      	ittt	ge
 8006b8a:	6821      	ldrge	r1, [r4, #0]
 8006b8c:	f021 0104 	bicge.w	r1, r1, #4
 8006b90:	6021      	strge	r1, [r4, #0]
 8006b92:	b90e      	cbnz	r6, 8006b98 <_printf_i+0x118>
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	d04d      	beq.n	8006c34 <_printf_i+0x1b4>
 8006b98:	4615      	mov	r5, r2
 8006b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006ba2:	5dc7      	ldrb	r7, [r0, r7]
 8006ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ba8:	4637      	mov	r7, r6
 8006baa:	42bb      	cmp	r3, r7
 8006bac:	460e      	mov	r6, r1
 8006bae:	d9f4      	bls.n	8006b9a <_printf_i+0x11a>
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d10b      	bne.n	8006bcc <_printf_i+0x14c>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	07de      	lsls	r6, r3, #31
 8006bb8:	d508      	bpl.n	8006bcc <_printf_i+0x14c>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	6861      	ldr	r1, [r4, #4]
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	bfde      	ittt	le
 8006bc2:	2330      	movle	r3, #48	; 0x30
 8006bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bcc:	1b52      	subs	r2, r2, r5
 8006bce:	6122      	str	r2, [r4, #16]
 8006bd0:	f8cd a000 	str.w	sl, [sp]
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	aa03      	add	r2, sp, #12
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4640      	mov	r0, r8
 8006bdc:	f7ff fee2 	bl	80069a4 <_printf_common>
 8006be0:	3001      	adds	r0, #1
 8006be2:	d14c      	bne.n	8006c7e <_printf_i+0x1fe>
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	b004      	add	sp, #16
 8006bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bee:	4835      	ldr	r0, [pc, #212]	; (8006cc4 <_printf_i+0x244>)
 8006bf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bf4:	6829      	ldr	r1, [r5, #0]
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bfc:	6029      	str	r1, [r5, #0]
 8006bfe:	061d      	lsls	r5, r3, #24
 8006c00:	d514      	bpl.n	8006c2c <_printf_i+0x1ac>
 8006c02:	07df      	lsls	r7, r3, #31
 8006c04:	bf44      	itt	mi
 8006c06:	f043 0320 	orrmi.w	r3, r3, #32
 8006c0a:	6023      	strmi	r3, [r4, #0]
 8006c0c:	b91e      	cbnz	r6, 8006c16 <_printf_i+0x196>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	f023 0320 	bic.w	r3, r3, #32
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	2310      	movs	r3, #16
 8006c18:	e7b0      	b.n	8006b7c <_printf_i+0xfc>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	f043 0320 	orr.w	r3, r3, #32
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	2378      	movs	r3, #120	; 0x78
 8006c24:	4828      	ldr	r0, [pc, #160]	; (8006cc8 <_printf_i+0x248>)
 8006c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c2a:	e7e3      	b.n	8006bf4 <_printf_i+0x174>
 8006c2c:	0659      	lsls	r1, r3, #25
 8006c2e:	bf48      	it	mi
 8006c30:	b2b6      	uxthmi	r6, r6
 8006c32:	e7e6      	b.n	8006c02 <_printf_i+0x182>
 8006c34:	4615      	mov	r5, r2
 8006c36:	e7bb      	b.n	8006bb0 <_printf_i+0x130>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	6826      	ldr	r6, [r4, #0]
 8006c3c:	6961      	ldr	r1, [r4, #20]
 8006c3e:	1d18      	adds	r0, r3, #4
 8006c40:	6028      	str	r0, [r5, #0]
 8006c42:	0635      	lsls	r5, r6, #24
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	d501      	bpl.n	8006c4c <_printf_i+0x1cc>
 8006c48:	6019      	str	r1, [r3, #0]
 8006c4a:	e002      	b.n	8006c52 <_printf_i+0x1d2>
 8006c4c:	0670      	lsls	r0, r6, #25
 8006c4e:	d5fb      	bpl.n	8006c48 <_printf_i+0x1c8>
 8006c50:	8019      	strh	r1, [r3, #0]
 8006c52:	2300      	movs	r3, #0
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	4615      	mov	r5, r2
 8006c58:	e7ba      	b.n	8006bd0 <_printf_i+0x150>
 8006c5a:	682b      	ldr	r3, [r5, #0]
 8006c5c:	1d1a      	adds	r2, r3, #4
 8006c5e:	602a      	str	r2, [r5, #0]
 8006c60:	681d      	ldr	r5, [r3, #0]
 8006c62:	6862      	ldr	r2, [r4, #4]
 8006c64:	2100      	movs	r1, #0
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7f9 faba 	bl	80001e0 <memchr>
 8006c6c:	b108      	cbz	r0, 8006c72 <_printf_i+0x1f2>
 8006c6e:	1b40      	subs	r0, r0, r5
 8006c70:	6060      	str	r0, [r4, #4]
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	2300      	movs	r3, #0
 8006c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7c:	e7a8      	b.n	8006bd0 <_printf_i+0x150>
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	462a      	mov	r2, r5
 8006c82:	4649      	mov	r1, r9
 8006c84:	4640      	mov	r0, r8
 8006c86:	47d0      	blx	sl
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d0ab      	beq.n	8006be4 <_printf_i+0x164>
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	079b      	lsls	r3, r3, #30
 8006c90:	d413      	bmi.n	8006cba <_printf_i+0x23a>
 8006c92:	68e0      	ldr	r0, [r4, #12]
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	4298      	cmp	r0, r3
 8006c98:	bfb8      	it	lt
 8006c9a:	4618      	movlt	r0, r3
 8006c9c:	e7a4      	b.n	8006be8 <_printf_i+0x168>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4632      	mov	r2, r6
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	47d0      	blx	sl
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d09b      	beq.n	8006be4 <_printf_i+0x164>
 8006cac:	3501      	adds	r5, #1
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	9903      	ldr	r1, [sp, #12]
 8006cb2:	1a5b      	subs	r3, r3, r1
 8006cb4:	42ab      	cmp	r3, r5
 8006cb6:	dcf2      	bgt.n	8006c9e <_printf_i+0x21e>
 8006cb8:	e7eb      	b.n	8006c92 <_printf_i+0x212>
 8006cba:	2500      	movs	r5, #0
 8006cbc:	f104 0619 	add.w	r6, r4, #25
 8006cc0:	e7f5      	b.n	8006cae <_printf_i+0x22e>
 8006cc2:	bf00      	nop
 8006cc4:	08006e6d 	.word	0x08006e6d
 8006cc8:	08006e7e 	.word	0x08006e7e

08006ccc <memmove>:
 8006ccc:	4288      	cmp	r0, r1
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	eb01 0402 	add.w	r4, r1, r2
 8006cd4:	d902      	bls.n	8006cdc <memmove+0x10>
 8006cd6:	4284      	cmp	r4, r0
 8006cd8:	4623      	mov	r3, r4
 8006cda:	d807      	bhi.n	8006cec <memmove+0x20>
 8006cdc:	1e43      	subs	r3, r0, #1
 8006cde:	42a1      	cmp	r1, r4
 8006ce0:	d008      	beq.n	8006cf4 <memmove+0x28>
 8006ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cea:	e7f8      	b.n	8006cde <memmove+0x12>
 8006cec:	4402      	add	r2, r0
 8006cee:	4601      	mov	r1, r0
 8006cf0:	428a      	cmp	r2, r1
 8006cf2:	d100      	bne.n	8006cf6 <memmove+0x2a>
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cfe:	e7f7      	b.n	8006cf0 <memmove+0x24>

08006d00 <_realloc_r>:
 8006d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d04:	4680      	mov	r8, r0
 8006d06:	4614      	mov	r4, r2
 8006d08:	460e      	mov	r6, r1
 8006d0a:	b921      	cbnz	r1, 8006d16 <_realloc_r+0x16>
 8006d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	4611      	mov	r1, r2
 8006d12:	f7ff bb85 	b.w	8006420 <_malloc_r>
 8006d16:	b92a      	cbnz	r2, 8006d24 <_realloc_r+0x24>
 8006d18:	f7ff fc9c 	bl	8006654 <_free_r>
 8006d1c:	4625      	mov	r5, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d24:	f000 f81b 	bl	8006d5e <_malloc_usable_size_r>
 8006d28:	4284      	cmp	r4, r0
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	d802      	bhi.n	8006d34 <_realloc_r+0x34>
 8006d2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d32:	d812      	bhi.n	8006d5a <_realloc_r+0x5a>
 8006d34:	4621      	mov	r1, r4
 8006d36:	4640      	mov	r0, r8
 8006d38:	f7ff fb72 	bl	8006420 <_malloc_r>
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d0ed      	beq.n	8006d1e <_realloc_r+0x1e>
 8006d42:	42bc      	cmp	r4, r7
 8006d44:	4622      	mov	r2, r4
 8006d46:	4631      	mov	r1, r6
 8006d48:	bf28      	it	cs
 8006d4a:	463a      	movcs	r2, r7
 8006d4c:	f7ff fb32 	bl	80063b4 <memcpy>
 8006d50:	4631      	mov	r1, r6
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fc7e 	bl	8006654 <_free_r>
 8006d58:	e7e1      	b.n	8006d1e <_realloc_r+0x1e>
 8006d5a:	4635      	mov	r5, r6
 8006d5c:	e7df      	b.n	8006d1e <_realloc_r+0x1e>

08006d5e <_malloc_usable_size_r>:
 8006d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d62:	1f18      	subs	r0, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfbc      	itt	lt
 8006d68:	580b      	ldrlt	r3, [r1, r0]
 8006d6a:	18c0      	addlt	r0, r0, r3
 8006d6c:	4770      	bx	lr
	...

08006d70 <_init>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr

08006d7c <_fini>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr
