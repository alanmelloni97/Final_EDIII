
FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007340  08007340  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007348  08007348  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007348  08007348  00017348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c4  20000088  080073d8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000424c  080073d8  0002424c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166be  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a5  00000000  00000000  00036776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00039820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001831e  00000000  00000000  0003bb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015428  00000000  00000000  00053e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096adc  00000000  00000000  0006925e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000ffd3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000504c  00000000  00000000  000ffdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001229  00000000  00000000  00104e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800722c 	.word	0x0800722c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800722c 	.word	0x0800722c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000a4 	.word	0x200000a4
 80005c4:	20000158 	.word	0x20000158

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fe3f 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f879 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f9d7 	bl	8000988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f9ab 	bl	8000934 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005de:	f000 f8df 	bl	80007a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e2:	f000 f94d 	bl	8000880 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Timer que captura el ECHO del sensor
 80005e6:	2100      	movs	r1, #0
 80005e8:	482b      	ldr	r0, [pc, #172]	; (8000698 <main+0xd0>)
 80005ea:	f001 fffb 	bl	80025e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		//Timer que genera la señal sonora
 80005ee:	2100      	movs	r1, #0
 80005f0:	482a      	ldr	r0, [pc, #168]	; (800069c <main+0xd4>)
 80005f2:	f001 feed 	bl	80023d0 <HAL_TIM_PWM_Start>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  semaforo1=xSemaphoreCreateBinary();
 80005f6:	2203      	movs	r2, #3
 80005f8:	2100      	movs	r1, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	f003 fe52 	bl	80042a4 <xQueueGenericCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <main+0xd8>)
 8000604:	6013      	str	r3, [r2, #0]
  semaforo2=xSemaphoreCreateBinary();
 8000606:	2203      	movs	r2, #3
 8000608:	2100      	movs	r1, #0
 800060a:	2001      	movs	r0, #1
 800060c:	f003 fe4a 	bl	80042a4 <xQueueGenericCreate>
 8000610:	4603      	mov	r3, r0
 8000612:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <main+0xdc>)
 8000614:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(semaforo1);
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <main+0xd8>)
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	f003 fe9a 	bl	8004358 <xQueueGenericSend>
  xSemaphoreGive(semaforo2);
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <main+0xdc>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	f003 fe93 	bl	8004358 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <main+0xe0>)
 8000634:	1d3c      	adds	r4, r7, #4
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fcc2 	bl	8003fd2 <osThreadCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0xe4>)
 8000652:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((void*) TrigSensor, "trigger", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 8000654:	2300      	movs	r3, #0
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	2302      	movs	r3, #2
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	4913      	ldr	r1, [pc, #76]	; (80006b0 <main+0xe8>)
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <main+0xec>)
 8000664:	f004 fa6f 	bl	8004b46 <xTaskCreate>
  xTaskCreate((void*) FiltroDistancia, "filtro", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, NULL);
 8000668:	2300      	movs	r3, #0
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2303      	movs	r3, #3
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	4910      	ldr	r1, [pc, #64]	; (80006b8 <main+0xf0>)
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0xf4>)
 8000678:	f004 fa65 	bl	8004b46 <xTaskCreate>
  xTaskCreate((void*) generacionPWM, "PWM", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 800067c:	2300      	movs	r3, #0
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2301      	movs	r3, #1
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	490d      	ldr	r1, [pc, #52]	; (80006c0 <main+0xf8>)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <main+0xfc>)
 800068c:	f004 fa5b 	bl	8004b46 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f003 fc98 	bl	8003fc4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0xcc>
 8000696:	bf00      	nop
 8000698:	20000358 	.word	0x20000358
 800069c:	200003a0 	.word	0x200003a0
 80006a0:	20000430 	.word	0x20000430
 80006a4:	20000434 	.word	0x20000434
 80006a8:	08007264 	.word	0x08007264
 80006ac:	2000042c 	.word	0x2000042c
 80006b0:	08007250 	.word	0x08007250
 80006b4:	08000b85 	.word	0x08000b85
 80006b8:	08007258 	.word	0x08007258
 80006bc:	08000bb5 	.word	0x08000bb5
 80006c0:	08007260 	.word	0x08007260
 80006c4:	08000cd5 	.word	0x08000cd5

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 f8d8 	bl	800688c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f870 	bl	8001838 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 fb57 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fad2 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 fb41 	bl	8000e10 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_TIM2_Init+0xdc>)
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_TIM2_Init+0xdc>)
 80007d4:	2253      	movs	r2, #83	; 0x53
 80007d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_TIM2_Init+0xdc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_TIM2_Init+0xdc>)
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_TIM2_Init+0xdc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_TIM2_Init+0xdc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <MX_TIM2_Init+0xdc>)
 80007f4:	f001 fcea 	bl	80021cc <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007fe:	f000 fb07 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	4619      	mov	r1, r3
 800080e:	481b      	ldr	r0, [pc, #108]	; (800087c <MX_TIM2_Init+0xdc>)
 8000810:	f002 fa68 	bl	8002ce4 <HAL_TIM_ConfigClockSource>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800081a:	f000 faf9 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <MX_TIM2_Init+0xdc>)
 8000820:	f001 fe86 	bl	8002530 <HAL_TIM_IC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800082a:	f000 faf1 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <MX_TIM2_Init+0xdc>)
 800083e:	f002 ff65 	bl	800370c <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000848:	f000 fae2 	bl	8000e10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_TIM2_Init+0xdc>)
 8000864:	f002 f8e0 	bl	8002a28 <HAL_TIM_IC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800086e:	f000 facf 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000358 	.word	0x20000358

08000880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_TIM3_Init+0xac>)
 80008a4:	4a22      	ldr	r2, [pc, #136]	; (8000930 <MX_TIM3_Init+0xb0>)
 80008a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_TIM3_Init+0xac>)
 80008aa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80008ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_TIM3_Init+0xac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_TIM3_Init+0xac>)
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_TIM3_Init+0xac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_TIM3_Init+0xac>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <MX_TIM3_Init+0xac>)
 80008ca:	f001 fd31 	bl	8002330 <HAL_TIM_PWM_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 fa9c 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4619      	mov	r1, r3
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <MX_TIM3_Init+0xac>)
 80008e8:	f002 ff10 	bl	800370c <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008f2:	f000 fa8d 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f6:	2360      	movs	r3, #96	; 0x60
 80008f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80008fa:	2332      	movs	r3, #50	; 0x32
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_TIM3_Init+0xac>)
 800090e:	f002 f927 	bl	8002b60 <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000918:	f000 fa7a 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <MX_TIM3_Init+0xac>)
 800091e:	f000 fb19 	bl	8000f54 <HAL_TIM_MspPostInit>

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200003a0 	.word	0x200003a0
 8000930:	40000400 	.word	0x40000400

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f002 ff50 	bl	8003810 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 fa4b 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200003e8 	.word	0x200003e8
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_GPIO_Init+0xe0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2121      	movs	r1, #33	; 0x21
 8000a12:	4816      	ldr	r0, [pc, #88]	; (8000a6c <MX_GPIO_Init+0xe4>)
 8000a14:	f000 fec4 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_GPIO_Init+0xe8>)
 8000a30:	f000 fd32 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|LD2_Pin;
 8000a34:	2321      	movs	r3, #33	; 0x21
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_GPIO_Init+0xe4>)
 8000a4c:	f000 fd24 	bl	8001498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2105      	movs	r1, #5
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f000 fcf5 	bl	8001444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5a:	2028      	movs	r0, #40	; 0x28
 8000a5c:	f000 fd0e 	bl	800147c <HAL_NVIC_EnableIRQ>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020800 	.word	0x40020800

08000a74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000a82:	f000 fea6 	bl	80017d2 <HAL_GPIO_TogglePin>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	// Calculo el ancho del pulso que triguereó la interrupción
	if(flancoAscendenteCapturado==0){
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d11b      	bne.n	8000adc <HAL_TIM_IC_CaptureCallback+0x48>
		valorInicial=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f002 f9e4 	bl	8002e74 <HAL_TIM_ReadCapturedValue>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ab2:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=1;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a1a      	ldr	r2, [r3, #32]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 020a 	bic.w	r2, r2, #10
 8000ac8:	621a      	str	r2, [r3, #32]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6a1a      	ldr	r2, [r3, #32]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f042 0202 	orr.w	r2, r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
			pulso=valorFinal-valorInicial;
		else if (valorFinal <= valorInicial)
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorInicial+valorFinal;
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);
	}
}
 8000ada:	e042      	b.n	8000b62 <HAL_TIM_IC_CaptureCallback+0xce>
	else if(flancoAscendenteCapturado==1){
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d13e      	bne.n	8000b62 <HAL_TIM_IC_CaptureCallback+0xce>
		valorFinal=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f002 f9c4 	bl	8002e74 <HAL_TIM_ReadCapturedValue>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000af2:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=0;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6a1a      	ldr	r2, [r3, #32]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 020a 	bic.w	r2, r2, #10
 8000b08:	621a      	str	r2, [r3, #32]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6a12      	ldr	r2, [r2, #32]
 8000b14:	621a      	str	r2, [r3, #32]
		if(valorFinal>valorInicial)
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dd07      	ble.n	8000b32 <HAL_TIM_IC_CaptureCallback+0x9e>
			pulso=valorFinal-valorInicial;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e011      	b.n	8000b56 <HAL_TIM_IC_CaptureCallback+0xc2>
		else if (valorFinal <= valorInicial)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dc0b      	bgt.n	8000b56 <HAL_TIM_IC_CaptureCallback+0xc2>
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorInicial+valorFinal;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000b54:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fcf9 	bl	8004554 <xQueueGiveFromISR>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000043c 	.word	0x2000043c
 8000b70:	20000440 	.word	0x20000440
 8000b74:	20000444 	.word	0x20000444
 8000b78:	20000448 	.word	0x20000448
 8000b7c:	20000358 	.word	0x20000358
 8000b80:	20000430 	.word	0x20000430

08000b84 <TrigSensor>:


void TrigSensor(void const * argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <TrigSensor+0x2c>)
 8000b92:	f000 fe05 	bl	80017a0 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);		// Delay de 1 ms
 8000b96:	2001      	movs	r0, #1
 8000b98:	f004 f922 	bl	8004de0 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <TrigSensor+0x2c>)
 8000ba2:	f000 fdfd 	bl	80017a0 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);		//Delay de 40 ms (output máximo del sensor: 38 ms)
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f004 f91a 	bl	8004de0 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000bac:	e7ee      	b.n	8000b8c <TrigSensor+0x8>
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <FiltroDistancia>:
  /* USER CODE END 5 */
}


void FiltroDistancia(void const * argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b092      	sub	sp, #72	; 0x48
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	float32_t muestras[TAM_FILTRO]={0};
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
	arm_fir_instance_f32 filtro_fir;
	static float32_t firCoeffs32[TAM_FILTRO]={1};
	static float32_t firStateF32[BLOCK_SIZE + TAM_FILTRO - 1];
	float32_t a[1]={0};
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
	float32_t *outputF32=a;
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t tamano_filtro=TAM_FILTRO;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint32_t tam_bloque=BLOCK_SIZE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30

	arm_fir_init_f32(&filtro_fir, tamano_filtro,&firCoeffs32[0], &firStateF32[0],tam_bloque);
 8000be0:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8000be2:	f107 0010 	add.w	r0, r7, #16
 8000be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000bec:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <FiltroDistancia+0xf8>)
 8000bee:	f005 fb9d 	bl	800632c <arm_fir_init_f32>


  /* Infinite loop */
  while(1)
  {
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <FiltroDistancia+0xfc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f003 fd38 	bl	8004670 <xQueueSemaphoreTake>

	  //Muevo las muestras una posición hacia atras y agrego nueva muestra
	  for(int x=1;x<TAM_FILTRO;x++){
 8000c00:	2301      	movs	r3, #1
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c04:	e020      	b.n	8000c48 <FiltroDistancia+0x94>
		  muestras[x-1]=muestras[x];
 8000c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	3240      	adds	r2, #64	; 0x40
 8000c10:	443a      	add	r2, r7
 8000c12:	3a24      	subs	r2, #36	; 0x24
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	3340      	adds	r3, #64	; 0x40
 8000c1a:	443b      	add	r3, r7
 8000c1c:	3b24      	subs	r3, #36	; 0x24
 8000c1e:	601a      	str	r2, [r3, #0]
		  muestras[x] =(float) pulso/58; //Segun datasheet
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <FiltroDistancia+0x100>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c2c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000cb8 <FiltroDistancia+0x104>
 8000c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	3340      	adds	r3, #64	; 0x40
 8000c3a:	443b      	add	r3, r7
 8000c3c:	3b24      	subs	r3, #36	; 0x24
 8000c3e:	edc3 7a00 	vstr	s15, [r3]
	  for(int x=1;x<TAM_FILTRO;x++){
 8000c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c44:	3301      	adds	r3, #1
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d9db      	bls.n	8000c06 <FiltroDistancia+0x52>
	  }
	  //LLamo a filtro FIR de CMSIS-DSP
	  arm_fir_f32(&filtro_fir, muestras, outputF32, tam_bloque);
 8000c4e:	f107 011c 	add.w	r1, r7, #28
 8000c52:	f107 0010 	add.w	r0, r7, #16
 8000c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c5a:	f005 fb79 	bl	8006350 <arm_fir_f32>
	  distancia=(int) *outputF32;
 8000c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c68:	ee17 2a90 	vmov	r2, s15
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <FiltroDistancia+0x108>)
 8000c6e:	601a      	str	r2, [r3, #0]

	  //debug con uart
	  uartBufferLen=sprintf(uart_buf,"%u Cm \r\n",distancia);
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <FiltroDistancia+0x108>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4912      	ldr	r1, [pc, #72]	; (8000cc0 <FiltroDistancia+0x10c>)
 8000c78:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <FiltroDistancia+0x110>)
 8000c7a:	f005 ff1d 	bl	8006ab8 <siprintf>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <FiltroDistancia+0x114>)
 8000c84:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <FiltroDistancia+0x114>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <FiltroDistancia+0x110>)
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <FiltroDistancia+0x118>)
 8000c94:	f002 fe09 	bl	80038aa <HAL_UART_Transmit>

	  //Suelto semáforo 2 para que lo agarre generacionPWM()
	  xSemaphoreGive(semaforo2);
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <FiltroDistancia+0x11c>)
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f003 fb59 	bl	8004358 <xQueueGenericSend>
  {
 8000ca6:	e7a4      	b.n	8000bf2 <FiltroDistancia+0x3e>
 8000ca8:	20000484 	.word	0x20000484
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000430 	.word	0x20000430
 8000cb4:	20000448 	.word	0x20000448
 8000cb8:	42680000 	.word	0x42680000
 8000cbc:	20000438 	.word	0x20000438
 8000cc0:	08007280 	.word	0x08007280
 8000cc4:	20000450 	.word	0x20000450
 8000cc8:	2000044c 	.word	0x2000044c
 8000ccc:	200003e8 	.word	0x200003e8
 8000cd0:	20000434 	.word	0x20000434

08000cd4 <generacionPWM>:
	  }
  /* USER CODE END 5 */
}

void generacionPWM(void const * argument){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	int pwm;
	int pwm_ant=0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
	while(1){
		xSemaphoreTake(semaforo2,portMAX_DELAY);
 8000ce0:	4b32      	ldr	r3, [pc, #200]	; (8000dac <generacionPWM+0xd8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fcc1 	bl	8004670 <xQueueSemaphoreTake>

		if(distancia>600)	//si el sensor indica que no recibió el pulso, seteo la distancia máxima que puede medir
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <generacionPWM+0xdc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000cf6:	dd02      	ble.n	8000cfe <generacionPWM+0x2a>
			pwm = 600;
 8000cf8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cfc:	60fb      	str	r3, [r7, #12]

		// redondeo los períodos posibles a multiplos de 5
		if(distancia % 10 < 5)
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <generacionPWM+0xdc>)
 8000d00:	6819      	ldr	r1, [r3, #0]
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <generacionPWM+0xe0>)
 8000d04:	fb83 2301 	smull	r2, r3, r3, r1
 8000d08:	109a      	asrs	r2, r3, #2
 8000d0a:	17cb      	asrs	r3, r1, #31
 8000d0c:	1ad2      	subs	r2, r2, r3
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	1aca      	subs	r2, r1, r3
 8000d18:	2a04      	cmp	r2, #4
 8000d1a:	dc11      	bgt.n	8000d40 <generacionPWM+0x6c>
			pwm = distancia - distancia % 10;
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <generacionPWM+0xdc>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <generacionPWM+0xdc>)
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <generacionPWM+0xe0>)
 8000d26:	fb83 2301 	smull	r2, r3, r3, r1
 8000d2a:	109a      	asrs	r2, r3, #2
 8000d2c:	17cb      	asrs	r3, r1, #31
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1aca      	subs	r2, r1, r3
 8000d3a:	1a83      	subs	r3, r0, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e021      	b.n	8000d84 <generacionPWM+0xb0>
		else if(distancia % 10 >=5)
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <generacionPWM+0xdc>)
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <generacionPWM+0xe0>)
 8000d46:	fb83 2301 	smull	r2, r3, r3, r1
 8000d4a:	109a      	asrs	r2, r3, #2
 8000d4c:	17cb      	asrs	r3, r1, #31
 8000d4e:	1ad2      	subs	r2, r2, r3
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	1aca      	subs	r2, r1, r3
 8000d5a:	2a04      	cmp	r2, #4
 8000d5c:	dd12      	ble.n	8000d84 <generacionPWM+0xb0>
			pwm = distancia + 10 -distancia % 10;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <generacionPWM+0xdc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f103 000a 	add.w	r0, r3, #10
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <generacionPWM+0xdc>)
 8000d68:	6819      	ldr	r1, [r3, #0]
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <generacionPWM+0xe0>)
 8000d6c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d70:	109a      	asrs	r2, r3, #2
 8000d72:	17cb      	asrs	r3, r1, #31
 8000d74:	1ad2      	subs	r2, r2, r3
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	1aca      	subs	r2, r1, r3
 8000d80:	1a83      	subs	r3, r0, r2
 8000d82:	60fb      	str	r3, [r7, #12]

		//uart debug
//		uartBufferLen=sprintf(uart_buf,"%u pwm \r\n",pwm);
//		HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);

		if(pwm!=pwm_ant){
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d0a9      	beq.n	8000ce0 <generacionPWM+0xc>
			TIM3->ARR = pwm;	//seteo período del pulso
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <generacionPWM+0xe4>)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR1 = pwm/2;	//seteo tiempo que el pulso está en HIGH (la mitad para tener duty cicle=50%)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	0fda      	lsrs	r2, r3, #31
 8000d96:	4413      	add	r3, r2
 8000d98:	105b      	asrs	r3, r3, #1
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <generacionPWM+0xe4>)
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CNT=0;		//reseteo cuenta para evitar cambiar ARR a un valor más chico que la cuenta y que el timer siga de largo
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <generacionPWM+0xe4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
			pwm_ant=pwm;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
		xSemaphoreTake(semaforo2,portMAX_DELAY);
 8000daa:	e799      	b.n	8000ce0 <generacionPWM+0xc>
 8000dac:	20000434 	.word	0x20000434
 8000db0:	20000438 	.word	0x20000438
 8000db4:	66666667 	.word	0x66666667
 8000db8:	40000400 	.word	0x40000400

08000dbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <StartDefaultTask+0x2c>)
 8000dca:	f000 fce9 	bl	80017a0 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);		// Delay de 1 ms
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f004 f806 	bl	8004de0 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <StartDefaultTask+0x2c>)
 8000dda:	f000 fce1 	bl	80017a0 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);		//Delay de 40 ms (output máximo del sensor: 38 ms)
 8000dde:	2028      	movs	r0, #40	; 0x28
 8000de0:	f003 fffe 	bl	8004de0 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000de4:	e7ee      	b.n	8000dc4 <StartDefaultTask+0x8>
 8000de6:	bf00      	nop
 8000de8:	40020000 	.word	0x40020000

08000dec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dfe:	f000 fa49 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40010000 	.word	0x40010000

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_MspInit+0x54>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <HAL_MspInit+0x54>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_MspInit+0x54>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_MspInit+0x54>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_MspInit+0x54>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_MspInit+0x54>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	f06f 0001 	mvn.w	r0, #1
 8000e62:	f000 faef 	bl	8001444 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d134      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_TIM_Base_MspInit+0x94>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_TIM_Base_MspInit+0x94>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_TIM_Base_MspInit+0x94>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_TIM_Base_MspInit+0x94>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_TIM_Base_MspInit+0x94>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_TIM_Base_MspInit+0x94>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4808      	ldr	r0, [pc, #32]	; (8000f0c <HAL_TIM_Base_MspInit+0x98>)
 8000eec:	f000 fad4 	bl	8001498 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2105      	movs	r1, #5
 8000ef4:	201c      	movs	r0, #28
 8000ef6:	f000 faa5 	bl	8001444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000efa:	201c      	movs	r0, #28
 8000efc:	f000 fabe 	bl	800147c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10d      	bne.n	8000f3e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_PWM_MspInit+0x40>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_TIM_PWM_MspInit+0x40>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_TIM_PWM_MspInit+0x40>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40000400 	.word	0x40000400
 8000f50:	40023800 	.word	0x40023800

08000f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_TIM_MspPostInit+0x68>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d11d      	bne.n	8000fb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_TIM_MspPostInit+0x6c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <HAL_TIM_MspPostInit+0x6c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_TIM_MspPostInit+0x6c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f92:	2340      	movs	r3, #64	; 0x40
 8000f94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <HAL_TIM_MspPostInit+0x70>)
 8000fae:	f000 fa73 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40000400 	.word	0x40000400
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_UART_MspInit+0x84>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12b      	bne.n	8001042 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_UART_MspInit+0x88>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_UART_MspInit+0x88>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001022:	230c      	movs	r3, #12
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001032:	2307      	movs	r3, #7
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_UART_MspInit+0x8c>)
 800103e:	f000 fa2b 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004400 	.word	0x40004400
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000

08001058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	2019      	movs	r0, #25
 800106e:	f000 f9e9 	bl	8001444 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001072:	2019      	movs	r0, #25
 8001074:	f000 fa02 	bl	800147c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_InitTick+0xa0>)
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_InitTick+0xa0>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6453      	str	r3, [r2, #68]	; 0x44
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_InitTick+0xa0>)
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001094:	f107 0210 	add.w	r2, r7, #16
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f862 	bl	8002168 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010a4:	f001 f84c 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 80010a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_InitTick+0xa4>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	0c9b      	lsrs	r3, r3, #18
 80010b4:	3b01      	subs	r3, #1
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_InitTick+0xa8>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <HAL_InitTick+0xac>)
 80010bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_InitTick+0xa8>)
 80010c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_InitTick+0xa8>)
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_InitTick+0xa8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_InitTick+0xa8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_InitTick+0xa8>)
 80010da:	f001 f877 	bl	80021cc <HAL_TIM_Base_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d104      	bne.n	80010ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <HAL_InitTick+0xa8>)
 80010e6:	f001 f8c1 	bl	800226c <HAL_TIM_Base_Start_IT>
 80010ea:	4603      	mov	r3, r0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3730      	adds	r7, #48	; 0x30
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	431bde83 	.word	0x431bde83
 8001100:	20000498 	.word	0x20000498
 8001104:	40010000 	.word	0x40010000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800113a:	f001 fb6d 	bl	8002818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000498 	.word	0x20000498

08001148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM2_IRQHandler+0x10>)
 800114e:	f001 fb63 	bl	8002818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000358 	.word	0x20000358

0800115c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001160:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001164:	f000 fb50 	bl	8001808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f005 fb3c 	bl	8006818 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20018000 	.word	0x20018000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	200004e0 	.word	0x200004e0
 80011d4:	20004250 	.word	0x20004250

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	; (8001248 <LoopFillZerobss+0x26>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001226:	f7ff ffd7 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f005 fafb 	bl	8006824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f9cb 	bl	80005c8 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001234:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001240:	08007350 	.word	0x08007350
  ldr r2, =_sbss
 8001244:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001248:	2000424c 	.word	0x2000424c

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f8d8 	bl	800142e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	200f      	movs	r0, #15
 8001280:	f7ff feea 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fdca 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000001c 	.word	0x2000001c
 80012b8:	200004e4 	.word	0x200004e4

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200004e4 	.word	0x200004e4

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff4c 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001456:	f7ff ff61 	bl	800131c <__NVIC_GetPriorityGrouping>
 800145a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	6978      	ldr	r0, [r7, #20]
 8001462:	f7ff ffb1 	bl	80013c8 <NVIC_EncodePriority>
 8001466:	4602      	mov	r2, r0
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff80 	bl	8001374 <__NVIC_SetPriority>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff54 	bl	8001338 <__NVIC_EnableIRQ>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e159      	b.n	8001768 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8148 	bne.w	8001762 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d005      	beq.n	80014ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d130      	bne.n	800154c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 0201 	and.w	r2, r3, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d017      	beq.n	8001588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d123      	bne.n	80015dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a2 	beq.w	8001762 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a56      	ldr	r2, [pc, #344]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b54      	ldr	r3, [pc, #336]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800163a:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a49      	ldr	r2, [pc, #292]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d019      	beq.n	800169a <HAL_GPIO_Init+0x202>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2f4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0x1fe>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a47      	ldr	r2, [pc, #284]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00d      	beq.n	8001692 <HAL_GPIO_Init+0x1fa>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a46      	ldr	r2, [pc, #280]	; (8001794 <HAL_GPIO_Init+0x2fc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d007      	beq.n	800168e <HAL_GPIO_Init+0x1f6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a45      	ldr	r2, [pc, #276]	; (8001798 <HAL_GPIO_Init+0x300>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_GPIO_Init+0x1f2>
 8001686:	2304      	movs	r3, #4
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x204>
 800168a:	2307      	movs	r3, #7
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x204>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x204>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x204>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x204>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_GPIO_Init+0x304>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_GPIO_Init+0x304>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_GPIO_Init+0x304>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_GPIO_Init+0x304>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_GPIO_Init+0x304>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001732:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_GPIO_Init+0x304>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_GPIO_Init+0x304>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_GPIO_Init+0x304>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f aea2 	bls.w	80014b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40013800 	.word	0x40013800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	041a      	lsls	r2, r3, #16
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	400b      	ands	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	619a      	str	r2, [r3, #24]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f924 	bl	8000a74 <HAL_GPIO_EXTI_Callback>
  }
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40013c00 	.word	0x40013c00

08001838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e267      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d075      	beq.n	8001942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b04      	cmp	r3, #4
 8001860:	d00c      	beq.n	800187c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001862:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186a:	2b08      	cmp	r3, #8
 800186c:	d112      	bne.n	8001894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186e:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800187a:	d10b      	bne.n	8001894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d05b      	beq.n	8001940 <HAL_RCC_OscConfig+0x108>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d157      	bne.n	8001940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e242      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x74>
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e01d      	b.n	80018e8 <HAL_RCC_OscConfig+0xb0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x98>
 80018b6:	4b70      	ldr	r3, [pc, #448]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6f      	ldr	r2, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6c      	ldr	r2, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0xb0>
 80018d0:	4b69      	ldr	r3, [pc, #420]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a68      	ldr	r2, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a65      	ldr	r2, [pc, #404]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fce4 	bl	80012bc <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fce0 	bl	80012bc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e207      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0xc0>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fcd0 	bl	80012bc <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fccc 	bl	80012bc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1f3      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0xe8>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800194e:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001962:	2b08      	cmp	r3, #8
 8001964:	d11c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x152>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e1c7      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4937      	ldr	r1, [pc, #220]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e03a      	b.n	8001a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x244>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff fc85 	bl	80012bc <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fc81 	bl	80012bc <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1a8      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4925      	ldr	r1, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x244>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc64 	bl	80012bc <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff fc60 	bl	80012bc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e187      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d036      	beq.n	8001a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_RCC_OscConfig+0x248>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fc44 	bl	80012bc <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff fc40 	bl	80012bc <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e167      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x200>
 8001a56:	e01b      	b.n	8001a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_OscConfig+0x248>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fc2d 	bl	80012bc <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	e00e      	b.n	8001a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff fc29 	bl	80012bc <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d907      	bls.n	8001a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e150      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	42470000 	.word	0x42470000
 8001a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ea      	bne.n	8001a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8097 	beq.w	8001bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a7c      	ldr	r2, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b77      	ldr	r3, [pc, #476]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b74      	ldr	r3, [pc, #464]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a73      	ldr	r2, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fbe9 	bl	80012bc <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7ff fbe5 	bl	80012bc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e10c      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2ea>
 8001b14:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x324>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x30c>
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	4b5c      	ldr	r3, [pc, #368]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x324>
 8001b44:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	4b55      	ldr	r3, [pc, #340]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fbaa 	bl	80012bc <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fba6 	bl	80012bc <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0cb      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ee      	beq.n	8001b6c <HAL_RCC_OscConfig+0x334>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7ff fb94 	bl	80012bc <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff fb90 	bl	80012bc <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0b5      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a1 	beq.w	8001d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d05c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d141      	bne.n	8001c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fb64 	bl	80012bc <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff fb60 	bl	80012bc <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e087      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	491b      	ldr	r1, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fb39 	bl	80012bc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff fb35 	bl	80012bc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e05c      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x416>
 8001c6c:	e054      	b.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fb22 	bl	80012bc <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff fb1e 	bl	80012bc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e045      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x444>
 8001c9a:	e03d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e038      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4ec>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d028      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d121      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d11a      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0cc      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d90c      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a52      	ldr	r2, [pc, #328]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494d      	ldr	r1, [pc, #308]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d044      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d119      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e067      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4934      	ldr	r1, [pc, #208]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fa50 	bl	80012bc <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff fa4c 	bl	80012bc <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e04f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d20c      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4916      	ldr	r1, [pc, #88]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f821 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	5ccb      	ldrb	r3, [r1, r3]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f8c2 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08007294 	.word	0x08007294
 8001eec:	20000014 	.word	0x20000014
 8001ef0:	20000018 	.word	0x20000018

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef8:	b094      	sub	sp, #80	; 0x50
 8001efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	647b      	str	r3, [r7, #68]	; 0x44
 8001f00:	2300      	movs	r3, #0
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f04:	2300      	movs	r3, #0
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f0c:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d00d      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x40>
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	f200 80e1 	bhi.w	80020e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x34>
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f26:	e0db      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f2c:	e0db      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f32:	e0d8      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f34:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3e:	4b6d      	ldr	r3, [pc, #436]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d063      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4a:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	2200      	movs	r2, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f5e:	2300      	movs	r3, #0
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
 8001f62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f66:	4622      	mov	r2, r4
 8001f68:	462b      	mov	r3, r5
 8001f6a:	f04f 0000 	mov.w	r0, #0
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	0159      	lsls	r1, r3, #5
 8001f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f78:	0150      	lsls	r0, r2, #5
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4621      	mov	r1, r4
 8001f80:	1a51      	subs	r1, r2, r1
 8001f82:	6139      	str	r1, [r7, #16]
 8001f84:	4629      	mov	r1, r5
 8001f86:	eb63 0301 	sbc.w	r3, r3, r1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f98:	4659      	mov	r1, fp
 8001f9a:	018b      	lsls	r3, r1, #6
 8001f9c:	4651      	mov	r1, sl
 8001f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa2:	4651      	mov	r1, sl
 8001fa4:	018a      	lsls	r2, r1, #6
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	ebb2 0801 	subs.w	r8, r2, r1
 8001fac:	4659      	mov	r1, fp
 8001fae:	eb63 0901 	sbc.w	r9, r3, r1
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fc6:	4690      	mov	r8, r2
 8001fc8:	4699      	mov	r9, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	eb18 0303 	adds.w	r3, r8, r3
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	eb49 0303 	adc.w	r3, r9, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	024b      	lsls	r3, r1, #9
 8001fea:	4621      	mov	r1, r4
 8001fec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	024a      	lsls	r2, r1, #9
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002004:	f7fe f93c 	bl	8000280 <__aeabi_uldivmod>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4613      	mov	r3, r2
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002010:	e058      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	2200      	movs	r2, #0
 800201a:	4618      	mov	r0, r3
 800201c:	4611      	mov	r1, r2
 800201e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
 8002028:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800202c:	4642      	mov	r2, r8
 800202e:	464b      	mov	r3, r9
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	0159      	lsls	r1, r3, #5
 800203a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800203e:	0150      	lsls	r0, r2, #5
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4641      	mov	r1, r8
 8002046:	ebb2 0a01 	subs.w	sl, r2, r1
 800204a:	4649      	mov	r1, r9
 800204c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800205c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002060:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002064:	ebb2 040a 	subs.w	r4, r2, sl
 8002068:	eb63 050b 	sbc.w	r5, r3, fp
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	00eb      	lsls	r3, r5, #3
 8002076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207a:	00e2      	lsls	r2, r4, #3
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	4643      	mov	r3, r8
 8002082:	18e3      	adds	r3, r4, r3
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	464b      	mov	r3, r9
 8002088:	eb45 0303 	adc.w	r3, r5, r3
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800209a:	4629      	mov	r1, r5
 800209c:	028b      	lsls	r3, r1, #10
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020a4:	4621      	mov	r1, r4
 80020a6:	028a      	lsls	r2, r1, #10
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ae:	2200      	movs	r2, #0
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	61fa      	str	r2, [r7, #28]
 80020b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b8:	f7fe f8e2 	bl	8000280 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3750      	adds	r7, #80	; 0x50
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_GetHCLKFreq+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000014 	.word	0x20000014

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800211c:	f7ff fff0 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	080072a4 	.word	0x080072a4

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002144:	f7ff ffdc 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0b5b      	lsrs	r3, r3, #13
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	080072a4 	.word	0x080072a4

08002168 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	220f      	movs	r2, #15
 8002176:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_GetClockConfig+0x5c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0203 	and.w	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_RCC_GetClockConfig+0x60>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0207 	and.w	r2, r3, #7
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40023c00 	.word	0x40023c00

080021cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe fe3e 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fe94 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d001      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e044      	b.n	800230e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_TIM_Base_Start_IT+0xb0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ae:	d013      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_TIM_Base_Start_IT+0xb4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_TIM_Base_Start_IT+0xb8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_TIM_Base_Start_IT+0xbc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_TIM_Base_Start_IT+0xc0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d010      	beq.n	800230c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	e007      	b.n	800230c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800
 8002328:	40000c00 	.word	0x40000c00
 800232c:	40014000 	.word	0x40014000

08002330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e041      	b.n	80023c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fdda 	bl	8000f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f000 fde2 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_TIM_PWM_Start+0x24>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e022      	b.n	800243a <HAL_TIM_PWM_Start+0x6a>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d109      	bne.n	800240e <HAL_TIM_PWM_Start+0x3e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	e015      	b.n	800243a <HAL_TIM_PWM_Start+0x6a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d109      	bne.n	8002428 <HAL_TIM_PWM_Start+0x58>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e008      	b.n	800243a <HAL_TIM_PWM_Start+0x6a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e068      	b.n	8002514 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_TIM_PWM_Start+0x82>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002450:	e013      	b.n	800247a <HAL_TIM_PWM_Start+0xaa>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d104      	bne.n	8002462 <HAL_TIM_PWM_Start+0x92>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	e00b      	b.n	800247a <HAL_TIM_PWM_Start+0xaa>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d104      	bne.n	8002472 <HAL_TIM_PWM_Start+0xa2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002470:	e003      	b.n	800247a <HAL_TIM_PWM_Start+0xaa>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f001 f91c 	bl	80036c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_TIM_PWM_Start+0x14c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d107      	bne.n	80024a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_TIM_PWM_Start+0x14c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d018      	beq.n	80024de <HAL_TIM_PWM_Start+0x10e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b4:	d013      	beq.n	80024de <HAL_TIM_PWM_Start+0x10e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_TIM_PWM_Start+0x150>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00e      	beq.n	80024de <HAL_TIM_PWM_Start+0x10e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_TIM_PWM_Start+0x154>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_TIM_PWM_Start+0x10e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_TIM_PWM_Start+0x158>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_TIM_PWM_Start+0x10e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_TIM_PWM_Start+0x15c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d111      	bne.n	8002502 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d010      	beq.n	8002512 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	e007      	b.n	8002512 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40010000 	.word	0x40010000
 8002520:	40000400 	.word	0x40000400
 8002524:	40000800 	.word	0x40000800
 8002528:	40000c00 	.word	0x40000c00
 800252c:	40014000 	.word	0x40014000

08002530 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e041      	b.n	80025c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f839 	bl	80025ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f000 fce2 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <HAL_TIM_IC_Start_IT+0x1e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	e013      	b.n	800262a <HAL_TIM_IC_Start_IT+0x46>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d104      	bne.n	8002612 <HAL_TIM_IC_Start_IT+0x2e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e00b      	b.n	800262a <HAL_TIM_IC_Start_IT+0x46>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d104      	bne.n	8002622 <HAL_TIM_IC_Start_IT+0x3e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e003      	b.n	800262a <HAL_TIM_IC_Start_IT+0x46>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	b2db      	uxtb	r3, r3
 800262a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d104      	bne.n	800263c <HAL_TIM_IC_Start_IT+0x58>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e013      	b.n	8002664 <HAL_TIM_IC_Start_IT+0x80>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d104      	bne.n	800264c <HAL_TIM_IC_Start_IT+0x68>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e00b      	b.n	8002664 <HAL_TIM_IC_Start_IT+0x80>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b08      	cmp	r3, #8
 8002650:	d104      	bne.n	800265c <HAL_TIM_IC_Start_IT+0x78>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e003      	b.n	8002664 <HAL_TIM_IC_Start_IT+0x80>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002662:	b2db      	uxtb	r3, r3
 8002664:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002666:	7bbb      	ldrb	r3, [r7, #14]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d102      	bne.n	8002672 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800266c:	7b7b      	ldrb	r3, [r7, #13]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0c2      	b.n	80027fc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d104      	bne.n	8002686 <HAL_TIM_IC_Start_IT+0xa2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002684:	e013      	b.n	80026ae <HAL_TIM_IC_Start_IT+0xca>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d104      	bne.n	8002696 <HAL_TIM_IC_Start_IT+0xb2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002694:	e00b      	b.n	80026ae <HAL_TIM_IC_Start_IT+0xca>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_IC_Start_IT+0xc2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a4:	e003      	b.n	80026ae <HAL_TIM_IC_Start_IT+0xca>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <HAL_TIM_IC_Start_IT+0xda>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026bc:	e013      	b.n	80026e6 <HAL_TIM_IC_Start_IT+0x102>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_IC_Start_IT+0xea>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026cc:	e00b      	b.n	80026e6 <HAL_TIM_IC_Start_IT+0x102>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d104      	bne.n	80026de <HAL_TIM_IC_Start_IT+0xfa>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026dc:	e003      	b.n	80026e6 <HAL_TIM_IC_Start_IT+0x102>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d841      	bhi.n	8002770 <HAL_TIM_IC_Start_IT+0x18c>
 80026ec:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <HAL_TIM_IC_Start_IT+0x110>)
 80026ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f2:	bf00      	nop
 80026f4:	08002729 	.word	0x08002729
 80026f8:	08002771 	.word	0x08002771
 80026fc:	08002771 	.word	0x08002771
 8002700:	08002771 	.word	0x08002771
 8002704:	0800273b 	.word	0x0800273b
 8002708:	08002771 	.word	0x08002771
 800270c:	08002771 	.word	0x08002771
 8002710:	08002771 	.word	0x08002771
 8002714:	0800274d 	.word	0x0800274d
 8002718:	08002771 	.word	0x08002771
 800271c:	08002771 	.word	0x08002771
 8002720:	08002771 	.word	0x08002771
 8002724:	0800275f 	.word	0x0800275f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0202 	orr.w	r2, r2, #2
 8002736:	60da      	str	r2, [r3, #12]
      break;
 8002738:	e01d      	b.n	8002776 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0204 	orr.w	r2, r2, #4
 8002748:	60da      	str	r2, [r3, #12]
      break;
 800274a:	e014      	b.n	8002776 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0208 	orr.w	r2, r2, #8
 800275a:	60da      	str	r2, [r3, #12]
      break;
 800275c:	e00b      	b.n	8002776 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0210 	orr.w	r2, r2, #16
 800276c:	60da      	str	r2, [r3, #12]
      break;
 800276e:	e002      	b.n	8002776 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	bf00      	nop
  }

  if (status == HAL_OK)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d13e      	bne.n	80027fa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2201      	movs	r2, #1
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 ff9b 	bl	80036c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_TIM_IC_Start_IT+0x220>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d018      	beq.n	80027c6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d013      	beq.n	80027c6 <HAL_TIM_IC_Start_IT+0x1e2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_TIM_IC_Start_IT+0x224>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_TIM_IC_Start_IT+0x228>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a16      	ldr	r2, [pc, #88]	; (8002810 <HAL_TIM_IC_Start_IT+0x22c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_TIM_IC_Start_IT+0x230>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d111      	bne.n	80027ea <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d010      	beq.n	80027fa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e8:	e007      	b.n	80027fa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40010000 	.word	0x40010000
 8002808:	40000400 	.word	0x40000400
 800280c:	40000800 	.word	0x40000800
 8002810:	40000c00 	.word	0x40000c00
 8002814:	40014000 	.word	0x40014000

08002818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0202 	mvn.w	r2, #2
 8002844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe f91a 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fb4a 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fb51 	bl	8002f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b04      	cmp	r3, #4
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0204 	mvn.w	r2, #4
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe f8f0 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fb20 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fb27 	bl	8002f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0208 	mvn.w	r2, #8
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2204      	movs	r2, #4
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe f8c6 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 faf6 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fafd 	bl	8002f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b10      	cmp	r3, #16
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b10      	cmp	r3, #16
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0210 	mvn.w	r2, #16
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2208      	movs	r2, #8
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe f89c 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 facc 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fad3 	bl	8002f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10e      	bne.n	800299c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0201 	mvn.w	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fa28 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d10e      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d107      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 ff1a 	bl	80037fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d107      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa98 	bl	8002f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d107      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0220 	mvn.w	r2, #32
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fee4 	bl	80037e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e088      	b.n	8002b58 <HAL_TIM_IC_ConfigChannel+0x130>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f000 fc74 	bl	8003350 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 020c 	bic.w	r2, r2, #12
 8002a76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6999      	ldr	r1, [r3, #24]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	619a      	str	r2, [r3, #24]
 8002a8a:	e060      	b.n	8002b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d11c      	bne.n	8002acc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f000 fcec 	bl	800347e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ab4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6999      	ldr	r1, [r3, #24]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	021a      	lsls	r2, r3, #8
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	619a      	str	r2, [r3, #24]
 8002aca:	e040      	b.n	8002b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11b      	bne.n	8002b0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f000 fd39 	bl	8003558 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 020c 	bic.w	r2, r2, #12
 8002af4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69d9      	ldr	r1, [r3, #28]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	61da      	str	r2, [r3, #28]
 8002b08:	e021      	b.n	8002b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d11c      	bne.n	8002b4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f000 fd56 	bl	80035d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69d9      	ldr	r1, [r3, #28]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	61da      	str	r2, [r3, #28]
 8002b48:	e001      	b.n	8002b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0ae      	b.n	8002cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	f200 809f 	bhi.w	8002ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002bc9 	.word	0x08002bc9
 8002b98:	08002ccd 	.word	0x08002ccd
 8002b9c:	08002ccd 	.word	0x08002ccd
 8002ba0:	08002ccd 	.word	0x08002ccd
 8002ba4:	08002c09 	.word	0x08002c09
 8002ba8:	08002ccd 	.word	0x08002ccd
 8002bac:	08002ccd 	.word	0x08002ccd
 8002bb0:	08002ccd 	.word	0x08002ccd
 8002bb4:	08002c4b 	.word	0x08002c4b
 8002bb8:	08002ccd 	.word	0x08002ccd
 8002bbc:	08002ccd 	.word	0x08002ccd
 8002bc0:	08002ccd 	.word	0x08002ccd
 8002bc4:	08002c8b 	.word	0x08002c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fa32 	bl	8003038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0208 	orr.w	r2, r2, #8
 8002be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0204 	bic.w	r2, r2, #4
 8002bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6999      	ldr	r1, [r3, #24]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	619a      	str	r2, [r3, #24]
      break;
 8002c06:	e064      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fa78 	bl	8003104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6999      	ldr	r1, [r3, #24]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	021a      	lsls	r2, r3, #8
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	619a      	str	r2, [r3, #24]
      break;
 8002c48:	e043      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fac3 	bl	80031dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0208 	orr.w	r2, r2, #8
 8002c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0204 	bic.w	r2, r2, #4
 8002c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69d9      	ldr	r1, [r3, #28]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	61da      	str	r2, [r3, #28]
      break;
 8002c88:	e023      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fb0d 	bl	80032b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69d9      	ldr	r1, [r3, #28]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	021a      	lsls	r2, r3, #8
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	61da      	str	r2, [r3, #28]
      break;
 8002cca:	e002      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_TIM_ConfigClockSource+0x1c>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e0b4      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x186>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d38:	d03e      	beq.n	8002db8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3e:	f200 8087 	bhi.w	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d46:	f000 8086 	beq.w	8002e56 <HAL_TIM_ConfigClockSource+0x172>
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	d87f      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b70      	cmp	r3, #112	; 0x70
 8002d52:	d01a      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0xa6>
 8002d54:	2b70      	cmp	r3, #112	; 0x70
 8002d56:	d87b      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b60      	cmp	r3, #96	; 0x60
 8002d5a:	d050      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x11a>
 8002d5c:	2b60      	cmp	r3, #96	; 0x60
 8002d5e:	d877      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b50      	cmp	r3, #80	; 0x50
 8002d62:	d03c      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0xfa>
 8002d64:	2b50      	cmp	r3, #80	; 0x50
 8002d66:	d873      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d058      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x13a>
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d86f      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b30      	cmp	r3, #48	; 0x30
 8002d72:	d064      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d74:	2b30      	cmp	r3, #48	; 0x30
 8002d76:	d86b      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d060      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d867      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d05c      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d05a      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	e062      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f000 fc71 	bl	8003680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
      break;
 8002db6:	e04f      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f000 fc5a 	bl	8003680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dda:	609a      	str	r2, [r3, #8]
      break;
 8002ddc:	e03c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 fb18 	bl	8003420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2150      	movs	r1, #80	; 0x50
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fc27 	bl	800364a <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e02c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f000 fb74 	bl	80034f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2160      	movs	r1, #96	; 0x60
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fc17 	bl	800364a <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e01c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f000 faf8 	bl	8003420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2140      	movs	r1, #64	; 0x40
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fc07 	bl	800364a <TIM_ITRx_SetConfig>
      break;
 8002e3c:	e00c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f000 fbfe 	bl	800364a <TIM_ITRx_SetConfig>
      break;
 8002e4e:	e003      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      break;
 8002e54:	e000      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d831      	bhi.n	8002eec <HAL_TIM_ReadCapturedValue+0x78>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ec5 	.word	0x08002ec5
 8002e94:	08002eed 	.word	0x08002eed
 8002e98:	08002eed 	.word	0x08002eed
 8002e9c:	08002eed 	.word	0x08002eed
 8002ea0:	08002ecf 	.word	0x08002ecf
 8002ea4:	08002eed 	.word	0x08002eed
 8002ea8:	08002eed 	.word	0x08002eed
 8002eac:	08002eed 	.word	0x08002eed
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	08002eed 	.word	0x08002eed
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002eed 	.word	0x08002eed
 8002ec0:	08002ee3 	.word	0x08002ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eca:	60fb      	str	r3, [r7, #12]

      break;
 8002ecc:	e00f      	b.n	8002eee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	60fb      	str	r3, [r7, #12]

      break;
 8002ed6:	e00a      	b.n	8002eee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	60fb      	str	r3, [r7, #12]

      break;
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	60fb      	str	r3, [r7, #12]

      break;
 8002eea:	e000      	b.n	8002eee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002eec:	bf00      	nop
  }

  return tmpreg;
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a34      	ldr	r2, [pc, #208]	; (800301c <TIM_Base_SetConfig+0xe4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00f      	beq.n	8002f70 <TIM_Base_SetConfig+0x38>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d00b      	beq.n	8002f70 <TIM_Base_SetConfig+0x38>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a31      	ldr	r2, [pc, #196]	; (8003020 <TIM_Base_SetConfig+0xe8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <TIM_Base_SetConfig+0x38>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a30      	ldr	r2, [pc, #192]	; (8003024 <TIM_Base_SetConfig+0xec>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x38>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	; (8003028 <TIM_Base_SetConfig+0xf0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d108      	bne.n	8002f82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a25      	ldr	r2, [pc, #148]	; (800301c <TIM_Base_SetConfig+0xe4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01b      	beq.n	8002fc2 <TIM_Base_SetConfig+0x8a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d017      	beq.n	8002fc2 <TIM_Base_SetConfig+0x8a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <TIM_Base_SetConfig+0xe8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <TIM_Base_SetConfig+0x8a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <TIM_Base_SetConfig+0xec>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00f      	beq.n	8002fc2 <TIM_Base_SetConfig+0x8a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <TIM_Base_SetConfig+0xf0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <TIM_Base_SetConfig+0x8a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1f      	ldr	r2, [pc, #124]	; (800302c <TIM_Base_SetConfig+0xf4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <TIM_Base_SetConfig+0x8a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <TIM_Base_SetConfig+0xf8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_Base_SetConfig+0x8a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <TIM_Base_SetConfig+0xfc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a08      	ldr	r2, [pc, #32]	; (800301c <TIM_Base_SetConfig+0xe4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	615a      	str	r2, [r3, #20]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400
 8003034:	40014800 	.word	0x40014800

08003038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f023 0201 	bic.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 0302 	bic.w	r3, r3, #2
 8003080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <TIM_OC1_SetConfig+0xc8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10c      	bne.n	80030ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0308 	bic.w	r3, r3, #8
 800309a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a13      	ldr	r2, [pc, #76]	; (8003100 <TIM_OC1_SetConfig+0xc8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d111      	bne.n	80030da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40010000 	.word	0x40010000

08003104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f023 0210 	bic.w	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0320 	bic.w	r3, r3, #32
 800314e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <TIM_OC2_SetConfig+0xd4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10d      	bne.n	8003180 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800316a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <TIM_OC2_SetConfig+0xd4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d113      	bne.n	80031b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800318e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40010000 	.word	0x40010000

080031dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0303 	bic.w	r3, r3, #3
 8003212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <TIM_OC3_SetConfig+0xd0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10d      	bne.n	8003256 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a14      	ldr	r2, [pc, #80]	; (80032ac <TIM_OC3_SetConfig+0xd0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d113      	bne.n	8003286 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800326c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	621a      	str	r2, [r3, #32]
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40010000 	.word	0x40010000

080032b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	031b      	lsls	r3, r3, #12
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a10      	ldr	r2, [pc, #64]	; (800334c <TIM_OC4_SetConfig+0x9c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d109      	bne.n	8003324 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000

08003350 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f023 0201 	bic.w	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <TIM_TI1_SetConfig+0xbc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <TIM_TI1_SetConfig+0x56>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d00f      	beq.n	80033a6 <TIM_TI1_SetConfig+0x56>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a21      	ldr	r2, [pc, #132]	; (8003410 <TIM_TI1_SetConfig+0xc0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00b      	beq.n	80033a6 <TIM_TI1_SetConfig+0x56>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a20      	ldr	r2, [pc, #128]	; (8003414 <TIM_TI1_SetConfig+0xc4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <TIM_TI1_SetConfig+0x56>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <TIM_TI1_SetConfig+0xc8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_TI1_SetConfig+0x56>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <TIM_TI1_SetConfig+0xcc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <TIM_TI1_SetConfig+0x5a>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <TIM_TI1_SetConfig+0x5c>
 80033aa:	2300      	movs	r3, #0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	e003      	b.n	80033ca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f023 030a 	bic.w	r3, r3, #10
 80033e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f003 030a 	and.w	r3, r3, #10
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40014000 	.word	0x40014000

08003420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0201 	bic.w	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 030a 	bic.w	r3, r3, #10
 800345c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800347e:	b480      	push	{r7}
 8003480:	b087      	sub	sp, #28
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f023 0210 	bic.w	r2, r3, #16
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f023 0210 	bic.w	r2, r3, #16
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	031b      	lsls	r3, r3, #12
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0303 	bic.w	r3, r3, #3
 8003584:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003594:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	b2db      	uxtb	r3, r3
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80035a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	621a      	str	r2, [r3, #32]
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800360e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	031b      	lsls	r3, r3, #12
 8003614:	b29b      	uxth	r3, r3
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003622:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	031b      	lsls	r3, r3, #12
 8003628:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	f043 0307 	orr.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800369a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2201      	movs	r2, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1a      	ldr	r2, [r3, #32]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	401a      	ands	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003720:	2302      	movs	r3, #2
 8003722:	e050      	b.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d018      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d013      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a16      	ldr	r2, [pc, #88]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10c      	bne.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800
 80037e0:	40000c00 	.word	0x40000c00
 80037e4:	40014000 	.word	0x40014000

080037e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e03f      	b.n	80038a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd fbc6 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f929 	bl	8003aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b08a      	sub	sp, #40	; 0x28
 80038ae:	af02      	add	r7, sp, #8
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d17c      	bne.n	80039c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_UART_Transmit+0x2c>
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e075      	b.n	80039c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Transmit+0x3e>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e06e      	b.n	80039c6 <HAL_UART_Transmit+0x11c>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2221      	movs	r2, #33	; 0x21
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038fe:	f7fd fcdd 	bl	80012bc <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003918:	d108      	bne.n	800392c <HAL_UART_Transmit+0x82>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	e003      	b.n	8003934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800393c:	e02a      	b.n	8003994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f840 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e036      	b.n	80039c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	3302      	adds	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e007      	b.n	8003986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	3301      	adds	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1cf      	bne.n	800393e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2140      	movs	r1, #64	; 0x40
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f810 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e006      	b.n	80039c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b090      	sub	sp, #64	; 0x40
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039de:	e050      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d04c      	beq.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <UART_WaitOnFlagUntilTimeout+0x30>
 80039ee:	f7fd fc65 	bl	80012bc <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d241      	bcs.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	330c      	adds	r3, #12
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a1e:	637a      	str	r2, [r7, #52]	; 0x34
 8003a20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e5      	bne.n	80039fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	613b      	str	r3, [r7, #16]
   return(result);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3314      	adds	r3, #20
 8003a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a52:	623a      	str	r2, [r7, #32]
 8003a54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	69f9      	ldr	r1, [r7, #28]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e5      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e00f      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	bf0c      	ite	eq
 8003a92:	2301      	moveq	r3, #1
 8003a94:	2300      	movne	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d09f      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3740      	adds	r7, #64	; 0x40
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab0:	b0c0      	sub	sp, #256	; 0x100
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	68d9      	ldr	r1, [r3, #12]
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	ea40 0301 	orr.w	r3, r0, r1
 8003ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b04:	f021 010c 	bic.w	r1, r1, #12
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b12:	430b      	orrs	r3, r1
 8003b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	6999      	ldr	r1, [r3, #24]
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	ea40 0301 	orr.w	r3, r0, r1
 8003b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b8f      	ldr	r3, [pc, #572]	; (8003d78 <UART_SetConfig+0x2cc>)
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d005      	beq.n	8003b4c <UART_SetConfig+0xa0>
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b8d      	ldr	r3, [pc, #564]	; (8003d7c <UART_SetConfig+0x2d0>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d104      	bne.n	8003b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b4c:	f7fe faf8 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8003b50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b54:	e003      	b.n	8003b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b56:	f7fe fadf 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8003b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b68:	f040 810c 	bne.w	8003d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b7e:	4622      	mov	r2, r4
 8003b80:	462b      	mov	r3, r5
 8003b82:	1891      	adds	r1, r2, r2
 8003b84:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b86:	415b      	adcs	r3, r3
 8003b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b8e:	4621      	mov	r1, r4
 8003b90:	eb12 0801 	adds.w	r8, r2, r1
 8003b94:	4629      	mov	r1, r5
 8003b96:	eb43 0901 	adc.w	r9, r3, r1
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bae:	4690      	mov	r8, r2
 8003bb0:	4699      	mov	r9, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	eb18 0303 	adds.w	r3, r8, r3
 8003bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	eb49 0303 	adc.w	r3, r9, r3
 8003bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bda:	460b      	mov	r3, r1
 8003bdc:	18db      	adds	r3, r3, r3
 8003bde:	653b      	str	r3, [r7, #80]	; 0x50
 8003be0:	4613      	mov	r3, r2
 8003be2:	eb42 0303 	adc.w	r3, r2, r3
 8003be6:	657b      	str	r3, [r7, #84]	; 0x54
 8003be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bf0:	f7fc fb46 	bl	8000280 <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4b61      	ldr	r3, [pc, #388]	; (8003d80 <UART_SetConfig+0x2d4>)
 8003bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	011c      	lsls	r4, r3, #4
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	1891      	adds	r1, r2, r2
 8003c1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c1c:	415b      	adcs	r3, r3
 8003c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c24:	4641      	mov	r1, r8
 8003c26:	eb12 0a01 	adds.w	sl, r2, r1
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c44:	4692      	mov	sl, r2
 8003c46:	469b      	mov	fp, r3
 8003c48:	4643      	mov	r3, r8
 8003c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c52:	464b      	mov	r3, r9
 8003c54:	eb4b 0303 	adc.w	r3, fp, r3
 8003c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c70:	460b      	mov	r3, r1
 8003c72:	18db      	adds	r3, r3, r3
 8003c74:	643b      	str	r3, [r7, #64]	; 0x40
 8003c76:	4613      	mov	r3, r2
 8003c78:	eb42 0303 	adc.w	r3, r2, r3
 8003c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c86:	f7fc fafb 	bl	8000280 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <UART_SetConfig+0x2d4>)
 8003c92:	fba3 2301 	umull	r2, r3, r3, r1
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	2264      	movs	r2, #100	; 0x64
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	1acb      	subs	r3, r1, r3
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ca6:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <UART_SetConfig+0x2d4>)
 8003ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cb4:	441c      	add	r4, r3
 8003cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cc8:	4642      	mov	r2, r8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	1891      	adds	r1, r2, r2
 8003cce:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cd0:	415b      	adcs	r3, r3
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cd8:	4641      	mov	r1, r8
 8003cda:	1851      	adds	r1, r2, r1
 8003cdc:	6339      	str	r1, [r7, #48]	; 0x30
 8003cde:	4649      	mov	r1, r9
 8003ce0:	414b      	adcs	r3, r1
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cf0:	4659      	mov	r1, fp
 8003cf2:	00cb      	lsls	r3, r1, #3
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	00ca      	lsls	r2, r1, #3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4642      	mov	r2, r8
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	460a      	mov	r2, r1
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	18db      	adds	r3, r3, r3
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d32:	4613      	mov	r3, r2
 8003d34:	eb42 0303 	adc.w	r3, r2, r3
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d42:	f7fc fa9d 	bl	8000280 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <UART_SetConfig+0x2d4>)
 8003d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	3332      	adds	r3, #50	; 0x32
 8003d5e:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <UART_SetConfig+0x2d4>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	f003 0207 	and.w	r2, r3, #7
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4422      	add	r2, r4
 8003d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d74:	e105      	b.n	8003f82 <UART_SetConfig+0x4d6>
 8003d76:	bf00      	nop
 8003d78:	40011000 	.word	0x40011000
 8003d7c:	40011400 	.word	0x40011400
 8003d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d96:	4642      	mov	r2, r8
 8003d98:	464b      	mov	r3, r9
 8003d9a:	1891      	adds	r1, r2, r2
 8003d9c:	6239      	str	r1, [r7, #32]
 8003d9e:	415b      	adcs	r3, r3
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
 8003da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003da6:	4641      	mov	r1, r8
 8003da8:	1854      	adds	r4, r2, r1
 8003daa:	4649      	mov	r1, r9
 8003dac:	eb43 0501 	adc.w	r5, r3, r1
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	00eb      	lsls	r3, r5, #3
 8003dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dbe:	00e2      	lsls	r2, r4, #3
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	461d      	mov	r5, r3
 8003dc4:	4643      	mov	r3, r8
 8003dc6:	18e3      	adds	r3, r4, r3
 8003dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dcc:	464b      	mov	r3, r9
 8003dce:	eb45 0303 	adc.w	r3, r5, r3
 8003dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003df2:	4629      	mov	r1, r5
 8003df4:	008b      	lsls	r3, r1, #2
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	008a      	lsls	r2, r1, #2
 8003e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e04:	f7fc fa3c 	bl	8000280 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4b60      	ldr	r3, [pc, #384]	; (8003f90 <UART_SetConfig+0x4e4>)
 8003e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	011c      	lsls	r4, r3, #4
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	61b9      	str	r1, [r7, #24]
 8003e30:	415b      	adcs	r3, r3
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e38:	4641      	mov	r1, r8
 8003e3a:	1851      	adds	r1, r2, r1
 8003e3c:	6139      	str	r1, [r7, #16]
 8003e3e:	4649      	mov	r1, r9
 8003e40:	414b      	adcs	r3, r1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e50:	4659      	mov	r1, fp
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4651      	mov	r1, sl
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4642      	mov	r2, r8
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	460a      	mov	r2, r1
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e90:	4649      	mov	r1, r9
 8003e92:	008b      	lsls	r3, r1, #2
 8003e94:	4641      	mov	r1, r8
 8003e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	008a      	lsls	r2, r1, #2
 8003e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ea2:	f7fc f9ed 	bl	8000280 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <UART_SetConfig+0x4e4>)
 8003eac:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2164      	movs	r1, #100	; 0x64
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	3332      	adds	r3, #50	; 0x32
 8003ebe:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <UART_SetConfig+0x4e4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eca:	441c      	add	r4, r3
 8003ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ed6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003eda:	4642      	mov	r2, r8
 8003edc:	464b      	mov	r3, r9
 8003ede:	1891      	adds	r1, r2, r2
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eea:	4641      	mov	r1, r8
 8003eec:	1851      	adds	r1, r2, r1
 8003eee:	6039      	str	r1, [r7, #0]
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	414b      	adcs	r3, r1
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f02:	4659      	mov	r1, fp
 8003f04:	00cb      	lsls	r3, r1, #3
 8003f06:	4651      	mov	r1, sl
 8003f08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	00ca      	lsls	r2, r1, #3
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	4603      	mov	r3, r0
 8003f16:	4642      	mov	r2, r8
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	460a      	mov	r2, r1
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f30:	667a      	str	r2, [r7, #100]	; 0x64
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f3e:	4649      	mov	r1, r9
 8003f40:	008b      	lsls	r3, r1, #2
 8003f42:	4641      	mov	r1, r8
 8003f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f48:	4641      	mov	r1, r8
 8003f4a:	008a      	lsls	r2, r1, #2
 8003f4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f50:	f7fc f996 	bl	8000280 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <UART_SetConfig+0x4e4>)
 8003f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	2164      	movs	r1, #100	; 0x64
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	3332      	adds	r3, #50	; 0x32
 8003f6c:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <UART_SetConfig+0x4e4>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	f003 020f 	and.w	r2, r3, #15
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4422      	add	r2, r4
 8003f80:	609a      	str	r2, [r3, #8]
}
 8003f82:	bf00      	nop
 8003f84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8e:	bf00      	nop
 8003f90:	51eb851f 	.word	0x51eb851f

08003f94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa6:	2b84      	cmp	r3, #132	; 0x84
 8003fa8:	d005      	beq.n	8003fb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003faa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3303      	adds	r3, #3
 8003fb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fc8:	f000 ff3e 	bl	8004e48 <vTaskStartScheduler>
  
  return osOK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd4:	b089      	sub	sp, #36	; 0x24
 8003fd6:	af04      	add	r7, sp, #16
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <osThreadCreate+0x54>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01c      	beq.n	8004026 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685c      	ldr	r4, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681d      	ldr	r5, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691e      	ldr	r6, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ffc8 	bl	8003f94 <makeFreeRtosPriority>
 8004004:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800400e:	9202      	str	r2, [sp, #8]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	9100      	str	r1, [sp, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4632      	mov	r2, r6
 8004018:	4629      	mov	r1, r5
 800401a:	4620      	mov	r0, r4
 800401c:	f000 fd36 	bl	8004a8c <xTaskCreateStatic>
 8004020:	4603      	mov	r3, r0
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e01c      	b.n	8004060 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685c      	ldr	r4, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004032:	b29e      	uxth	r6, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ffaa 	bl	8003f94 <makeFreeRtosPriority>
 8004040:	4602      	mov	r2, r0
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	9200      	str	r2, [sp, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	4632      	mov	r2, r6
 800404e:	4629      	mov	r1, r5
 8004050:	4620      	mov	r0, r4
 8004052:	f000 fd78 	bl	8004b46 <xTaskCreate>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004060:	68fb      	ldr	r3, [r7, #12]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800406a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f103 0208 	add.w	r2, r3, #8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f04f 32ff 	mov.w	r2, #4294967295
 8004082:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f103 0208 	add.w	r2, r3, #8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f103 0208 	add.w	r2, r3, #8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d103      	bne.n	800412c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e00c      	b.n	8004146 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3308      	adds	r3, #8
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e002      	b.n	800413a <vListInsert+0x2e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	429a      	cmp	r2, r3
 8004144:	d2f6      	bcs.n	8004134 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6892      	ldr	r2, [r2, #8]
 8004194:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6852      	ldr	r2, [r2, #4]
 800419e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d103      	bne.n	80041b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1e5a      	subs	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041fe:	f001 fd89 	bl	8005d14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	441a      	add	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	3b01      	subs	r3, #1
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	441a      	add	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	22ff      	movs	r2, #255	; 0xff
 8004242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	22ff      	movs	r2, #255	; 0xff
 800424a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d114      	bne.n	800427e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01a      	beq.n	8004292 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3310      	adds	r3, #16
 8004260:	4618      	mov	r0, r3
 8004262:	f001 f843 	bl	80052ec <xTaskRemoveFromEventList>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d012      	beq.n	8004292 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <xQueueGenericReset+0xcc>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	e009      	b.n	8004292 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3310      	adds	r3, #16
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fef1 	bl	800406a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3324      	adds	r3, #36	; 0x24
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff feec 	bl	800406a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004292:	f001 fd6f 	bl	8005d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	e000ed04 	.word	0xe000ed04

080042a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	613b      	str	r3, [r7, #16]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3348      	adds	r3, #72	; 0x48
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fe3b 	bl	8005f58 <pvPortMalloc>
 80042e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d011      	beq.n	800430e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3348      	adds	r3, #72	; 0x48
 80042f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042fc:	79fa      	ldrb	r2, [r7, #7]
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f805 	bl	8004318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800430e:	69bb      	ldr	r3, [r7, #24]
	}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e002      	b.n	800433a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004346:	2101      	movs	r1, #1
 8004348:	69b8      	ldr	r0, [r7, #24]
 800434a:	f7ff ff43 	bl	80041d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08e      	sub	sp, #56	; 0x38
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004366:	2300      	movs	r3, #0
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <xQueueGenericSend+0x32>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d103      	bne.n	8004398 <xQueueGenericSend+0x40>
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <xQueueGenericSend+0x44>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <xQueueGenericSend+0x46>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <xQueueGenericSend+0x60>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d103      	bne.n	80043c6 <xQueueGenericSend+0x6e>
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <xQueueGenericSend+0x72>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <xQueueGenericSend+0x74>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	623b      	str	r3, [r7, #32]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043e6:	f001 f943 	bl	8005670 <xTaskGetSchedulerState>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <xQueueGenericSend+0x9e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <xQueueGenericSend+0xa2>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <xQueueGenericSend+0xa4>
 80043fa:	2300      	movs	r3, #0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericSend+0xbe>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	61fb      	str	r3, [r7, #28]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004416:	f001 fc7d 	bl	8005d14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	429a      	cmp	r2, r3
 8004424:	d302      	bcc.n	800442c <xQueueGenericSend+0xd4>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d129      	bne.n	8004480 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004432:	f000 fa41 	bl	80048b8 <prvCopyDataToQueue>
 8004436:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d010      	beq.n	8004462 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	3324      	adds	r3, #36	; 0x24
 8004444:	4618      	mov	r0, r3
 8004446:	f000 ff51 	bl	80052ec <xTaskRemoveFromEventList>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004450:	4b3f      	ldr	r3, [pc, #252]	; (8004550 <xQueueGenericSend+0x1f8>)
 8004452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	e00a      	b.n	8004478 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004468:	4b39      	ldr	r3, [pc, #228]	; (8004550 <xQueueGenericSend+0x1f8>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004478:	f001 fc7c 	bl	8005d74 <vPortExitCritical>
				return pdPASS;
 800447c:	2301      	movs	r3, #1
 800447e:	e063      	b.n	8004548 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004486:	f001 fc75 	bl	8005d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800448a:	2300      	movs	r3, #0
 800448c:	e05c      	b.n	8004548 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004494:	f107 0314 	add.w	r3, r7, #20
 8004498:	4618      	mov	r0, r3
 800449a:	f000 ff89 	bl	80053b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800449e:	2301      	movs	r3, #1
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044a2:	f001 fc67 	bl	8005d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044a6:	f000 fd39 	bl	8004f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044aa:	f001 fc33 	bl	8005d14 <vPortEnterCritical>
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d103      	bne.n	80044c4 <xQueueGenericSend+0x16c>
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ca:	b25b      	sxtb	r3, r3
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d103      	bne.n	80044da <xQueueGenericSend+0x182>
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044da:	f001 fc4b 	bl	8005d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044de:	1d3a      	adds	r2, r7, #4
 80044e0:	f107 0314 	add.w	r3, r7, #20
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 ff78 	bl	80053dc <xTaskCheckForTimeOut>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d124      	bne.n	800453c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044f4:	f000 fab2 	bl	8004a5c <prvIsQueueFull>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d018      	beq.n	8004530 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	3310      	adds	r3, #16
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fecc 	bl	80052a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800450c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800450e:	f000 fa3d 	bl	800498c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004512:	f000 fd11 	bl	8004f38 <xTaskResumeAll>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	f47f af7c 	bne.w	8004416 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <xQueueGenericSend+0x1f8>)
 8004520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	e772      	b.n	8004416 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004532:	f000 fa2b 	bl	800498c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004536:	f000 fcff 	bl	8004f38 <xTaskResumeAll>
 800453a:	e76c      	b.n	8004416 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800453c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800453e:	f000 fa25 	bl	800498c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004542:	f000 fcf9 	bl	8004f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004548:	4618      	mov	r0, r3
 800454a:	3738      	adds	r7, #56	; 0x38
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08e      	sub	sp, #56	; 0x38
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	623b      	str	r3, [r7, #32]
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <xQueueGiveFromISR+0x48>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	61fb      	str	r3, [r7, #28]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <xQueueGiveFromISR+0x58>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <xQueueGiveFromISR+0x5c>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <xQueueGiveFromISR+0x5e>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <xQueueGiveFromISR+0x78>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61bb      	str	r3, [r7, #24]
}
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045cc:	f001 fc84 	bl	8005ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045d0:	f3ef 8211 	mrs	r2, BASEPRI
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	617a      	str	r2, [r7, #20]
 80045e6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045e8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d22b      	bcs.n	8004654 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800460e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d112      	bne.n	800463e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	2b00      	cmp	r3, #0
 800461e:	d016      	beq.n	800464e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	3324      	adds	r3, #36	; 0x24
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fe61 	bl	80052ec <xTaskRemoveFromEventList>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e007      	b.n	800464e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800463e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004642:	3301      	adds	r3, #1
 8004644:	b2db      	uxtb	r3, r3
 8004646:	b25a      	sxtb	r2, r3
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800464e:	2301      	movs	r3, #1
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
 8004652:	e001      	b.n	8004658 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004654:	2300      	movs	r3, #0
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004662:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004666:	4618      	mov	r0, r3
 8004668:	3738      	adds	r7, #56	; 0x38
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	; 0x38
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800467a:	2300      	movs	r3, #0
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	623b      	str	r3, [r7, #32]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	61fb      	str	r3, [r7, #28]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046c0:	f000 ffd6 	bl	8005670 <xTaskGetSchedulerState>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <xQueueSemaphoreTake+0x60>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <xQueueSemaphoreTake+0x64>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <xQueueSemaphoreTake+0x66>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	61bb      	str	r3, [r7, #24]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046f0:	f001 fb10 	bl	8005d14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d024      	beq.n	800474a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	1e5a      	subs	r2, r3, #1
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004710:	f001 f956 	bl	80059c0 <pvTaskIncrementMutexHeldCount>
 8004714:	4602      	mov	r2, r0
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00f      	beq.n	8004742 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	3310      	adds	r3, #16
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fde0 	bl	80052ec <xTaskRemoveFromEventList>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004732:	4b54      	ldr	r3, [pc, #336]	; (8004884 <xQueueSemaphoreTake+0x214>)
 8004734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004742:	f001 fb17 	bl	8005d74 <vPortExitCritical>
				return pdPASS;
 8004746:	2301      	movs	r3, #1
 8004748:	e097      	b.n	800487a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d111      	bne.n	8004774 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	617b      	str	r3, [r7, #20]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800476c:	f001 fb02 	bl	8005d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004770:	2300      	movs	r3, #0
 8004772:	e082      	b.n	800487a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800477a:	f107 030c 	add.w	r3, r7, #12
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe16 	bl	80053b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004788:	f001 faf4 	bl	8005d74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800478c:	f000 fbc6 	bl	8004f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004790:	f001 fac0 	bl	8005d14 <vPortEnterCritical>
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800479a:	b25b      	sxtb	r3, r3
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d103      	bne.n	80047aa <xQueueSemaphoreTake+0x13a>
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d103      	bne.n	80047c0 <xQueueSemaphoreTake+0x150>
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c0:	f001 fad8 	bl	8005d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047c4:	463a      	mov	r2, r7
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fe05 	bl	80053dc <xTaskCheckForTimeOut>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d132      	bne.n	800483e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047da:	f000 f929 	bl	8004a30 <prvIsQueueEmpty>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d026      	beq.n	8004832 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80047ec:	f001 fa92 	bl	8005d14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 ff59 	bl	80056ac <xTaskPriorityInherit>
 80047fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80047fc:	f001 faba 	bl	8005d74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	3324      	adds	r3, #36	; 0x24
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fd4b 	bl	80052a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800480e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004810:	f000 f8bc 	bl	800498c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004814:	f000 fb90 	bl	8004f38 <xTaskResumeAll>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	f47f af68 	bne.w	80046f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <xQueueSemaphoreTake+0x214>)
 8004822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	e75e      	b.n	80046f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004834:	f000 f8aa 	bl	800498c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004838:	f000 fb7e 	bl	8004f38 <xTaskResumeAll>
 800483c:	e758      	b.n	80046f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800483e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004840:	f000 f8a4 	bl	800498c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004844:	f000 fb78 	bl	8004f38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800484a:	f000 f8f1 	bl	8004a30 <prvIsQueueEmpty>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	f43f af4d 	beq.w	80046f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800485c:	f001 fa5a 	bl	8005d14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004862:	f000 f811 	bl	8004888 <prvGetDisinheritPriorityAfterTimeout>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f818 	bl	80058a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004874:	f001 fa7e 	bl	8005d74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004878:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800487a:	4618      	mov	r0, r3
 800487c:	3738      	adds	r7, #56	; 0x38
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d006      	beq.n	80048a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1c3 0307 	rsb	r3, r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e001      	b.n	80048aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048aa:	68fb      	ldr	r3, [r7, #12]
	}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d14d      	bne.n	800497a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 ff58 	bl	8005798 <xTaskPriorityDisinherit>
 80048e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	e043      	b.n	800497a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d119      	bne.n	800492c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6858      	ldr	r0, [r3, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	461a      	mov	r2, r3
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	f001 ffb4 	bl	8006870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d32b      	bcc.n	800497a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	e026      	b.n	800497a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68d8      	ldr	r0, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	461a      	mov	r2, r3
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	f001 ff9a 	bl	8006870 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	425b      	negs	r3, r3
 8004946:	441a      	add	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d207      	bcs.n	8004968 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	425b      	negs	r3, r3
 8004962:	441a      	add	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d105      	bne.n	800497a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3b01      	subs	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004982:	697b      	ldr	r3, [r7, #20]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004994:	f001 f9be 	bl	8005d14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800499e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049a0:	e011      	b.n	80049c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d012      	beq.n	80049d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3324      	adds	r3, #36	; 0x24
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fc9c 	bl	80052ec <xTaskRemoveFromEventList>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049ba:	f000 fd71 	bl	80054a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	dce9      	bgt.n	80049a2 <prvUnlockQueue+0x16>
 80049ce:	e000      	b.n	80049d2 <prvUnlockQueue+0x46>
					break;
 80049d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	22ff      	movs	r2, #255	; 0xff
 80049d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049da:	f001 f9cb 	bl	8005d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049de:	f001 f999 	bl	8005d14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ea:	e011      	b.n	8004a10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d012      	beq.n	8004a1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3310      	adds	r3, #16
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fc77 	bl	80052ec <xTaskRemoveFromEventList>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a04:	f000 fd4c 	bl	80054a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a08:	7bbb      	ldrb	r3, [r7, #14]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dce9      	bgt.n	80049ec <prvUnlockQueue+0x60>
 8004a18:	e000      	b.n	8004a1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	22ff      	movs	r2, #255	; 0xff
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a24:	f001 f9a6 	bl	8005d74 <vPortExitCritical>
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a38:	f001 f96c 	bl	8005d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a44:	2301      	movs	r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e001      	b.n	8004a4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a4e:	f001 f991 	bl	8005d74 <vPortExitCritical>

	return xReturn;
 8004a52:	68fb      	ldr	r3, [r7, #12]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a64:	f001 f956 	bl	8005d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d102      	bne.n	8004a7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e001      	b.n	8004a7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a7e:	f001 f979 	bl	8005d74 <vPortExitCritical>

	return xReturn;
 8004a82:	68fb      	ldr	r3, [r7, #12]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08e      	sub	sp, #56	; 0x38
 8004a90:	af04      	add	r7, sp, #16
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	623b      	str	r3, [r7, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	61fb      	str	r3, [r7, #28]
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ad2:	23b4      	movs	r3, #180	; 0xb4
 8004ad4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2bb4      	cmp	r3, #180	; 0xb4
 8004ada:	d00a      	beq.n	8004af2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	61bb      	str	r3, [r7, #24]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004af2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01e      	beq.n	8004b38 <xTaskCreateStatic+0xac>
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b12:	2300      	movs	r3, #0
 8004b14:	9303      	str	r3, [sp, #12]
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	9302      	str	r3, [sp, #8]
 8004b1a:	f107 0314 	add.w	r3, r7, #20
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f850 	bl	8004bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b32:	f000 f8eb 	bl	8004d0c <prvAddNewTaskToReadyList>
 8004b36:	e001      	b.n	8004b3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b3c:	697b      	ldr	r3, [r7, #20]
	}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3728      	adds	r7, #40	; 0x28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b08c      	sub	sp, #48	; 0x30
 8004b4a:	af04      	add	r7, sp, #16
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f9fc 	bl	8005f58 <pvPortMalloc>
 8004b60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b68:	20b4      	movs	r0, #180	; 0xb4
 8004b6a:	f001 f9f5 	bl	8005f58 <pvPortMalloc>
 8004b6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b7c:	e005      	b.n	8004b8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b7e:	6978      	ldr	r0, [r7, #20]
 8004b80:	f001 fab6 	bl	80060f0 <vPortFree>
 8004b84:	e001      	b.n	8004b8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b98:	88fa      	ldrh	r2, [r7, #6]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9303      	str	r3, [sp, #12]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	9302      	str	r3, [sp, #8]
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f80e 	bl	8004bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bb4:	69f8      	ldr	r0, [r7, #28]
 8004bb6:	f000 f8a9 	bl	8004d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	e002      	b.n	8004bc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
	}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004be8:	3b01      	subs	r3, #1
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f023 0307 	bic.w	r3, r3, #7
 8004bf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	617b      	str	r3, [r7, #20]
}
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01f      	beq.n	8004c5e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	e012      	b.n	8004c4a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	7819      	ldrb	r1, [r3, #0]
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	3334      	adds	r3, #52	; 0x34
 8004c34:	460a      	mov	r2, r1
 8004c36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d006      	beq.n	8004c52 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	2b0f      	cmp	r3, #15
 8004c4e:	d9e9      	bls.n	8004c24 <prvInitialiseNewTask+0x54>
 8004c50:	e000      	b.n	8004c54 <prvInitialiseNewTask+0x84>
			{
				break;
 8004c52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c5c:	e003      	b.n	8004c66 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	2b06      	cmp	r3, #6
 8004c6a:	d901      	bls.n	8004c70 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	2200      	movs	r2, #0
 8004c80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	3304      	adds	r3, #4
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fa0f 	bl	80040aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	3318      	adds	r3, #24
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff fa0a 	bl	80040aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	f1c3 0207 	rsb	r2, r3, #7
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	334c      	adds	r3, #76	; 0x4c
 8004cc0:	2260      	movs	r2, #96	; 0x60
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fde1 	bl	800688c <memset>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <prvInitialiseNewTask+0x130>)
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <prvInitialiseNewTask+0x134>)
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	4a0b      	ldr	r2, [pc, #44]	; (8004d08 <prvInitialiseNewTask+0x138>)
 8004cda:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	69b8      	ldr	r0, [r7, #24]
 8004ce2:	f000 fee7 	bl	8005ab4 <pxPortInitialiseStack>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cf8:	bf00      	nop
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	080072cc 	.word	0x080072cc
 8004d04:	080072ec 	.word	0x080072ec
 8004d08:	080072ac 	.word	0x080072ac

08004d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d14:	f000 fffe 	bl	8005d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d18:	4b2a      	ldr	r3, [pc, #168]	; (8004dc4 <prvAddNewTaskToReadyList+0xb8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	4a29      	ldr	r2, [pc, #164]	; (8004dc4 <prvAddNewTaskToReadyList+0xb8>)
 8004d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d22:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <prvAddNewTaskToReadyList+0xbc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d2a:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <prvAddNewTaskToReadyList+0xbc>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <prvAddNewTaskToReadyList+0xb8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d110      	bne.n	8004d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d38:	f000 fbd8 	bl	80054ec <prvInitialiseTaskLists>
 8004d3c:	e00d      	b.n	8004d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d3e:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <prvAddNewTaskToReadyList+0xc0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <prvAddNewTaskToReadyList+0xbc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d802      	bhi.n	8004d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d54:	4a1c      	ldr	r2, [pc, #112]	; (8004dc8 <prvAddNewTaskToReadyList+0xbc>)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d5a:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <prvAddNewTaskToReadyList+0xc4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <prvAddNewTaskToReadyList+0xc4>)
 8004d62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	2201      	movs	r2, #1
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <prvAddNewTaskToReadyList+0xc8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <prvAddNewTaskToReadyList+0xc8>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <prvAddNewTaskToReadyList+0xcc>)
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7ff f999 	bl	80040c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d92:	f000 ffef 	bl	8005d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <prvAddNewTaskToReadyList+0xc0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00e      	beq.n	8004dbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <prvAddNewTaskToReadyList+0xbc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d207      	bcs.n	8004dbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <prvAddNewTaskToReadyList+0xd0>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200005e8 	.word	0x200005e8
 8004dc8:	200004e8 	.word	0x200004e8
 8004dcc:	200005f4 	.word	0x200005f4
 8004dd0:	20000604 	.word	0x20000604
 8004dd4:	200005f0 	.word	0x200005f0
 8004dd8:	200004ec 	.word	0x200004ec
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <vTaskDelay+0x60>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <vTaskDelay+0x30>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	60bb      	str	r3, [r7, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e10:	f000 f884 	bl	8004f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e14:	2100      	movs	r1, #0
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fde6 	bl	80059e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e1c:	f000 f88c 	bl	8004f38 <xTaskResumeAll>
 8004e20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d107      	bne.n	8004e38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e28:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <vTaskDelay+0x64>)
 8004e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000610 	.word	0x20000610
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e56:	463a      	mov	r2, r7
 8004e58:	1d39      	adds	r1, r7, #4
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fb fb98 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	9202      	str	r2, [sp, #8]
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	460a      	mov	r2, r1
 8004e76:	4921      	ldr	r1, [pc, #132]	; (8004efc <vTaskStartScheduler+0xb4>)
 8004e78:	4821      	ldr	r0, [pc, #132]	; (8004f00 <vTaskStartScheduler+0xb8>)
 8004e7a:	f7ff fe07 	bl	8004a8c <xTaskCreateStatic>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <vTaskStartScheduler+0xbc>)
 8004e82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e84:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <vTaskStartScheduler+0xbc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e001      	b.n	8004e96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d11b      	bne.n	8004ed4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	613b      	str	r3, [r7, #16]
}
 8004eae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004eb0:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <vTaskStartScheduler+0xc0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	334c      	adds	r3, #76	; 0x4c
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <vTaskStartScheduler+0xc4>)
 8004eb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004eba:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <vTaskStartScheduler+0xc8>)
 8004ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <vTaskStartScheduler+0xcc>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ec8:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <vTaskStartScheduler+0xd0>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ece:	f000 fe7f 	bl	8005bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ed2:	e00e      	b.n	8004ef2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d10a      	bne.n	8004ef2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <vTaskStartScheduler+0xa8>
}
 8004ef2:	bf00      	nop
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	0800728c 	.word	0x0800728c
 8004f00:	080054b9 	.word	0x080054b9
 8004f04:	2000060c 	.word	0x2000060c
 8004f08:	200004e8 	.word	0x200004e8
 8004f0c:	20000024 	.word	0x20000024
 8004f10:	20000608 	.word	0x20000608
 8004f14:	200005f4 	.word	0x200005f4
 8004f18:	200005ec 	.word	0x200005ec

08004f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <vTaskSuspendAll+0x18>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	4a03      	ldr	r2, [pc, #12]	; (8004f34 <vTaskSuspendAll+0x18>)
 8004f28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000610 	.word	0x20000610

08004f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f46:	4b41      	ldr	r3, [pc, #260]	; (800504c <xTaskResumeAll+0x114>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	603b      	str	r3, [r7, #0]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f64:	f000 fed6 	bl	8005d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <xTaskResumeAll+0x114>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4a37      	ldr	r2, [pc, #220]	; (800504c <xTaskResumeAll+0x114>)
 8004f70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f72:	4b36      	ldr	r3, [pc, #216]	; (800504c <xTaskResumeAll+0x114>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d161      	bne.n	800503e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f7a:	4b35      	ldr	r3, [pc, #212]	; (8005050 <xTaskResumeAll+0x118>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d05d      	beq.n	800503e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f82:	e02e      	b.n	8004fe2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f84:	4b33      	ldr	r3, [pc, #204]	; (8005054 <xTaskResumeAll+0x11c>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3318      	adds	r3, #24
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff f8f4 	bl	800417e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff f8ef 	bl	800417e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <xTaskResumeAll+0x120>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <xTaskResumeAll+0x120>)
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4a27      	ldr	r2, [pc, #156]	; (800505c <xTaskResumeAll+0x124>)
 8004fc0:	441a      	add	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f7ff f87b 	bl	80040c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd2:	4b23      	ldr	r3, [pc, #140]	; (8005060 <xTaskResumeAll+0x128>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <xTaskResumeAll+0x12c>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <xTaskResumeAll+0x11c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1cc      	bne.n	8004f84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ff0:	f000 fb1e 	bl	8005630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ff4:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <xTaskResumeAll+0x130>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005000:	f000 f836 	bl	8005070 <xTaskIncrementTick>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <xTaskResumeAll+0x12c>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f1      	bne.n	8005000 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <xTaskResumeAll+0x130>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <xTaskResumeAll+0x12c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800502a:	2301      	movs	r3, #1
 800502c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <xTaskResumeAll+0x134>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800503e:	f000 fe99 	bl	8005d74 <vPortExitCritical>

	return xAlreadyYielded;
 8005042:	68bb      	ldr	r3, [r7, #8]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000610 	.word	0x20000610
 8005050:	200005e8 	.word	0x200005e8
 8005054:	200005a8 	.word	0x200005a8
 8005058:	200005f0 	.word	0x200005f0
 800505c:	200004ec 	.word	0x200004ec
 8005060:	200004e8 	.word	0x200004e8
 8005064:	200005fc 	.word	0x200005fc
 8005068:	200005f8 	.word	0x200005f8
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800507a:	4b4e      	ldr	r3, [pc, #312]	; (80051b4 <xTaskIncrementTick+0x144>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 808e 	bne.w	80051a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005084:	4b4c      	ldr	r3, [pc, #304]	; (80051b8 <xTaskIncrementTick+0x148>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800508c:	4a4a      	ldr	r2, [pc, #296]	; (80051b8 <xTaskIncrementTick+0x148>)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d120      	bne.n	80050da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005098:	4b48      	ldr	r3, [pc, #288]	; (80051bc <xTaskIncrementTick+0x14c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	603b      	str	r3, [r7, #0]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xTaskIncrementTick+0x46>
 80050b8:	4b40      	ldr	r3, [pc, #256]	; (80051bc <xTaskIncrementTick+0x14c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <xTaskIncrementTick+0x150>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a3e      	ldr	r2, [pc, #248]	; (80051bc <xTaskIncrementTick+0x14c>)
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4a3e      	ldr	r2, [pc, #248]	; (80051c0 <xTaskIncrementTick+0x150>)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b3d      	ldr	r3, [pc, #244]	; (80051c4 <xTaskIncrementTick+0x154>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	4a3c      	ldr	r2, [pc, #240]	; (80051c4 <xTaskIncrementTick+0x154>)
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	f000 faab 	bl	8005630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <xTaskIncrementTick+0x158>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d348      	bcc.n	8005176 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050e4:	4b35      	ldr	r3, [pc, #212]	; (80051bc <xTaskIncrementTick+0x14c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d104      	bne.n	80050f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ee:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <xTaskIncrementTick+0x158>)
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295
 80050f4:	601a      	str	r2, [r3, #0]
					break;
 80050f6:	e03e      	b.n	8005176 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f8:	4b30      	ldr	r3, [pc, #192]	; (80051bc <xTaskIncrementTick+0x14c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d203      	bcs.n	8005118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005110:	4a2d      	ldr	r2, [pc, #180]	; (80051c8 <xTaskIncrementTick+0x158>)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005116:	e02e      	b.n	8005176 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff f82e 	bl	800417e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	3318      	adds	r3, #24
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff f825 	bl	800417e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	2201      	movs	r2, #1
 800513a:	409a      	lsls	r2, r3
 800513c:	4b23      	ldr	r3, [pc, #140]	; (80051cc <xTaskIncrementTick+0x15c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4313      	orrs	r3, r2
 8005142:	4a22      	ldr	r2, [pc, #136]	; (80051cc <xTaskIncrementTick+0x15c>)
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <xTaskIncrementTick+0x160>)
 8005154:	441a      	add	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	3304      	adds	r3, #4
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f7fe ffb1 	bl	80040c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <xTaskIncrementTick+0x164>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d3b9      	bcc.n	80050e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005174:	e7b6      	b.n	80050e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005176:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <xTaskIncrementTick+0x164>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4914      	ldr	r1, [pc, #80]	; (80051d0 <xTaskIncrementTick+0x160>)
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d901      	bls.n	8005192 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <xTaskIncrementTick+0x168>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800519a:	2301      	movs	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e004      	b.n	80051aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <xTaskIncrementTick+0x16c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3301      	adds	r3, #1
 80051a6:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <xTaskIncrementTick+0x16c>)
 80051a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051aa:	697b      	ldr	r3, [r7, #20]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000610 	.word	0x20000610
 80051b8:	200005ec 	.word	0x200005ec
 80051bc:	200005a0 	.word	0x200005a0
 80051c0:	200005a4 	.word	0x200005a4
 80051c4:	20000600 	.word	0x20000600
 80051c8:	20000608 	.word	0x20000608
 80051cc:	200005f0 	.word	0x200005f0
 80051d0:	200004ec 	.word	0x200004ec
 80051d4:	200004e8 	.word	0x200004e8
 80051d8:	200005fc 	.word	0x200005fc
 80051dc:	200005f8 	.word	0x200005f8

080051e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051e6:	4b29      	ldr	r3, [pc, #164]	; (800528c <vTaskSwitchContext+0xac>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051ee:	4b28      	ldr	r3, [pc, #160]	; (8005290 <vTaskSwitchContext+0xb0>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051f4:	e044      	b.n	8005280 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <vTaskSwitchContext+0xb0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051fc:	4b25      	ldr	r3, [pc, #148]	; (8005294 <vTaskSwitchContext+0xb4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	fab3 f383 	clz	r3, r3
 8005208:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800520a:	7afb      	ldrb	r3, [r7, #11]
 800520c:	f1c3 031f 	rsb	r3, r3, #31
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	4921      	ldr	r1, [pc, #132]	; (8005298 <vTaskSwitchContext+0xb8>)
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	607b      	str	r3, [r7, #4]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <vTaskSwitchContext+0x5a>
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <vTaskSwitchContext+0xb8>)
 8005248:	4413      	add	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	3308      	adds	r3, #8
 800525e:	429a      	cmp	r2, r3
 8005260:	d104      	bne.n	800526c <vTaskSwitchContext+0x8c>
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <vTaskSwitchContext+0xbc>)
 8005274:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <vTaskSwitchContext+0xbc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	334c      	adds	r3, #76	; 0x4c
 800527c:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <vTaskSwitchContext+0xc0>)
 800527e:	6013      	str	r3, [r2, #0]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	20000610 	.word	0x20000610
 8005290:	200005fc 	.word	0x200005fc
 8005294:	200005f0 	.word	0x200005f0
 8005298:	200004ec 	.word	0x200004ec
 800529c:	200004e8 	.word	0x200004e8
 80052a0:	20000024 	.word	0x20000024

080052a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	60fb      	str	r3, [r7, #12]
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ca:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <vTaskPlaceOnEventList+0x44>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3318      	adds	r3, #24
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fe ff1a 	bl	800410c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052d8:	2101      	movs	r1, #1
 80052da:	6838      	ldr	r0, [r7, #0]
 80052dc:	f000 fb84 	bl	80059e8 <prvAddCurrentTaskToDelayedList>
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	200004e8 	.word	0x200004e8

080052ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60fb      	str	r3, [r7, #12]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	3318      	adds	r3, #24
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe ff2e 	bl	800417e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005322:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <xTaskRemoveFromEventList+0xac>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d11c      	bne.n	8005364 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3304      	adds	r3, #4
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe ff25 	bl	800417e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <xTaskRemoveFromEventList+0xb0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	4a16      	ldr	r2, [pc, #88]	; (800539c <xTaskRemoveFromEventList+0xb0>)
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4a13      	ldr	r2, [pc, #76]	; (80053a0 <xTaskRemoveFromEventList+0xb4>)
 8005354:	441a      	add	r2, r3
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	3304      	adds	r3, #4
 800535a:	4619      	mov	r1, r3
 800535c:	4610      	mov	r0, r2
 800535e:	f7fe feb1 	bl	80040c4 <vListInsertEnd>
 8005362:	e005      	b.n	8005370 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3318      	adds	r3, #24
 8005368:	4619      	mov	r1, r3
 800536a:	480e      	ldr	r0, [pc, #56]	; (80053a4 <xTaskRemoveFromEventList+0xb8>)
 800536c:	f7fe feaa 	bl	80040c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <xTaskRemoveFromEventList+0xbc>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	429a      	cmp	r2, r3
 800537c:	d905      	bls.n	800538a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <xTaskRemoveFromEventList+0xc0>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e001      	b.n	800538e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800538e:	697b      	ldr	r3, [r7, #20]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000610 	.word	0x20000610
 800539c:	200005f0 	.word	0x200005f0
 80053a0:	200004ec 	.word	0x200004ec
 80053a4:	200005a8 	.word	0x200005a8
 80053a8:	200004e8 	.word	0x200004e8
 80053ac:	200005fc 	.word	0x200005fc

080053b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <vTaskInternalSetTimeOutState+0x24>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <vTaskInternalSetTimeOutState+0x28>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	605a      	str	r2, [r3, #4]
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	20000600 	.word	0x20000600
 80053d8:	200005ec 	.word	0x200005ec

080053dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	613b      	str	r3, [r7, #16]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800541e:	f000 fc79 	bl	8005d14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <xTaskCheckForTimeOut+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d102      	bne.n	8005442 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	e023      	b.n	800548a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <xTaskCheckForTimeOut+0xc0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d007      	beq.n	800545e <xTaskCheckForTimeOut+0x82>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d302      	bcc.n	800545e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e015      	b.n	800548a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	429a      	cmp	r2, r3
 8005466:	d20b      	bcs.n	8005480 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff9b 	bl	80053b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	e004      	b.n	800548a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800548a:	f000 fc73 	bl	8005d74 <vPortExitCritical>

	return xReturn;
 800548e:	69fb      	ldr	r3, [r7, #28]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	200005ec 	.word	0x200005ec
 800549c:	20000600 	.word	0x20000600

080054a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054a4:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <vTaskMissedYield+0x14>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	200005fc 	.word	0x200005fc

080054b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054c0:	f000 f854 	bl	800556c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <prvIdleTask+0x2c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d907      	bls.n	80054dc <prvIdleTask+0x24>
			{
				taskYIELD();
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <prvIdleTask+0x30>)
 80054ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80054dc:	f7fb f852 	bl	8000584 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80054e0:	e7ee      	b.n	80054c0 <prvIdleTask+0x8>
 80054e2:	bf00      	nop
 80054e4:	200004ec 	.word	0x200004ec
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f2:	2300      	movs	r3, #0
 80054f4:	607b      	str	r3, [r7, #4]
 80054f6:	e00c      	b.n	8005512 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4a12      	ldr	r2, [pc, #72]	; (800554c <prvInitialiseTaskLists+0x60>)
 8005504:	4413      	add	r3, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe fdaf 	bl	800406a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3301      	adds	r3, #1
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b06      	cmp	r3, #6
 8005516:	d9ef      	bls.n	80054f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005518:	480d      	ldr	r0, [pc, #52]	; (8005550 <prvInitialiseTaskLists+0x64>)
 800551a:	f7fe fda6 	bl	800406a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800551e:	480d      	ldr	r0, [pc, #52]	; (8005554 <prvInitialiseTaskLists+0x68>)
 8005520:	f7fe fda3 	bl	800406a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005524:	480c      	ldr	r0, [pc, #48]	; (8005558 <prvInitialiseTaskLists+0x6c>)
 8005526:	f7fe fda0 	bl	800406a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800552a:	480c      	ldr	r0, [pc, #48]	; (800555c <prvInitialiseTaskLists+0x70>)
 800552c:	f7fe fd9d 	bl	800406a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005530:	480b      	ldr	r0, [pc, #44]	; (8005560 <prvInitialiseTaskLists+0x74>)
 8005532:	f7fe fd9a 	bl	800406a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005536:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <prvInitialiseTaskLists+0x78>)
 8005538:	4a05      	ldr	r2, [pc, #20]	; (8005550 <prvInitialiseTaskLists+0x64>)
 800553a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <prvInitialiseTaskLists+0x7c>)
 800553e:	4a05      	ldr	r2, [pc, #20]	; (8005554 <prvInitialiseTaskLists+0x68>)
 8005540:	601a      	str	r2, [r3, #0]
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	200004ec 	.word	0x200004ec
 8005550:	20000578 	.word	0x20000578
 8005554:	2000058c 	.word	0x2000058c
 8005558:	200005a8 	.word	0x200005a8
 800555c:	200005bc 	.word	0x200005bc
 8005560:	200005d4 	.word	0x200005d4
 8005564:	200005a0 	.word	0x200005a0
 8005568:	200005a4 	.word	0x200005a4

0800556c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005572:	e019      	b.n	80055a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005574:	f000 fbce 	bl	8005d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <prvCheckTasksWaitingTermination+0x50>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	4618      	mov	r0, r3
 8005586:	f7fe fdfa 	bl	800417e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <prvCheckTasksWaitingTermination+0x54>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3b01      	subs	r3, #1
 8005590:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <prvCheckTasksWaitingTermination+0x54>)
 8005592:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <prvCheckTasksWaitingTermination+0x58>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3b01      	subs	r3, #1
 800559a:	4a0a      	ldr	r2, [pc, #40]	; (80055c4 <prvCheckTasksWaitingTermination+0x58>)
 800559c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800559e:	f000 fbe9 	bl	8005d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f810 	bl	80055c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055a8:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <prvCheckTasksWaitingTermination+0x58>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e1      	bne.n	8005574 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	200005bc 	.word	0x200005bc
 80055c0:	200005e8 	.word	0x200005e8
 80055c4:	200005d0 	.word	0x200005d0

080055c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	334c      	adds	r3, #76	; 0x4c
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fa03 	bl	80069e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d108      	bne.n	80055f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fd81 	bl	80060f0 <vPortFree>
				vPortFree( pxTCB );
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fd7e 	bl	80060f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055f4:	e018      	b.n	8005628 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d103      	bne.n	8005608 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fd75 	bl	80060f0 <vPortFree>
	}
 8005606:	e00f      	b.n	8005628 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800560e:	2b02      	cmp	r3, #2
 8005610:	d00a      	beq.n	8005628 <prvDeleteTCB+0x60>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	60fb      	str	r3, [r7, #12]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <prvDeleteTCB+0x5e>
	}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <prvResetNextTaskUnblockTime+0x38>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <prvResetNextTaskUnblockTime+0x3c>)
 8005642:	f04f 32ff 	mov.w	r2, #4294967295
 8005646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005648:	e008      	b.n	800565c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564a:	4b07      	ldr	r3, [pc, #28]	; (8005668 <prvResetNextTaskUnblockTime+0x38>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a04      	ldr	r2, [pc, #16]	; (800566c <prvResetNextTaskUnblockTime+0x3c>)
 800565a:	6013      	str	r3, [r2, #0]
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	200005a0 	.word	0x200005a0
 800566c:	20000608 	.word	0x20000608

08005670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <xTaskGetSchedulerState+0x34>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800567e:	2301      	movs	r3, #1
 8005680:	607b      	str	r3, [r7, #4]
 8005682:	e008      	b.n	8005696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005684:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <xTaskGetSchedulerState+0x38>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800568c:	2302      	movs	r3, #2
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	e001      	b.n	8005696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005696:	687b      	ldr	r3, [r7, #4]
	}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	200005f4 	.word	0x200005f4
 80056a8:	20000610 	.word	0x20000610

080056ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d05e      	beq.n	8005780 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c6:	4b31      	ldr	r3, [pc, #196]	; (800578c <xTaskPriorityInherit+0xe0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d24e      	bcs.n	800576e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	db06      	blt.n	80056e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d8:	4b2c      	ldr	r3, [pc, #176]	; (800578c <xTaskPriorityInherit+0xe0>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	f1c3 0207 	rsb	r2, r3, #7
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6959      	ldr	r1, [r3, #20]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4a26      	ldr	r2, [pc, #152]	; (8005790 <xTaskPriorityInherit+0xe4>)
 80056f8:	4413      	add	r3, r2
 80056fa:	4299      	cmp	r1, r3
 80056fc:	d12f      	bne.n	800575e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fd3b 	bl	800417e <uxListRemove>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	2201      	movs	r2, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43da      	mvns	r2, r3
 800571a:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <xTaskPriorityInherit+0xe8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4013      	ands	r3, r2
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <xTaskPriorityInherit+0xe8>)
 8005722:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <xTaskPriorityInherit+0xe0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	2201      	movs	r2, #1
 8005734:	409a      	lsls	r2, r3
 8005736:	4b17      	ldr	r3, [pc, #92]	; (8005794 <xTaskPriorityInherit+0xe8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4313      	orrs	r3, r2
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <xTaskPriorityInherit+0xe8>)
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4a10      	ldr	r2, [pc, #64]	; (8005790 <xTaskPriorityInherit+0xe4>)
 800574e:	441a      	add	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7fe fcb4 	bl	80040c4 <vListInsertEnd>
 800575c:	e004      	b.n	8005768 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <xTaskPriorityInherit+0xe0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e008      	b.n	8005780 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <xTaskPriorityInherit+0xe0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	429a      	cmp	r2, r3
 800577a:	d201      	bcs.n	8005780 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005780:	68fb      	ldr	r3, [r7, #12]
	}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200004e8 	.word	0x200004e8
 8005790:	200004ec 	.word	0x200004ec
 8005794:	200005f0 	.word	0x200005f0

08005798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d06e      	beq.n	800588c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057ae:	4b3a      	ldr	r3, [pc, #232]	; (8005898 <xTaskPriorityDisinherit+0x100>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d00a      	beq.n	80057ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60fb      	str	r3, [r7, #12]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60bb      	str	r3, [r7, #8]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f0:	1e5a      	subs	r2, r3, #1
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	429a      	cmp	r2, r3
 8005800:	d044      	beq.n	800588c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005806:	2b00      	cmp	r3, #0
 8005808:	d140      	bne.n	800588c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3304      	adds	r3, #4
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fcb5 	bl	800417e <uxListRemove>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d115      	bne.n	8005846 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581e:	491f      	ldr	r1, [pc, #124]	; (800589c <xTaskPriorityDisinherit+0x104>)
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xTaskPriorityDisinherit+0xae>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	2201      	movs	r2, #1
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43da      	mvns	r2, r3
 800583c:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <xTaskPriorityDisinherit+0x108>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4013      	ands	r3, r2
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <xTaskPriorityDisinherit+0x108>)
 8005844:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	f1c3 0207 	rsb	r2, r3, #7
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	2201      	movs	r2, #1
 8005860:	409a      	lsls	r2, r3
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <xTaskPriorityDisinherit+0x108>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4313      	orrs	r3, r2
 8005868:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <xTaskPriorityDisinherit+0x108>)
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4a08      	ldr	r2, [pc, #32]	; (800589c <xTaskPriorityDisinherit+0x104>)
 800587a:	441a      	add	r2, r3
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7fe fc1e 	bl	80040c4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800588c:	697b      	ldr	r3, [r7, #20]
	}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	200004e8 	.word	0x200004e8
 800589c:	200004ec 	.word	0x200004ec
 80058a0:	200005f0 	.word	0x200005f0

080058a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80058b2:	2301      	movs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d077      	beq.n	80059ac <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	60fb      	str	r3, [r7, #12]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d902      	bls.n	80058ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e002      	b.n	80058f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d058      	beq.n	80059ac <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	429a      	cmp	r2, r3
 8005902:	d153      	bne.n	80059ac <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005904:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	429a      	cmp	r2, r3
 800590c:	d10a      	bne.n	8005924 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	60bb      	str	r3, [r7, #8]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	db04      	blt.n	8005942 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f1c3 0207 	rsb	r2, r3, #7
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	6959      	ldr	r1, [r3, #20]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005952:	4413      	add	r3, r2
 8005954:	4299      	cmp	r1, r3
 8005956:	d129      	bne.n	80059ac <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	3304      	adds	r3, #4
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe fc0e 	bl	800417e <uxListRemove>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	2201      	movs	r2, #1
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43da      	mvns	r2, r3
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	4a10      	ldr	r2, [pc, #64]	; (80059bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800597c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	2201      	movs	r2, #1
 8005984:	409a      	lsls	r2, r3
 8005986:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4313      	orrs	r3, r2
 800598c:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4a06      	ldr	r2, [pc, #24]	; (80059b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800599e:	441a      	add	r2, r3
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f7fe fb8c 	bl	80040c4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059ac:	bf00      	nop
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	200004e8 	.word	0x200004e8
 80059b8:	200004ec 	.word	0x200004ec
 80059bc:	200005f0 	.word	0x200005f0

080059c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059d2:	3201      	adds	r2, #1
 80059d4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80059d6:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80059d8:	681b      	ldr	r3, [r3, #0]
	}
 80059da:	4618      	mov	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	200004e8 	.word	0x200004e8

080059e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059f2:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xb0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059f8:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fbbd 	bl	800417e <uxListRemove>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a0a:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	2201      	movs	r2, #1
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43da      	mvns	r2, r3
 8005a18:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d10a      	bne.n	8005a40 <prvAddCurrentTaskToDelayedList+0x58>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	481a      	ldr	r0, [pc, #104]	; (8005aa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a3a:	f7fe fb43 	bl	80040c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a3e:	e026      	b.n	8005a8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d209      	bcs.n	8005a6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a58:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7fe fb51 	bl	800410c <vListInsert>
}
 8005a6a:	e010      	b.n	8005a8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f7fe fb47 	bl	800410c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d202      	bcs.n	8005a8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a88:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6013      	str	r3, [r2, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	200005ec 	.word	0x200005ec
 8005a9c:	200004e8 	.word	0x200004e8
 8005aa0:	200005f0 	.word	0x200005f0
 8005aa4:	200005d4 	.word	0x200005d4
 8005aa8:	200005a4 	.word	0x200005a4
 8005aac:	200005a0 	.word	0x200005a0
 8005ab0:	20000608 	.word	0x20000608

08005ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3b04      	subs	r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3b04      	subs	r3, #4
 8005ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f023 0201 	bic.w	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3b04      	subs	r3, #4
 8005ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ae4:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <pxPortInitialiseStack+0x64>)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b14      	subs	r3, #20
 8005aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3b04      	subs	r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f06f 0202 	mvn.w	r2, #2
 8005b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3b20      	subs	r3, #32
 8005b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	08005b1d 	.word	0x08005b1d

08005b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <prvTaskExitError+0x54>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d00a      	beq.n	8005b46 <prvTaskExitError+0x2a>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <prvTaskExitError+0x28>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60bb      	str	r3, [r7, #8]
}
 8005b58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b5a:	bf00      	nop
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0fc      	beq.n	8005b5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	20000020 	.word	0x20000020
	...

08005b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <pxCurrentTCBConst2>)
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	6808      	ldr	r0, [r1, #0]
 8005b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8a:	f380 8809 	msr	PSP, r0
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f380 8811 	msr	BASEPRI, r0
 8005b9a:	4770      	bx	lr
 8005b9c:	f3af 8000 	nop.w

08005ba0 <pxCurrentTCBConst2>:
 8005ba0:	200004e8 	.word	0x200004e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop

08005ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ba8:	4808      	ldr	r0, [pc, #32]	; (8005bcc <prvPortStartFirstTask+0x24>)
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	6800      	ldr	r0, [r0, #0]
 8005bae:	f380 8808 	msr	MSP, r0
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f380 8814 	msr	CONTROL, r0
 8005bba:	b662      	cpsie	i
 8005bbc:	b661      	cpsie	f
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	df00      	svc	0
 8005bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bca:	bf00      	nop
 8005bcc:	e000ed08 	.word	0xe000ed08

08005bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005bd6:	4b46      	ldr	r3, [pc, #280]	; (8005cf0 <xPortStartScheduler+0x120>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a46      	ldr	r2, [pc, #280]	; (8005cf4 <xPortStartScheduler+0x124>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10a      	bne.n	8005bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bf6:	4b3e      	ldr	r3, [pc, #248]	; (8005cf0 <xPortStartScheduler+0x120>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a3f      	ldr	r2, [pc, #252]	; (8005cf8 <xPortStartScheduler+0x128>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10a      	bne.n	8005c16 <xPortStartScheduler+0x46>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60fb      	str	r3, [r7, #12]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <xPortStartScheduler+0x12c>)
 8005c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	22ff      	movs	r2, #255	; 0xff
 8005c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <xPortStartScheduler+0x130>)
 8005c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c3e:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c40:	2207      	movs	r2, #7
 8005c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c44:	e009      	b.n	8005c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c46:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	4a2d      	ldr	r2, [pc, #180]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d0ef      	beq.n	8005c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c66:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1c3 0307 	rsb	r3, r3, #7
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d00a      	beq.n	8005c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60bb      	str	r3, [r7, #8]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c88:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c9a:	4a1a      	ldr	r2, [pc, #104]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ca6:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <xPortStartScheduler+0x138>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <xPortStartScheduler+0x138>)
 8005cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <xPortStartScheduler+0x138>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <xPortStartScheduler+0x138>)
 8005cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cbe:	f000 f8dd 	bl	8005e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cc2:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <xPortStartScheduler+0x13c>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cc8:	f000 f8fc 	bl	8005ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <xPortStartScheduler+0x140>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <xPortStartScheduler+0x140>)
 8005cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cd8:	f7ff ff66 	bl	8005ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cdc:	f7ff fa80 	bl	80051e0 <vTaskSwitchContext>
	prvTaskExitError();
 8005ce0:	f7ff ff1c 	bl	8005b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	e000ed00 	.word	0xe000ed00
 8005cf4:	410fc271 	.word	0x410fc271
 8005cf8:	410fc270 	.word	0x410fc270
 8005cfc:	e000e400 	.word	0xe000e400
 8005d00:	20000614 	.word	0x20000614
 8005d04:	20000618 	.word	0x20000618
 8005d08:	e000ed20 	.word	0xe000ed20
 8005d0c:	20000020 	.word	0x20000020
 8005d10:	e000ef34 	.word	0xe000ef34

08005d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	607b      	str	r3, [r7, #4]
}
 8005d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <vPortEnterCritical+0x58>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a0d      	ldr	r2, [pc, #52]	; (8005d6c <vPortEnterCritical+0x58>)
 8005d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <vPortEnterCritical+0x58>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d10f      	bne.n	8005d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <vPortEnterCritical+0x5c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	603b      	str	r3, [r7, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <vPortEnterCritical+0x4a>
	}
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	20000020 	.word	0x20000020
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <vPortExitCritical+0x50>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10a      	bne.n	8005d98 <vPortExitCritical+0x24>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	607b      	str	r3, [r7, #4]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <vPortExitCritical+0x50>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <vPortExitCritical+0x50>)
 8005da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005da2:	4b08      	ldr	r3, [pc, #32]	; (8005dc4 <vPortExitCritical+0x50>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <vPortExitCritical+0x42>
 8005daa:	2300      	movs	r3, #0
 8005dac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f383 8811 	msr	BASEPRI, r3
}
 8005db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000020 	.word	0x20000020
	...

08005dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005dd0:	f3ef 8009 	mrs	r0, PSP
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <pxCurrentTCBConst>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	f01e 0f10 	tst.w	lr, #16
 8005de0:	bf08      	it	eq
 8005de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dea:	6010      	str	r0, [r2, #0]
 8005dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005df4:	f380 8811 	msr	BASEPRI, r0
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f7ff f9ee 	bl	80051e0 <vTaskSwitchContext>
 8005e04:	f04f 0000 	mov.w	r0, #0
 8005e08:	f380 8811 	msr	BASEPRI, r0
 8005e0c:	bc09      	pop	{r0, r3}
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	6808      	ldr	r0, [r1, #0]
 8005e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e16:	f01e 0f10 	tst.w	lr, #16
 8005e1a:	bf08      	it	eq
 8005e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e20:	f380 8809 	msr	PSP, r0
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	f3af 8000 	nop.w

08005e30 <pxCurrentTCBConst>:
 8005e30:	200004e8 	.word	0x200004e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop

08005e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	607b      	str	r3, [r7, #4]
}
 8005e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e52:	f7ff f90d 	bl	8005070 <xTaskIncrementTick>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <SysTick_Handler+0x40>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	2300      	movs	r3, #0
 8005e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e80:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <vPortSetupTimerInterrupt+0x34>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <vPortSetupTimerInterrupt+0x38>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <vPortSetupTimerInterrupt+0x3c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a0a      	ldr	r2, [pc, #40]	; (8005ebc <vPortSetupTimerInterrupt+0x40>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <vPortSetupTimerInterrupt+0x44>)
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e9e:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <vPortSetupTimerInterrupt+0x34>)
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	601a      	str	r2, [r3, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	e000e010 	.word	0xe000e010
 8005eb4:	e000e018 	.word	0xe000e018
 8005eb8:	20000014 	.word	0x20000014
 8005ebc:	10624dd3 	.word	0x10624dd3
 8005ec0:	e000e014 	.word	0xe000e014

08005ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ed4 <vPortEnableVFP+0x10>
 8005ec8:	6801      	ldr	r1, [r0, #0]
 8005eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ece:	6001      	str	r1, [r0, #0]
 8005ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ed2:	bf00      	nop
 8005ed4:	e000ed88 	.word	0xe000ed88

08005ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ede:	f3ef 8305 	mrs	r3, IPSR
 8005ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	d914      	bls.n	8005f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eea:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <vPortValidateInterruptPriority+0x70>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ef4:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <vPortValidateInterruptPriority+0x74>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	7afa      	ldrb	r2, [r7, #11]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d20a      	bcs.n	8005f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	607b      	str	r3, [r7, #4]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <vPortValidateInterruptPriority+0x78>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f1c:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <vPortValidateInterruptPriority+0x7c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d90a      	bls.n	8005f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	603b      	str	r3, [r7, #0]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <vPortValidateInterruptPriority+0x60>
	}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	e000e3f0 	.word	0xe000e3f0
 8005f4c:	20000614 	.word	0x20000614
 8005f50:	e000ed0c 	.word	0xe000ed0c
 8005f54:	20000618 	.word	0x20000618

08005f58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f64:	f7fe ffda 	bl	8004f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f68:	4b5b      	ldr	r3, [pc, #364]	; (80060d8 <pvPortMalloc+0x180>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f70:	f000 f920 	bl	80061b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f74:	4b59      	ldr	r3, [pc, #356]	; (80060dc <pvPortMalloc+0x184>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f040 8093 	bne.w	80060a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01d      	beq.n	8005fc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f88:	2208      	movs	r2, #8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d014      	beq.n	8005fc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f023 0307 	bic.w	r3, r3, #7
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	617b      	str	r3, [r7, #20]
}
 8005fc0:	bf00      	nop
 8005fc2:	e7fe      	b.n	8005fc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d06e      	beq.n	80060a8 <pvPortMalloc+0x150>
 8005fca:	4b45      	ldr	r3, [pc, #276]	; (80060e0 <pvPortMalloc+0x188>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d869      	bhi.n	80060a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fd4:	4b43      	ldr	r3, [pc, #268]	; (80060e4 <pvPortMalloc+0x18c>)
 8005fd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fd8:	4b42      	ldr	r3, [pc, #264]	; (80060e4 <pvPortMalloc+0x18c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fde:	e004      	b.n	8005fea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <pvPortMalloc+0xa4>
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f1      	bne.n	8005fe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ffc:	4b36      	ldr	r3, [pc, #216]	; (80060d8 <pvPortMalloc+0x180>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006002:	429a      	cmp	r2, r3
 8006004:	d050      	beq.n	80060a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2208      	movs	r2, #8
 800600c:	4413      	add	r3, r2
 800600e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	1ad2      	subs	r2, r2, r3
 8006020:	2308      	movs	r3, #8
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	429a      	cmp	r2, r3
 8006026:	d91f      	bls.n	8006068 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4413      	add	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <pvPortMalloc+0xf8>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	613b      	str	r3, [r7, #16]
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	1ad2      	subs	r2, r2, r3
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006062:	69b8      	ldr	r0, [r7, #24]
 8006064:	f000 f908 	bl	8006278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006068:	4b1d      	ldr	r3, [pc, #116]	; (80060e0 <pvPortMalloc+0x188>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	4a1b      	ldr	r2, [pc, #108]	; (80060e0 <pvPortMalloc+0x188>)
 8006074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006076:	4b1a      	ldr	r3, [pc, #104]	; (80060e0 <pvPortMalloc+0x188>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <pvPortMalloc+0x190>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d203      	bcs.n	800608a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006082:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <pvPortMalloc+0x188>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <pvPortMalloc+0x190>)
 8006088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <pvPortMalloc+0x184>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	431a      	orrs	r2, r3
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <pvPortMalloc+0x194>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a11      	ldr	r2, [pc, #68]	; (80060ec <pvPortMalloc+0x194>)
 80060a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060a8:	f7fe ff46 	bl	8004f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <pvPortMalloc+0x174>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60fb      	str	r3, [r7, #12]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <pvPortMalloc+0x172>
	return pvReturn;
 80060cc:	69fb      	ldr	r3, [r7, #28]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3728      	adds	r7, #40	; 0x28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20004224 	.word	0x20004224
 80060dc:	20004238 	.word	0x20004238
 80060e0:	20004228 	.word	0x20004228
 80060e4:	2000421c 	.word	0x2000421c
 80060e8:	2000422c 	.word	0x2000422c
 80060ec:	20004230 	.word	0x20004230

080060f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d04d      	beq.n	800619e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006102:	2308      	movs	r3, #8
 8006104:	425b      	negs	r3, r3
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <vPortFree+0xb8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4013      	ands	r3, r2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <vPortFree+0x44>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60fb      	str	r3, [r7, #12]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <vPortFree+0x62>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60bb      	str	r3, [r7, #8]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <vPortFree+0xb8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01e      	beq.n	800619e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11a      	bne.n	800619e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <vPortFree+0xb8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	43db      	mvns	r3, r3
 8006172:	401a      	ands	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006178:	f7fe fed0 	bl	8004f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <vPortFree+0xbc>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4413      	add	r3, r2
 8006186:	4a09      	ldr	r2, [pc, #36]	; (80061ac <vPortFree+0xbc>)
 8006188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800618a:	6938      	ldr	r0, [r7, #16]
 800618c:	f000 f874 	bl	8006278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <vPortFree+0xc0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	4a06      	ldr	r2, [pc, #24]	; (80061b0 <vPortFree+0xc0>)
 8006198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800619a:	f7fe fecd 	bl	8004f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800619e:	bf00      	nop
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20004238 	.word	0x20004238
 80061ac:	20004228 	.word	0x20004228
 80061b0:	20004234 	.word	0x20004234

080061b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061c0:	4b27      	ldr	r3, [pc, #156]	; (8006260 <prvHeapInit+0xac>)
 80061c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00c      	beq.n	80061e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3307      	adds	r3, #7
 80061d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0307 	bic.w	r3, r3, #7
 80061da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	4a1f      	ldr	r2, [pc, #124]	; (8006260 <prvHeapInit+0xac>)
 80061e4:	4413      	add	r3, r2
 80061e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061ec:	4a1d      	ldr	r2, [pc, #116]	; (8006264 <prvHeapInit+0xb0>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061f2:	4b1c      	ldr	r3, [pc, #112]	; (8006264 <prvHeapInit+0xb0>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4413      	add	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006200:	2208      	movs	r2, #8
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a15      	ldr	r2, [pc, #84]	; (8006268 <prvHeapInit+0xb4>)
 8006214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006216:	4b14      	ldr	r3, [pc, #80]	; (8006268 <prvHeapInit+0xb4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800621e:	4b12      	ldr	r3, [pc, #72]	; (8006268 <prvHeapInit+0xb4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006234:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <prvHeapInit+0xb4>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a0a      	ldr	r2, [pc, #40]	; (800626c <prvHeapInit+0xb8>)
 8006242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	4a09      	ldr	r2, [pc, #36]	; (8006270 <prvHeapInit+0xbc>)
 800624a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <prvHeapInit+0xc0>)
 800624e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006252:	601a      	str	r2, [r3, #0]
}
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	2000061c 	.word	0x2000061c
 8006264:	2000421c 	.word	0x2000421c
 8006268:	20004224 	.word	0x20004224
 800626c:	2000422c 	.word	0x2000422c
 8006270:	20004228 	.word	0x20004228
 8006274:	20004238 	.word	0x20004238

08006278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006280:	4b28      	ldr	r3, [pc, #160]	; (8006324 <prvInsertBlockIntoFreeList+0xac>)
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e002      	b.n	800628c <prvInsertBlockIntoFreeList+0x14>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	429a      	cmp	r2, r3
 8006294:	d8f7      	bhi.n	8006286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d108      	bne.n	80062ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	441a      	add	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	441a      	add	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d118      	bne.n	8006300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b15      	ldr	r3, [pc, #84]	; (8006328 <prvInsertBlockIntoFreeList+0xb0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d00d      	beq.n	80062f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	e008      	b.n	8006308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <prvInsertBlockIntoFreeList+0xb0>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e003      	b.n	8006308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	429a      	cmp	r2, r3
 800630e:	d002      	beq.n	8006316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	2000421c 	.word	0x2000421c
 8006328:	20004224 	.word	0x20004224

0800632c <arm_fir_init_f32>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	9c04      	ldr	r4, [sp, #16]
 8006330:	6082      	str	r2, [r0, #8]
 8006332:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006336:	3c01      	subs	r4, #1
 8006338:	4605      	mov	r5, r0
 800633a:	440c      	add	r4, r1
 800633c:	8001      	strh	r1, [r0, #0]
 800633e:	461e      	mov	r6, r3
 8006340:	00a2      	lsls	r2, r4, #2
 8006342:	4618      	mov	r0, r3
 8006344:	2100      	movs	r1, #0
 8006346:	f000 faa1 	bl	800688c <memset>
 800634a:	606e      	str	r6, [r5, #4]
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	bf00      	nop

08006350 <arm_fir_f32>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	ed2d 8b10 	vpush	{d8-d15}
 8006358:	b089      	sub	sp, #36	; 0x24
 800635a:	4605      	mov	r5, r0
 800635c:	9003      	str	r0, [sp, #12]
 800635e:	8800      	ldrh	r0, [r0, #0]
 8006360:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	461e      	mov	r6, r3
 8006368:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800636c:	3b01      	subs	r3, #1
 800636e:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8006372:	08f3      	lsrs	r3, r6, #3
 8006374:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8006378:	9001      	str	r0, [sp, #4]
 800637a:	4625      	mov	r5, r4
 800637c:	9400      	str	r4, [sp, #0]
 800637e:	9302      	str	r3, [sp, #8]
 8006380:	f000 81ee 	beq.w	8006760 <arm_fir_f32+0x410>
 8006384:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8006388:	469e      	mov	lr, r3
 800638a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800638e:	1f1e      	subs	r6, r3, #4
 8006390:	4604      	mov	r4, r0
 8006392:	9605      	str	r6, [sp, #20]
 8006394:	eb08 0003 	add.w	r0, r8, r3
 8006398:	f004 0a07 	and.w	sl, r4, #7
 800639c:	4613      	mov	r3, r2
 800639e:	f10c 0420 	add.w	r4, ip, #32
 80063a2:	f8cd c018 	str.w	ip, [sp, #24]
 80063a6:	4684      	mov	ip, r0
 80063a8:	4648      	mov	r0, r9
 80063aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80063ae:	9107      	str	r1, [sp, #28]
 80063b0:	f105 0720 	add.w	r7, r5, #32
 80063b4:	f101 0620 	add.w	r6, r1, #32
 80063b8:	f102 0520 	add.w	r5, r2, #32
 80063bc:	4652      	mov	r2, sl
 80063be:	469a      	mov	sl, r3
 80063c0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80063c4:	f847 3c20 	str.w	r3, [r7, #-32]
 80063c8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80063cc:	f847 3c1c 	str.w	r3, [r7, #-28]
 80063d0:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80063d4:	f847 3c18 	str.w	r3, [r7, #-24]
 80063d8:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80063dc:	f847 3c14 	str.w	r3, [r7, #-20]
 80063e0:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80063e4:	f847 3c10 	str.w	r3, [r7, #-16]
 80063e8:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80063ec:	f847 3c0c 	str.w	r3, [r7, #-12]
 80063f0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80063f4:	f847 3c08 	str.w	r3, [r7, #-8]
 80063f8:	eddf 3af1 	vldr	s7, [pc, #964]	; 80067c0 <arm_fir_f32+0x470>
 80063fc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006400:	f847 3c04 	str.w	r3, [r7, #-4]
 8006404:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8006408:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800640c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8006410:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8006414:	ed14 1a04 	vldr	s2, [r4, #-16]
 8006418:	ed54 0a03 	vldr	s1, [r4, #-12]
 800641c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006420:	1f21      	subs	r1, r4, #4
 8006422:	eef0 8a63 	vmov.f32	s17, s7
 8006426:	eef0 9a63 	vmov.f32	s19, s7
 800642a:	eef0 aa63 	vmov.f32	s21, s7
 800642e:	eef0 ba63 	vmov.f32	s23, s7
 8006432:	eeb0 ca63 	vmov.f32	s24, s7
 8006436:	eef0 ca63 	vmov.f32	s25, s7
 800643a:	eeb0 da63 	vmov.f32	s26, s7
 800643e:	2800      	cmp	r0, #0
 8006440:	f000 81e8 	beq.w	8006814 <arm_fir_f32+0x4c4>
 8006444:	f108 0120 	add.w	r1, r8, #32
 8006448:	f104 031c 	add.w	r3, r4, #28
 800644c:	4683      	mov	fp, r0
 800644e:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8006452:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8006456:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800645a:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 800645e:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8006462:	ed11 6a04 	vldr	s12, [r1, #-16]
 8006466:	ed51 6a03 	vldr	s13, [r1, #-12]
 800646a:	ed11 7a02 	vldr	s14, [r1, #-8]
 800646e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006472:	ee23 fa04 	vmul.f32	s30, s6, s8
 8006476:	ee62 ea84 	vmul.f32	s29, s5, s8
 800647a:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 800647e:	ee22 ea04 	vmul.f32	s28, s4, s8
 8006482:	ee61 da84 	vmul.f32	s27, s3, s8
 8006486:	ee21 ba04 	vmul.f32	s22, s2, s8
 800648a:	ee20 aa84 	vmul.f32	s20, s1, s8
 800648e:	ee20 9a04 	vmul.f32	s18, s0, s8
 8006492:	ee28 4a04 	vmul.f32	s8, s16, s8
 8006496:	ee62 fa24 	vmul.f32	s31, s4, s9
 800649a:	ee3c ca0e 	vadd.f32	s24, s24, s28
 800649e:	ee7b baad 	vadd.f32	s23, s23, s27
 80064a2:	ee21 eaa4 	vmul.f32	s28, s3, s9
 80064a6:	ee61 da24 	vmul.f32	s27, s2, s9
 80064aa:	ee7a aa8b 	vadd.f32	s21, s21, s22
 80064ae:	ee79 9a8a 	vadd.f32	s19, s19, s20
 80064b2:	ee20 baa4 	vmul.f32	s22, s1, s9
 80064b6:	ee20 aa24 	vmul.f32	s20, s0, s9
 80064ba:	ee3d da0f 	vadd.f32	s26, s26, s30
 80064be:	ee7c caae 	vadd.f32	s25, s25, s29
 80064c2:	ee22 faa4 	vmul.f32	s30, s5, s9
 80064c6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80064ca:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 80064ce:	ee28 9a24 	vmul.f32	s18, s16, s9
 80064d2:	ee73 3a84 	vadd.f32	s7, s7, s8
 80064d6:	ee63 4a24 	vmul.f32	s9, s6, s9
 80064da:	ee22 4a05 	vmul.f32	s8, s4, s10
 80064de:	ee61 ea05 	vmul.f32	s29, s2, s10
 80064e2:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80064e6:	ee3d da0f 	vadd.f32	s26, s26, s30
 80064ea:	ee7c caaf 	vadd.f32	s25, s25, s31
 80064ee:	ee20 fa85 	vmul.f32	s30, s1, s10
 80064f2:	ee61 fa85 	vmul.f32	s31, s3, s10
 80064f6:	ee3c ea0e 	vadd.f32	s28, s24, s28
 80064fa:	ee7b daad 	vadd.f32	s27, s23, s27
 80064fe:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8006502:	ee60 ba05 	vmul.f32	s23, s0, s10
 8006506:	ee68 aa05 	vmul.f32	s21, s16, s10
 800650a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800650e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006512:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8006516:	ee63 4a05 	vmul.f32	s9, s6, s10
 800651a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800651e:	ee21 9a25 	vmul.f32	s18, s2, s11
 8006522:	ee20 ca25 	vmul.f32	s24, s0, s11
 8006526:	ee3d da04 	vadd.f32	s26, s26, s8
 800652a:	ee7c caaf 	vadd.f32	s25, s25, s31
 800652e:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8006532:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8006536:	ed53 1a04 	vldr	s3, [r3, #-16]
 800653a:	ee60 eaa5 	vmul.f32	s29, s1, s11
 800653e:	ee7d da8f 	vadd.f32	s27, s27, s30
 8006542:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8006546:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800654a:	ee68 ba25 	vmul.f32	s23, s16, s11
 800654e:	ee63 aa25 	vmul.f32	s21, s6, s11
 8006552:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8006556:	ee73 3a85 	vadd.f32	s7, s7, s10
 800655a:	ee22 5aa5 	vmul.f32	s10, s5, s11
 800655e:	ee62 5a25 	vmul.f32	s11, s4, s11
 8006562:	ee61 4a06 	vmul.f32	s9, s2, s12
 8006566:	ee60 9a86 	vmul.f32	s19, s1, s12
 800656a:	ee60 fa06 	vmul.f32	s31, s0, s12
 800656e:	ed13 1a03 	vldr	s2, [r3, #-12]
 8006572:	ee23 fa06 	vmul.f32	s30, s6, s12
 8006576:	ee3d da04 	vadd.f32	s26, s26, s8
 800657a:	ee7c ca89 	vadd.f32	s25, s25, s18
 800657e:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8006582:	ee28 9a06 	vmul.f32	s18, s16, s12
 8006586:	ee7d da8c 	vadd.f32	s27, s27, s24
 800658a:	ee3b ba2b 	vadd.f32	s22, s22, s23
 800658e:	ee22 ca86 	vmul.f32	s24, s5, s12
 8006592:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8006596:	ee78 8a85 	vadd.f32	s17, s17, s10
 800659a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800659e:	ee62 5a06 	vmul.f32	s11, s4, s12
 80065a2:	ee21 6a86 	vmul.f32	s12, s3, s12
 80065a6:	ee20 4a26 	vmul.f32	s8, s0, s13
 80065aa:	ee63 ea26 	vmul.f32	s29, s6, s13
 80065ae:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80065b2:	ee22 5a26 	vmul.f32	s10, s4, s13
 80065b6:	ee3d da24 	vadd.f32	s26, s26, s9
 80065ba:	ee7c caa9 	vadd.f32	s25, s25, s19
 80065be:	ee60 4aa6 	vmul.f32	s9, s1, s13
 80065c2:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80065c6:	ed53 0a02 	vldr	s1, [r3, #-8]
 80065ca:	ee68 fa26 	vmul.f32	s31, s16, s13
 80065ce:	ee7d da89 	vadd.f32	s27, s27, s18
 80065d2:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80065d6:	ee78 8aa5 	vadd.f32	s17, s17, s11
 80065da:	ee22 faa6 	vmul.f32	s30, s5, s13
 80065de:	ee73 3a86 	vadd.f32	s7, s7, s12
 80065e2:	ee21 6aa6 	vmul.f32	s12, s3, s13
 80065e6:	ee61 6a26 	vmul.f32	s13, s2, s13
 80065ea:	ee60 aa07 	vmul.f32	s21, s0, s14
 80065ee:	ee28 ca07 	vmul.f32	s24, s16, s14
 80065f2:	ee63 ba07 	vmul.f32	s23, s6, s14
 80065f6:	ee7a 9a05 	vadd.f32	s19, s20, s10
 80065fa:	ee78 8a86 	vadd.f32	s17, s17, s12
 80065fe:	ee3d da24 	vadd.f32	s26, s26, s9
 8006602:	ee7c ca84 	vadd.f32	s25, s25, s8
 8006606:	ee7d daae 	vadd.f32	s27, s27, s29
 800660a:	ee22 9a07 	vmul.f32	s18, s4, s14
 800660e:	ee62 ea87 	vmul.f32	s29, s5, s14
 8006612:	ee61 5a87 	vmul.f32	s11, s3, s14
 8006616:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800661a:	ed13 0a01 	vldr	s0, [r3, #-4]
 800661e:	ee61 6a07 	vmul.f32	s13, s2, s14
 8006622:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8006626:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800662a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800662e:	ee68 4a27 	vmul.f32	s9, s16, s15
 8006632:	ee3d da2a 	vadd.f32	s26, s26, s21
 8006636:	ee7c ca8c 	vadd.f32	s25, s25, s24
 800663a:	ee23 8a27 	vmul.f32	s16, s6, s15
 800663e:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8006642:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8006646:	ee22 aa27 	vmul.f32	s20, s4, s15
 800664a:	ee21 5aa7 	vmul.f32	s10, s3, s15
 800664e:	ee21 6a27 	vmul.f32	s12, s2, s15
 8006652:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8006656:	ee7d daae 	vadd.f32	s27, s27, s29
 800665a:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800665e:	ee3b ba09 	vadd.f32	s22, s22, s18
 8006662:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8006666:	ee73 3a87 	vadd.f32	s7, s7, s14
 800666a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800666e:	f1bb 0b01 	subs.w	fp, fp, #1
 8006672:	f101 0120 	add.w	r1, r1, #32
 8006676:	ee3d da24 	vadd.f32	s26, s26, s9
 800667a:	ee7c ca88 	vadd.f32	s25, s25, s16
 800667e:	ee3e ca04 	vadd.f32	s24, s28, s8
 8006682:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8006686:	ee7b aa05 	vadd.f32	s21, s22, s10
 800668a:	ee79 9a86 	vadd.f32	s19, s19, s12
 800668e:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8006692:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8006696:	f103 0320 	add.w	r3, r3, #32
 800669a:	f47f aed8 	bne.w	800644e <arm_fir_f32+0xfe>
 800669e:	eb09 0104 	add.w	r1, r9, r4
 80066a2:	46e3      	mov	fp, ip
 80066a4:	b3a2      	cbz	r2, 8006710 <arm_fir_f32+0x3c0>
 80066a6:	4613      	mov	r3, r2
 80066a8:	ecbb 6a01 	vldmia	fp!, {s12}
 80066ac:	ecf1 7a01 	vldmia	r1!, {s15}
 80066b0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80066b4:	ee22 4a86 	vmul.f32	s8, s5, s12
 80066b8:	ee62 4a06 	vmul.f32	s9, s4, s12
 80066bc:	ee21 5a86 	vmul.f32	s10, s3, s12
 80066c0:	ee61 5a06 	vmul.f32	s11, s2, s12
 80066c4:	ee60 6a86 	vmul.f32	s13, s1, s12
 80066c8:	ee20 7a06 	vmul.f32	s14, s0, s12
 80066cc:	ee27 6a86 	vmul.f32	s12, s15, s12
 80066d0:	3b01      	subs	r3, #1
 80066d2:	ee3d da03 	vadd.f32	s26, s26, s6
 80066d6:	ee7c ca84 	vadd.f32	s25, s25, s8
 80066da:	eeb0 3a62 	vmov.f32	s6, s5
 80066de:	ee3c ca24 	vadd.f32	s24, s24, s9
 80066e2:	eef0 2a42 	vmov.f32	s5, s4
 80066e6:	ee7b ba85 	vadd.f32	s23, s23, s10
 80066ea:	eeb0 2a61 	vmov.f32	s4, s3
 80066ee:	ee7a aaa5 	vadd.f32	s21, s21, s11
 80066f2:	eef0 1a41 	vmov.f32	s3, s2
 80066f6:	ee79 9aa6 	vadd.f32	s19, s19, s13
 80066fa:	eeb0 1a60 	vmov.f32	s2, s1
 80066fe:	ee78 8a87 	vadd.f32	s17, s17, s14
 8006702:	eef0 0a40 	vmov.f32	s1, s0
 8006706:	ee73 3a86 	vadd.f32	s7, s7, s12
 800670a:	eeb0 0a67 	vmov.f32	s0, s15
 800670e:	d1cb      	bne.n	80066a8 <arm_fir_f32+0x358>
 8006710:	f1be 0e01 	subs.w	lr, lr, #1
 8006714:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8006718:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800671c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8006720:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8006724:	ed45 aa04 	vstr	s21, [r5, #-16]
 8006728:	ed45 9a03 	vstr	s19, [r5, #-12]
 800672c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8006730:	ed45 3a01 	vstr	s7, [r5, #-4]
 8006734:	f107 0720 	add.w	r7, r7, #32
 8006738:	f106 0620 	add.w	r6, r6, #32
 800673c:	f104 0420 	add.w	r4, r4, #32
 8006740:	f105 0520 	add.w	r5, r5, #32
 8006744:	f47f ae3c 	bne.w	80063c0 <arm_fir_f32+0x70>
 8006748:	9b02      	ldr	r3, [sp, #8]
 800674a:	9800      	ldr	r0, [sp, #0]
 800674c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006750:	9907      	ldr	r1, [sp, #28]
 8006752:	015b      	lsls	r3, r3, #5
 8006754:	4652      	mov	r2, sl
 8006756:	4418      	add	r0, r3
 8006758:	9000      	str	r0, [sp, #0]
 800675a:	4419      	add	r1, r3
 800675c:	449c      	add	ip, r3
 800675e:	441a      	add	r2, r3
 8006760:	9b04      	ldr	r3, [sp, #16]
 8006762:	f013 0e07 	ands.w	lr, r3, #7
 8006766:	d01f      	beq.n	80067a8 <arm_fir_f32+0x458>
 8006768:	9f00      	ldr	r7, [sp, #0]
 800676a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800676e:	4676      	mov	r6, lr
 8006770:	4665      	mov	r5, ip
 8006772:	f851 3b04 	ldr.w	r3, [r1], #4
 8006776:	eddf 6a12 	vldr	s13, [pc, #72]	; 80067c0 <arm_fir_f32+0x470>
 800677a:	f847 3b04 	str.w	r3, [r7], #4
 800677e:	4644      	mov	r4, r8
 8006780:	464b      	mov	r3, r9
 8006782:	4628      	mov	r0, r5
 8006784:	ecb0 7a01 	vldmia	r0!, {s14}
 8006788:	ecf4 7a01 	vldmia	r4!, {s15}
 800678c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006790:	3b01      	subs	r3, #1
 8006792:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006796:	d1f5      	bne.n	8006784 <arm_fir_f32+0x434>
 8006798:	3e01      	subs	r6, #1
 800679a:	ece2 6a01 	vstmia	r2!, {s13}
 800679e:	f105 0504 	add.w	r5, r5, #4
 80067a2:	d1e6      	bne.n	8006772 <arm_fir_f32+0x422>
 80067a4:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	1e59      	subs	r1, r3, #1
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	088e      	lsrs	r6, r1, #2
 80067b0:	685c      	ldr	r4, [r3, #4]
 80067b2:	d020      	beq.n	80067f6 <arm_fir_f32+0x4a6>
 80067b4:	f104 0210 	add.w	r2, r4, #16
 80067b8:	f10c 0310 	add.w	r3, ip, #16
 80067bc:	4630      	mov	r0, r6
 80067be:	e001      	b.n	80067c4 <arm_fir_f32+0x474>
 80067c0:	00000000 	.word	0x00000000
 80067c4:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80067c8:	f842 5c10 	str.w	r5, [r2, #-16]
 80067cc:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80067d0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80067d4:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80067d8:	f842 5c08 	str.w	r5, [r2, #-8]
 80067dc:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80067e0:	f842 5c04 	str.w	r5, [r2, #-4]
 80067e4:	3801      	subs	r0, #1
 80067e6:	f103 0310 	add.w	r3, r3, #16
 80067ea:	f102 0210 	add.w	r2, r2, #16
 80067ee:	d1e9      	bne.n	80067c4 <arm_fir_f32+0x474>
 80067f0:	0133      	lsls	r3, r6, #4
 80067f2:	441c      	add	r4, r3
 80067f4:	449c      	add	ip, r3
 80067f6:	f011 0303 	ands.w	r3, r1, #3
 80067fa:	d006      	beq.n	800680a <arm_fir_f32+0x4ba>
 80067fc:	4622      	mov	r2, r4
 80067fe:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006802:	f842 1b04 	str.w	r1, [r2], #4
 8006806:	3b01      	subs	r3, #1
 8006808:	d1f9      	bne.n	80067fe <arm_fir_f32+0x4ae>
 800680a:	b009      	add	sp, #36	; 0x24
 800680c:	ecbd 8b10 	vpop	{d8-d15}
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	46c3      	mov	fp, r8
 8006816:	e745      	b.n	80066a4 <arm_fir_f32+0x354>

08006818 <__errno>:
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <__errno+0x8>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000024 	.word	0x20000024

08006824 <__libc_init_array>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	4d0d      	ldr	r5, [pc, #52]	; (800685c <__libc_init_array+0x38>)
 8006828:	4c0d      	ldr	r4, [pc, #52]	; (8006860 <__libc_init_array+0x3c>)
 800682a:	1b64      	subs	r4, r4, r5
 800682c:	10a4      	asrs	r4, r4, #2
 800682e:	2600      	movs	r6, #0
 8006830:	42a6      	cmp	r6, r4
 8006832:	d109      	bne.n	8006848 <__libc_init_array+0x24>
 8006834:	4d0b      	ldr	r5, [pc, #44]	; (8006864 <__libc_init_array+0x40>)
 8006836:	4c0c      	ldr	r4, [pc, #48]	; (8006868 <__libc_init_array+0x44>)
 8006838:	f000 fcf8 	bl	800722c <_init>
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	2600      	movs	r6, #0
 8006842:	42a6      	cmp	r6, r4
 8006844:	d105      	bne.n	8006852 <__libc_init_array+0x2e>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	f855 3b04 	ldr.w	r3, [r5], #4
 800684c:	4798      	blx	r3
 800684e:	3601      	adds	r6, #1
 8006850:	e7ee      	b.n	8006830 <__libc_init_array+0xc>
 8006852:	f855 3b04 	ldr.w	r3, [r5], #4
 8006856:	4798      	blx	r3
 8006858:	3601      	adds	r6, #1
 800685a:	e7f2      	b.n	8006842 <__libc_init_array+0x1e>
 800685c:	08007348 	.word	0x08007348
 8006860:	08007348 	.word	0x08007348
 8006864:	08007348 	.word	0x08007348
 8006868:	0800734c 	.word	0x0800734c

0800686c <__retarget_lock_acquire_recursive>:
 800686c:	4770      	bx	lr

0800686e <__retarget_lock_release_recursive>:
 800686e:	4770      	bx	lr

08006870 <memcpy>:
 8006870:	440a      	add	r2, r1
 8006872:	4291      	cmp	r1, r2
 8006874:	f100 33ff 	add.w	r3, r0, #4294967295
 8006878:	d100      	bne.n	800687c <memcpy+0xc>
 800687a:	4770      	bx	lr
 800687c:	b510      	push	{r4, lr}
 800687e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006886:	4291      	cmp	r1, r2
 8006888:	d1f9      	bne.n	800687e <memcpy+0xe>
 800688a:	bd10      	pop	{r4, pc}

0800688c <memset>:
 800688c:	4402      	add	r2, r0
 800688e:	4603      	mov	r3, r0
 8006890:	4293      	cmp	r3, r2
 8006892:	d100      	bne.n	8006896 <memset+0xa>
 8006894:	4770      	bx	lr
 8006896:	f803 1b01 	strb.w	r1, [r3], #1
 800689a:	e7f9      	b.n	8006890 <memset+0x4>

0800689c <sbrk_aligned>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4e0e      	ldr	r6, [pc, #56]	; (80068d8 <sbrk_aligned+0x3c>)
 80068a0:	460c      	mov	r4, r1
 80068a2:	6831      	ldr	r1, [r6, #0]
 80068a4:	4605      	mov	r5, r0
 80068a6:	b911      	cbnz	r1, 80068ae <sbrk_aligned+0x12>
 80068a8:	f000 f8f6 	bl	8006a98 <_sbrk_r>
 80068ac:	6030      	str	r0, [r6, #0]
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 f8f1 	bl	8006a98 <_sbrk_r>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d00a      	beq.n	80068d0 <sbrk_aligned+0x34>
 80068ba:	1cc4      	adds	r4, r0, #3
 80068bc:	f024 0403 	bic.w	r4, r4, #3
 80068c0:	42a0      	cmp	r0, r4
 80068c2:	d007      	beq.n	80068d4 <sbrk_aligned+0x38>
 80068c4:	1a21      	subs	r1, r4, r0
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 f8e6 	bl	8006a98 <_sbrk_r>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d101      	bne.n	80068d4 <sbrk_aligned+0x38>
 80068d0:	f04f 34ff 	mov.w	r4, #4294967295
 80068d4:	4620      	mov	r0, r4
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	20004244 	.word	0x20004244

080068dc <_malloc_r>:
 80068dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e0:	1ccd      	adds	r5, r1, #3
 80068e2:	f025 0503 	bic.w	r5, r5, #3
 80068e6:	3508      	adds	r5, #8
 80068e8:	2d0c      	cmp	r5, #12
 80068ea:	bf38      	it	cc
 80068ec:	250c      	movcc	r5, #12
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	4607      	mov	r7, r0
 80068f2:	db01      	blt.n	80068f8 <_malloc_r+0x1c>
 80068f4:	42a9      	cmp	r1, r5
 80068f6:	d905      	bls.n	8006904 <_malloc_r+0x28>
 80068f8:	230c      	movs	r3, #12
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	2600      	movs	r6, #0
 80068fe:	4630      	mov	r0, r6
 8006900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006904:	4e2e      	ldr	r6, [pc, #184]	; (80069c0 <_malloc_r+0xe4>)
 8006906:	f000 f8f7 	bl	8006af8 <__malloc_lock>
 800690a:	6833      	ldr	r3, [r6, #0]
 800690c:	461c      	mov	r4, r3
 800690e:	bb34      	cbnz	r4, 800695e <_malloc_r+0x82>
 8006910:	4629      	mov	r1, r5
 8006912:	4638      	mov	r0, r7
 8006914:	f7ff ffc2 	bl	800689c <sbrk_aligned>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	4604      	mov	r4, r0
 800691c:	d14d      	bne.n	80069ba <_malloc_r+0xde>
 800691e:	6834      	ldr	r4, [r6, #0]
 8006920:	4626      	mov	r6, r4
 8006922:	2e00      	cmp	r6, #0
 8006924:	d140      	bne.n	80069a8 <_malloc_r+0xcc>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	4631      	mov	r1, r6
 800692a:	4638      	mov	r0, r7
 800692c:	eb04 0803 	add.w	r8, r4, r3
 8006930:	f000 f8b2 	bl	8006a98 <_sbrk_r>
 8006934:	4580      	cmp	r8, r0
 8006936:	d13a      	bne.n	80069ae <_malloc_r+0xd2>
 8006938:	6821      	ldr	r1, [r4, #0]
 800693a:	3503      	adds	r5, #3
 800693c:	1a6d      	subs	r5, r5, r1
 800693e:	f025 0503 	bic.w	r5, r5, #3
 8006942:	3508      	adds	r5, #8
 8006944:	2d0c      	cmp	r5, #12
 8006946:	bf38      	it	cc
 8006948:	250c      	movcc	r5, #12
 800694a:	4629      	mov	r1, r5
 800694c:	4638      	mov	r0, r7
 800694e:	f7ff ffa5 	bl	800689c <sbrk_aligned>
 8006952:	3001      	adds	r0, #1
 8006954:	d02b      	beq.n	80069ae <_malloc_r+0xd2>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	442b      	add	r3, r5
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	e00e      	b.n	800697c <_malloc_r+0xa0>
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	1b52      	subs	r2, r2, r5
 8006962:	d41e      	bmi.n	80069a2 <_malloc_r+0xc6>
 8006964:	2a0b      	cmp	r2, #11
 8006966:	d916      	bls.n	8006996 <_malloc_r+0xba>
 8006968:	1961      	adds	r1, r4, r5
 800696a:	42a3      	cmp	r3, r4
 800696c:	6025      	str	r5, [r4, #0]
 800696e:	bf18      	it	ne
 8006970:	6059      	strne	r1, [r3, #4]
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	bf08      	it	eq
 8006976:	6031      	streq	r1, [r6, #0]
 8006978:	5162      	str	r2, [r4, r5]
 800697a:	604b      	str	r3, [r1, #4]
 800697c:	4638      	mov	r0, r7
 800697e:	f104 060b 	add.w	r6, r4, #11
 8006982:	f000 f8bf 	bl	8006b04 <__malloc_unlock>
 8006986:	f026 0607 	bic.w	r6, r6, #7
 800698a:	1d23      	adds	r3, r4, #4
 800698c:	1af2      	subs	r2, r6, r3
 800698e:	d0b6      	beq.n	80068fe <_malloc_r+0x22>
 8006990:	1b9b      	subs	r3, r3, r6
 8006992:	50a3      	str	r3, [r4, r2]
 8006994:	e7b3      	b.n	80068fe <_malloc_r+0x22>
 8006996:	6862      	ldr	r2, [r4, #4]
 8006998:	42a3      	cmp	r3, r4
 800699a:	bf0c      	ite	eq
 800699c:	6032      	streq	r2, [r6, #0]
 800699e:	605a      	strne	r2, [r3, #4]
 80069a0:	e7ec      	b.n	800697c <_malloc_r+0xa0>
 80069a2:	4623      	mov	r3, r4
 80069a4:	6864      	ldr	r4, [r4, #4]
 80069a6:	e7b2      	b.n	800690e <_malloc_r+0x32>
 80069a8:	4634      	mov	r4, r6
 80069aa:	6876      	ldr	r6, [r6, #4]
 80069ac:	e7b9      	b.n	8006922 <_malloc_r+0x46>
 80069ae:	230c      	movs	r3, #12
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	4638      	mov	r0, r7
 80069b4:	f000 f8a6 	bl	8006b04 <__malloc_unlock>
 80069b8:	e7a1      	b.n	80068fe <_malloc_r+0x22>
 80069ba:	6025      	str	r5, [r4, #0]
 80069bc:	e7de      	b.n	800697c <_malloc_r+0xa0>
 80069be:	bf00      	nop
 80069c0:	20004240 	.word	0x20004240

080069c4 <cleanup_glue>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	460c      	mov	r4, r1
 80069c8:	6809      	ldr	r1, [r1, #0]
 80069ca:	4605      	mov	r5, r0
 80069cc:	b109      	cbz	r1, 80069d2 <cleanup_glue+0xe>
 80069ce:	f7ff fff9 	bl	80069c4 <cleanup_glue>
 80069d2:	4621      	mov	r1, r4
 80069d4:	4628      	mov	r0, r5
 80069d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069da:	f000 b899 	b.w	8006b10 <_free_r>
	...

080069e0 <_reclaim_reent>:
 80069e0:	4b2c      	ldr	r3, [pc, #176]	; (8006a94 <_reclaim_reent+0xb4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4283      	cmp	r3, r0
 80069e6:	b570      	push	{r4, r5, r6, lr}
 80069e8:	4604      	mov	r4, r0
 80069ea:	d051      	beq.n	8006a90 <_reclaim_reent+0xb0>
 80069ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069ee:	b143      	cbz	r3, 8006a02 <_reclaim_reent+0x22>
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d14a      	bne.n	8006a8c <_reclaim_reent+0xac>
 80069f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f8:	6819      	ldr	r1, [r3, #0]
 80069fa:	b111      	cbz	r1, 8006a02 <_reclaim_reent+0x22>
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 f887 	bl	8006b10 <_free_r>
 8006a02:	6961      	ldr	r1, [r4, #20]
 8006a04:	b111      	cbz	r1, 8006a0c <_reclaim_reent+0x2c>
 8006a06:	4620      	mov	r0, r4
 8006a08:	f000 f882 	bl	8006b10 <_free_r>
 8006a0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a0e:	b111      	cbz	r1, 8006a16 <_reclaim_reent+0x36>
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 f87d 	bl	8006b10 <_free_r>
 8006a16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a18:	b111      	cbz	r1, 8006a20 <_reclaim_reent+0x40>
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 f878 	bl	8006b10 <_free_r>
 8006a20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006a22:	b111      	cbz	r1, 8006a2a <_reclaim_reent+0x4a>
 8006a24:	4620      	mov	r0, r4
 8006a26:	f000 f873 	bl	8006b10 <_free_r>
 8006a2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006a2c:	b111      	cbz	r1, 8006a34 <_reclaim_reent+0x54>
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 f86e 	bl	8006b10 <_free_r>
 8006a34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a36:	b111      	cbz	r1, 8006a3e <_reclaim_reent+0x5e>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 f869 	bl	8006b10 <_free_r>
 8006a3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006a40:	b111      	cbz	r1, 8006a48 <_reclaim_reent+0x68>
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 f864 	bl	8006b10 <_free_r>
 8006a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a4a:	b111      	cbz	r1, 8006a52 <_reclaim_reent+0x72>
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f000 f85f 	bl	8006b10 <_free_r>
 8006a52:	69a3      	ldr	r3, [r4, #24]
 8006a54:	b1e3      	cbz	r3, 8006a90 <_reclaim_reent+0xb0>
 8006a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a58:	4620      	mov	r0, r4
 8006a5a:	4798      	blx	r3
 8006a5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a5e:	b1b9      	cbz	r1, 8006a90 <_reclaim_reent+0xb0>
 8006a60:	4620      	mov	r0, r4
 8006a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a66:	f7ff bfad 	b.w	80069c4 <cleanup_glue>
 8006a6a:	5949      	ldr	r1, [r1, r5]
 8006a6c:	b941      	cbnz	r1, 8006a80 <_reclaim_reent+0xa0>
 8006a6e:	3504      	adds	r5, #4
 8006a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a72:	2d80      	cmp	r5, #128	; 0x80
 8006a74:	68d9      	ldr	r1, [r3, #12]
 8006a76:	d1f8      	bne.n	8006a6a <_reclaim_reent+0x8a>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 f849 	bl	8006b10 <_free_r>
 8006a7e:	e7ba      	b.n	80069f6 <_reclaim_reent+0x16>
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f844 	bl	8006b10 <_free_r>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	e7ef      	b.n	8006a6c <_reclaim_reent+0x8c>
 8006a8c:	2500      	movs	r5, #0
 8006a8e:	e7ef      	b.n	8006a70 <_reclaim_reent+0x90>
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	bf00      	nop
 8006a94:	20000024 	.word	0x20000024

08006a98 <_sbrk_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d06      	ldr	r5, [pc, #24]	; (8006ab4 <_sbrk_r+0x1c>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	f7fa fb62 	bl	800116c <_sbrk>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_sbrk_r+0x1a>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_sbrk_r+0x1a>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20004248 	.word	0x20004248

08006ab8 <siprintf>:
 8006ab8:	b40e      	push	{r1, r2, r3}
 8006aba:	b500      	push	{lr}
 8006abc:	b09c      	sub	sp, #112	; 0x70
 8006abe:	ab1d      	add	r3, sp, #116	; 0x74
 8006ac0:	9002      	str	r0, [sp, #8]
 8006ac2:	9006      	str	r0, [sp, #24]
 8006ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ac8:	4809      	ldr	r0, [pc, #36]	; (8006af0 <siprintf+0x38>)
 8006aca:	9107      	str	r1, [sp, #28]
 8006acc:	9104      	str	r1, [sp, #16]
 8006ace:	4909      	ldr	r1, [pc, #36]	; (8006af4 <siprintf+0x3c>)
 8006ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad4:	9105      	str	r1, [sp, #20]
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	a902      	add	r1, sp, #8
 8006adc:	f000 f8c0 	bl	8006c60 <_svfiprintf_r>
 8006ae0:	9b02      	ldr	r3, [sp, #8]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	b01c      	add	sp, #112	; 0x70
 8006ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aec:	b003      	add	sp, #12
 8006aee:	4770      	bx	lr
 8006af0:	20000024 	.word	0x20000024
 8006af4:	ffff0208 	.word	0xffff0208

08006af8 <__malloc_lock>:
 8006af8:	4801      	ldr	r0, [pc, #4]	; (8006b00 <__malloc_lock+0x8>)
 8006afa:	f7ff beb7 	b.w	800686c <__retarget_lock_acquire_recursive>
 8006afe:	bf00      	nop
 8006b00:	2000423c 	.word	0x2000423c

08006b04 <__malloc_unlock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__malloc_unlock+0x8>)
 8006b06:	f7ff beb2 	b.w	800686e <__retarget_lock_release_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	2000423c 	.word	0x2000423c

08006b10 <_free_r>:
 8006b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b12:	2900      	cmp	r1, #0
 8006b14:	d044      	beq.n	8006ba0 <_free_r+0x90>
 8006b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b1a:	9001      	str	r0, [sp, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b22:	bfb8      	it	lt
 8006b24:	18e4      	addlt	r4, r4, r3
 8006b26:	f7ff ffe7 	bl	8006af8 <__malloc_lock>
 8006b2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ba4 <_free_r+0x94>)
 8006b2c:	9801      	ldr	r0, [sp, #4]
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	b933      	cbnz	r3, 8006b40 <_free_r+0x30>
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	6014      	str	r4, [r2, #0]
 8006b36:	b003      	add	sp, #12
 8006b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b3c:	f7ff bfe2 	b.w	8006b04 <__malloc_unlock>
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	d908      	bls.n	8006b56 <_free_r+0x46>
 8006b44:	6825      	ldr	r5, [r4, #0]
 8006b46:	1961      	adds	r1, r4, r5
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	bf01      	itttt	eq
 8006b4c:	6819      	ldreq	r1, [r3, #0]
 8006b4e:	685b      	ldreq	r3, [r3, #4]
 8006b50:	1949      	addeq	r1, r1, r5
 8006b52:	6021      	streq	r1, [r4, #0]
 8006b54:	e7ed      	b.n	8006b32 <_free_r+0x22>
 8006b56:	461a      	mov	r2, r3
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	b10b      	cbz	r3, 8006b60 <_free_r+0x50>
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d9fa      	bls.n	8006b56 <_free_r+0x46>
 8006b60:	6811      	ldr	r1, [r2, #0]
 8006b62:	1855      	adds	r5, r2, r1
 8006b64:	42a5      	cmp	r5, r4
 8006b66:	d10b      	bne.n	8006b80 <_free_r+0x70>
 8006b68:	6824      	ldr	r4, [r4, #0]
 8006b6a:	4421      	add	r1, r4
 8006b6c:	1854      	adds	r4, r2, r1
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	6011      	str	r1, [r2, #0]
 8006b72:	d1e0      	bne.n	8006b36 <_free_r+0x26>
 8006b74:	681c      	ldr	r4, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	6053      	str	r3, [r2, #4]
 8006b7a:	4421      	add	r1, r4
 8006b7c:	6011      	str	r1, [r2, #0]
 8006b7e:	e7da      	b.n	8006b36 <_free_r+0x26>
 8006b80:	d902      	bls.n	8006b88 <_free_r+0x78>
 8006b82:	230c      	movs	r3, #12
 8006b84:	6003      	str	r3, [r0, #0]
 8006b86:	e7d6      	b.n	8006b36 <_free_r+0x26>
 8006b88:	6825      	ldr	r5, [r4, #0]
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	bf04      	itt	eq
 8006b90:	6819      	ldreq	r1, [r3, #0]
 8006b92:	685b      	ldreq	r3, [r3, #4]
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	bf04      	itt	eq
 8006b98:	1949      	addeq	r1, r1, r5
 8006b9a:	6021      	streq	r1, [r4, #0]
 8006b9c:	6054      	str	r4, [r2, #4]
 8006b9e:	e7ca      	b.n	8006b36 <_free_r+0x26>
 8006ba0:	b003      	add	sp, #12
 8006ba2:	bd30      	pop	{r4, r5, pc}
 8006ba4:	20004240 	.word	0x20004240

08006ba8 <__ssputs_r>:
 8006ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	688e      	ldr	r6, [r1, #8]
 8006bae:	429e      	cmp	r6, r3
 8006bb0:	4682      	mov	sl, r0
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	4690      	mov	r8, r2
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	d838      	bhi.n	8006c2c <__ssputs_r+0x84>
 8006bba:	898a      	ldrh	r2, [r1, #12]
 8006bbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bc0:	d032      	beq.n	8006c28 <__ssputs_r+0x80>
 8006bc2:	6825      	ldr	r5, [r4, #0]
 8006bc4:	6909      	ldr	r1, [r1, #16]
 8006bc6:	eba5 0901 	sub.w	r9, r5, r1
 8006bca:	6965      	ldr	r5, [r4, #20]
 8006bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	444b      	add	r3, r9
 8006bd8:	106d      	asrs	r5, r5, #1
 8006bda:	429d      	cmp	r5, r3
 8006bdc:	bf38      	it	cc
 8006bde:	461d      	movcc	r5, r3
 8006be0:	0553      	lsls	r3, r2, #21
 8006be2:	d531      	bpl.n	8006c48 <__ssputs_r+0xa0>
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7ff fe79 	bl	80068dc <_malloc_r>
 8006bea:	4606      	mov	r6, r0
 8006bec:	b950      	cbnz	r0, 8006c04 <__ssputs_r+0x5c>
 8006bee:	230c      	movs	r3, #12
 8006bf0:	f8ca 3000 	str.w	r3, [sl]
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c04:	6921      	ldr	r1, [r4, #16]
 8006c06:	464a      	mov	r2, r9
 8006c08:	f7ff fe32 	bl	8006870 <memcpy>
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	6126      	str	r6, [r4, #16]
 8006c1a:	6165      	str	r5, [r4, #20]
 8006c1c:	444e      	add	r6, r9
 8006c1e:	eba5 0509 	sub.w	r5, r5, r9
 8006c22:	6026      	str	r6, [r4, #0]
 8006c24:	60a5      	str	r5, [r4, #8]
 8006c26:	463e      	mov	r6, r7
 8006c28:	42be      	cmp	r6, r7
 8006c2a:	d900      	bls.n	8006c2e <__ssputs_r+0x86>
 8006c2c:	463e      	mov	r6, r7
 8006c2e:	6820      	ldr	r0, [r4, #0]
 8006c30:	4632      	mov	r2, r6
 8006c32:	4641      	mov	r1, r8
 8006c34:	f000 faa8 	bl	8007188 <memmove>
 8006c38:	68a3      	ldr	r3, [r4, #8]
 8006c3a:	1b9b      	subs	r3, r3, r6
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	4433      	add	r3, r6
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	2000      	movs	r0, #0
 8006c46:	e7db      	b.n	8006c00 <__ssputs_r+0x58>
 8006c48:	462a      	mov	r2, r5
 8006c4a:	f000 fab7 	bl	80071bc <_realloc_r>
 8006c4e:	4606      	mov	r6, r0
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d1e1      	bne.n	8006c18 <__ssputs_r+0x70>
 8006c54:	6921      	ldr	r1, [r4, #16]
 8006c56:	4650      	mov	r0, sl
 8006c58:	f7ff ff5a 	bl	8006b10 <_free_r>
 8006c5c:	e7c7      	b.n	8006bee <__ssputs_r+0x46>
	...

08006c60 <_svfiprintf_r>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	4698      	mov	r8, r3
 8006c66:	898b      	ldrh	r3, [r1, #12]
 8006c68:	061b      	lsls	r3, r3, #24
 8006c6a:	b09d      	sub	sp, #116	; 0x74
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	460d      	mov	r5, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	d50e      	bpl.n	8006c92 <_svfiprintf_r+0x32>
 8006c74:	690b      	ldr	r3, [r1, #16]
 8006c76:	b963      	cbnz	r3, 8006c92 <_svfiprintf_r+0x32>
 8006c78:	2140      	movs	r1, #64	; 0x40
 8006c7a:	f7ff fe2f 	bl	80068dc <_malloc_r>
 8006c7e:	6028      	str	r0, [r5, #0]
 8006c80:	6128      	str	r0, [r5, #16]
 8006c82:	b920      	cbnz	r0, 8006c8e <_svfiprintf_r+0x2e>
 8006c84:	230c      	movs	r3, #12
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	e0d1      	b.n	8006e32 <_svfiprintf_r+0x1d2>
 8006c8e:	2340      	movs	r3, #64	; 0x40
 8006c90:	616b      	str	r3, [r5, #20]
 8006c92:	2300      	movs	r3, #0
 8006c94:	9309      	str	r3, [sp, #36]	; 0x24
 8006c96:	2320      	movs	r3, #32
 8006c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca0:	2330      	movs	r3, #48	; 0x30
 8006ca2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e4c <_svfiprintf_r+0x1ec>
 8006ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006caa:	f04f 0901 	mov.w	r9, #1
 8006cae:	4623      	mov	r3, r4
 8006cb0:	469a      	mov	sl, r3
 8006cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb6:	b10a      	cbz	r2, 8006cbc <_svfiprintf_r+0x5c>
 8006cb8:	2a25      	cmp	r2, #37	; 0x25
 8006cba:	d1f9      	bne.n	8006cb0 <_svfiprintf_r+0x50>
 8006cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc0:	d00b      	beq.n	8006cda <_svfiprintf_r+0x7a>
 8006cc2:	465b      	mov	r3, fp
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7ff ff6d 	bl	8006ba8 <__ssputs_r>
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f000 80aa 	beq.w	8006e28 <_svfiprintf_r+0x1c8>
 8006cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd6:	445a      	add	r2, fp
 8006cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8006cda:	f89a 3000 	ldrb.w	r3, [sl]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80a2 	beq.w	8006e28 <_svfiprintf_r+0x1c8>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cee:	f10a 0a01 	add.w	sl, sl, #1
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	9307      	str	r3, [sp, #28]
 8006cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8006cfc:	4654      	mov	r4, sl
 8006cfe:	2205      	movs	r2, #5
 8006d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d04:	4851      	ldr	r0, [pc, #324]	; (8006e4c <_svfiprintf_r+0x1ec>)
 8006d06:	f7f9 fa6b 	bl	80001e0 <memchr>
 8006d0a:	9a04      	ldr	r2, [sp, #16]
 8006d0c:	b9d8      	cbnz	r0, 8006d46 <_svfiprintf_r+0xe6>
 8006d0e:	06d0      	lsls	r0, r2, #27
 8006d10:	bf44      	itt	mi
 8006d12:	2320      	movmi	r3, #32
 8006d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d18:	0711      	lsls	r1, r2, #28
 8006d1a:	bf44      	itt	mi
 8006d1c:	232b      	movmi	r3, #43	; 0x2b
 8006d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d22:	f89a 3000 	ldrb.w	r3, [sl]
 8006d26:	2b2a      	cmp	r3, #42	; 0x2a
 8006d28:	d015      	beq.n	8006d56 <_svfiprintf_r+0xf6>
 8006d2a:	9a07      	ldr	r2, [sp, #28]
 8006d2c:	4654      	mov	r4, sl
 8006d2e:	2000      	movs	r0, #0
 8006d30:	f04f 0c0a 	mov.w	ip, #10
 8006d34:	4621      	mov	r1, r4
 8006d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d3a:	3b30      	subs	r3, #48	; 0x30
 8006d3c:	2b09      	cmp	r3, #9
 8006d3e:	d94e      	bls.n	8006dde <_svfiprintf_r+0x17e>
 8006d40:	b1b0      	cbz	r0, 8006d70 <_svfiprintf_r+0x110>
 8006d42:	9207      	str	r2, [sp, #28]
 8006d44:	e014      	b.n	8006d70 <_svfiprintf_r+0x110>
 8006d46:	eba0 0308 	sub.w	r3, r0, r8
 8006d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	46a2      	mov	sl, r4
 8006d54:	e7d2      	b.n	8006cfc <_svfiprintf_r+0x9c>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	1d19      	adds	r1, r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	9103      	str	r1, [sp, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfbb      	ittet	lt
 8006d62:	425b      	neglt	r3, r3
 8006d64:	f042 0202 	orrlt.w	r2, r2, #2
 8006d68:	9307      	strge	r3, [sp, #28]
 8006d6a:	9307      	strlt	r3, [sp, #28]
 8006d6c:	bfb8      	it	lt
 8006d6e:	9204      	strlt	r2, [sp, #16]
 8006d70:	7823      	ldrb	r3, [r4, #0]
 8006d72:	2b2e      	cmp	r3, #46	; 0x2e
 8006d74:	d10c      	bne.n	8006d90 <_svfiprintf_r+0x130>
 8006d76:	7863      	ldrb	r3, [r4, #1]
 8006d78:	2b2a      	cmp	r3, #42	; 0x2a
 8006d7a:	d135      	bne.n	8006de8 <_svfiprintf_r+0x188>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	1d1a      	adds	r2, r3, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	9203      	str	r2, [sp, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bfb8      	it	lt
 8006d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d8c:	3402      	adds	r4, #2
 8006d8e:	9305      	str	r3, [sp, #20]
 8006d90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e5c <_svfiprintf_r+0x1fc>
 8006d94:	7821      	ldrb	r1, [r4, #0]
 8006d96:	2203      	movs	r2, #3
 8006d98:	4650      	mov	r0, sl
 8006d9a:	f7f9 fa21 	bl	80001e0 <memchr>
 8006d9e:	b140      	cbz	r0, 8006db2 <_svfiprintf_r+0x152>
 8006da0:	2340      	movs	r3, #64	; 0x40
 8006da2:	eba0 000a 	sub.w	r0, r0, sl
 8006da6:	fa03 f000 	lsl.w	r0, r3, r0
 8006daa:	9b04      	ldr	r3, [sp, #16]
 8006dac:	4303      	orrs	r3, r0
 8006dae:	3401      	adds	r4, #1
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db6:	4826      	ldr	r0, [pc, #152]	; (8006e50 <_svfiprintf_r+0x1f0>)
 8006db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dbc:	2206      	movs	r2, #6
 8006dbe:	f7f9 fa0f 	bl	80001e0 <memchr>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d038      	beq.n	8006e38 <_svfiprintf_r+0x1d8>
 8006dc6:	4b23      	ldr	r3, [pc, #140]	; (8006e54 <_svfiprintf_r+0x1f4>)
 8006dc8:	bb1b      	cbnz	r3, 8006e12 <_svfiprintf_r+0x1b2>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	3307      	adds	r3, #7
 8006dce:	f023 0307 	bic.w	r3, r3, #7
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	9303      	str	r3, [sp, #12]
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	4433      	add	r3, r6
 8006dda:	9309      	str	r3, [sp, #36]	; 0x24
 8006ddc:	e767      	b.n	8006cae <_svfiprintf_r+0x4e>
 8006dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de2:	460c      	mov	r4, r1
 8006de4:	2001      	movs	r0, #1
 8006de6:	e7a5      	b.n	8006d34 <_svfiprintf_r+0xd4>
 8006de8:	2300      	movs	r3, #0
 8006dea:	3401      	adds	r4, #1
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	4619      	mov	r1, r3
 8006df0:	f04f 0c0a 	mov.w	ip, #10
 8006df4:	4620      	mov	r0, r4
 8006df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dfa:	3a30      	subs	r2, #48	; 0x30
 8006dfc:	2a09      	cmp	r2, #9
 8006dfe:	d903      	bls.n	8006e08 <_svfiprintf_r+0x1a8>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0c5      	beq.n	8006d90 <_svfiprintf_r+0x130>
 8006e04:	9105      	str	r1, [sp, #20]
 8006e06:	e7c3      	b.n	8006d90 <_svfiprintf_r+0x130>
 8006e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e7f0      	b.n	8006df4 <_svfiprintf_r+0x194>
 8006e12:	ab03      	add	r3, sp, #12
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	462a      	mov	r2, r5
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <_svfiprintf_r+0x1f8>)
 8006e1a:	a904      	add	r1, sp, #16
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	f3af 8000 	nop.w
 8006e22:	1c42      	adds	r2, r0, #1
 8006e24:	4606      	mov	r6, r0
 8006e26:	d1d6      	bne.n	8006dd6 <_svfiprintf_r+0x176>
 8006e28:	89ab      	ldrh	r3, [r5, #12]
 8006e2a:	065b      	lsls	r3, r3, #25
 8006e2c:	f53f af2c 	bmi.w	8006c88 <_svfiprintf_r+0x28>
 8006e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e32:	b01d      	add	sp, #116	; 0x74
 8006e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e38:	ab03      	add	r3, sp, #12
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <_svfiprintf_r+0x1f8>)
 8006e40:	a904      	add	r1, sp, #16
 8006e42:	4638      	mov	r0, r7
 8006e44:	f000 f87a 	bl	8006f3c <_printf_i>
 8006e48:	e7eb      	b.n	8006e22 <_svfiprintf_r+0x1c2>
 8006e4a:	bf00      	nop
 8006e4c:	0800730c 	.word	0x0800730c
 8006e50:	08007316 	.word	0x08007316
 8006e54:	00000000 	.word	0x00000000
 8006e58:	08006ba9 	.word	0x08006ba9
 8006e5c:	08007312 	.word	0x08007312

08006e60 <_printf_common>:
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	4616      	mov	r6, r2
 8006e66:	4699      	mov	r9, r3
 8006e68:	688a      	ldr	r2, [r1, #8]
 8006e6a:	690b      	ldr	r3, [r1, #16]
 8006e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e70:	4293      	cmp	r3, r2
 8006e72:	bfb8      	it	lt
 8006e74:	4613      	movlt	r3, r2
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	b10a      	cbz	r2, 8006e86 <_printf_common+0x26>
 8006e82:	3301      	adds	r3, #1
 8006e84:	6033      	str	r3, [r6, #0]
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	0699      	lsls	r1, r3, #26
 8006e8a:	bf42      	ittt	mi
 8006e8c:	6833      	ldrmi	r3, [r6, #0]
 8006e8e:	3302      	addmi	r3, #2
 8006e90:	6033      	strmi	r3, [r6, #0]
 8006e92:	6825      	ldr	r5, [r4, #0]
 8006e94:	f015 0506 	ands.w	r5, r5, #6
 8006e98:	d106      	bne.n	8006ea8 <_printf_common+0x48>
 8006e9a:	f104 0a19 	add.w	sl, r4, #25
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	6832      	ldr	r2, [r6, #0]
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	42ab      	cmp	r3, r5
 8006ea6:	dc26      	bgt.n	8006ef6 <_printf_common+0x96>
 8006ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eac:	1e13      	subs	r3, r2, #0
 8006eae:	6822      	ldr	r2, [r4, #0]
 8006eb0:	bf18      	it	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	0692      	lsls	r2, r2, #26
 8006eb6:	d42b      	bmi.n	8006f10 <_printf_common+0xb0>
 8006eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	47c0      	blx	r8
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	d01e      	beq.n	8006f04 <_printf_common+0xa4>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	68e5      	ldr	r5, [r4, #12]
 8006eca:	6832      	ldr	r2, [r6, #0]
 8006ecc:	f003 0306 	and.w	r3, r3, #6
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	bf08      	it	eq
 8006ed4:	1aad      	subeq	r5, r5, r2
 8006ed6:	68a3      	ldr	r3, [r4, #8]
 8006ed8:	6922      	ldr	r2, [r4, #16]
 8006eda:	bf0c      	ite	eq
 8006edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee0:	2500      	movne	r5, #0
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	bfc4      	itt	gt
 8006ee6:	1a9b      	subgt	r3, r3, r2
 8006ee8:	18ed      	addgt	r5, r5, r3
 8006eea:	2600      	movs	r6, #0
 8006eec:	341a      	adds	r4, #26
 8006eee:	42b5      	cmp	r5, r6
 8006ef0:	d11a      	bne.n	8006f28 <_printf_common+0xc8>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	e008      	b.n	8006f08 <_printf_common+0xa8>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4652      	mov	r2, sl
 8006efa:	4649      	mov	r1, r9
 8006efc:	4638      	mov	r0, r7
 8006efe:	47c0      	blx	r8
 8006f00:	3001      	adds	r0, #1
 8006f02:	d103      	bne.n	8006f0c <_printf_common+0xac>
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	e7c6      	b.n	8006e9e <_printf_common+0x3e>
 8006f10:	18e1      	adds	r1, r4, r3
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	2030      	movs	r0, #48	; 0x30
 8006f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f1a:	4422      	add	r2, r4
 8006f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f24:	3302      	adds	r3, #2
 8006f26:	e7c7      	b.n	8006eb8 <_printf_common+0x58>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	4638      	mov	r0, r7
 8006f30:	47c0      	blx	r8
 8006f32:	3001      	adds	r0, #1
 8006f34:	d0e6      	beq.n	8006f04 <_printf_common+0xa4>
 8006f36:	3601      	adds	r6, #1
 8006f38:	e7d9      	b.n	8006eee <_printf_common+0x8e>
	...

08006f3c <_printf_i>:
 8006f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	7e0f      	ldrb	r7, [r1, #24]
 8006f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f44:	2f78      	cmp	r7, #120	; 0x78
 8006f46:	4691      	mov	r9, r2
 8006f48:	4680      	mov	r8, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	469a      	mov	sl, r3
 8006f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f52:	d807      	bhi.n	8006f64 <_printf_i+0x28>
 8006f54:	2f62      	cmp	r7, #98	; 0x62
 8006f56:	d80a      	bhi.n	8006f6e <_printf_i+0x32>
 8006f58:	2f00      	cmp	r7, #0
 8006f5a:	f000 80d8 	beq.w	800710e <_printf_i+0x1d2>
 8006f5e:	2f58      	cmp	r7, #88	; 0x58
 8006f60:	f000 80a3 	beq.w	80070aa <_printf_i+0x16e>
 8006f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f6c:	e03a      	b.n	8006fe4 <_printf_i+0xa8>
 8006f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f72:	2b15      	cmp	r3, #21
 8006f74:	d8f6      	bhi.n	8006f64 <_printf_i+0x28>
 8006f76:	a101      	add	r1, pc, #4	; (adr r1, 8006f7c <_printf_i+0x40>)
 8006f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f7c:	08006fd5 	.word	0x08006fd5
 8006f80:	08006fe9 	.word	0x08006fe9
 8006f84:	08006f65 	.word	0x08006f65
 8006f88:	08006f65 	.word	0x08006f65
 8006f8c:	08006f65 	.word	0x08006f65
 8006f90:	08006f65 	.word	0x08006f65
 8006f94:	08006fe9 	.word	0x08006fe9
 8006f98:	08006f65 	.word	0x08006f65
 8006f9c:	08006f65 	.word	0x08006f65
 8006fa0:	08006f65 	.word	0x08006f65
 8006fa4:	08006f65 	.word	0x08006f65
 8006fa8:	080070f5 	.word	0x080070f5
 8006fac:	08007019 	.word	0x08007019
 8006fb0:	080070d7 	.word	0x080070d7
 8006fb4:	08006f65 	.word	0x08006f65
 8006fb8:	08006f65 	.word	0x08006f65
 8006fbc:	08007117 	.word	0x08007117
 8006fc0:	08006f65 	.word	0x08006f65
 8006fc4:	08007019 	.word	0x08007019
 8006fc8:	08006f65 	.word	0x08006f65
 8006fcc:	08006f65 	.word	0x08006f65
 8006fd0:	080070df 	.word	0x080070df
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	1d1a      	adds	r2, r3, #4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	602a      	str	r2, [r5, #0]
 8006fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0a3      	b.n	8007130 <_printf_i+0x1f4>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	6829      	ldr	r1, [r5, #0]
 8006fec:	0606      	lsls	r6, r0, #24
 8006fee:	f101 0304 	add.w	r3, r1, #4
 8006ff2:	d50a      	bpl.n	800700a <_printf_i+0xce>
 8006ff4:	680e      	ldr	r6, [r1, #0]
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	2e00      	cmp	r6, #0
 8006ffa:	da03      	bge.n	8007004 <_printf_i+0xc8>
 8006ffc:	232d      	movs	r3, #45	; 0x2d
 8006ffe:	4276      	negs	r6, r6
 8007000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007004:	485e      	ldr	r0, [pc, #376]	; (8007180 <_printf_i+0x244>)
 8007006:	230a      	movs	r3, #10
 8007008:	e019      	b.n	800703e <_printf_i+0x102>
 800700a:	680e      	ldr	r6, [r1, #0]
 800700c:	602b      	str	r3, [r5, #0]
 800700e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007012:	bf18      	it	ne
 8007014:	b236      	sxthne	r6, r6
 8007016:	e7ef      	b.n	8006ff8 <_printf_i+0xbc>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	6820      	ldr	r0, [r4, #0]
 800701c:	1d19      	adds	r1, r3, #4
 800701e:	6029      	str	r1, [r5, #0]
 8007020:	0601      	lsls	r1, r0, #24
 8007022:	d501      	bpl.n	8007028 <_printf_i+0xec>
 8007024:	681e      	ldr	r6, [r3, #0]
 8007026:	e002      	b.n	800702e <_printf_i+0xf2>
 8007028:	0646      	lsls	r6, r0, #25
 800702a:	d5fb      	bpl.n	8007024 <_printf_i+0xe8>
 800702c:	881e      	ldrh	r6, [r3, #0]
 800702e:	4854      	ldr	r0, [pc, #336]	; (8007180 <_printf_i+0x244>)
 8007030:	2f6f      	cmp	r7, #111	; 0x6f
 8007032:	bf0c      	ite	eq
 8007034:	2308      	moveq	r3, #8
 8007036:	230a      	movne	r3, #10
 8007038:	2100      	movs	r1, #0
 800703a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800703e:	6865      	ldr	r5, [r4, #4]
 8007040:	60a5      	str	r5, [r4, #8]
 8007042:	2d00      	cmp	r5, #0
 8007044:	bfa2      	ittt	ge
 8007046:	6821      	ldrge	r1, [r4, #0]
 8007048:	f021 0104 	bicge.w	r1, r1, #4
 800704c:	6021      	strge	r1, [r4, #0]
 800704e:	b90e      	cbnz	r6, 8007054 <_printf_i+0x118>
 8007050:	2d00      	cmp	r5, #0
 8007052:	d04d      	beq.n	80070f0 <_printf_i+0x1b4>
 8007054:	4615      	mov	r5, r2
 8007056:	fbb6 f1f3 	udiv	r1, r6, r3
 800705a:	fb03 6711 	mls	r7, r3, r1, r6
 800705e:	5dc7      	ldrb	r7, [r0, r7]
 8007060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007064:	4637      	mov	r7, r6
 8007066:	42bb      	cmp	r3, r7
 8007068:	460e      	mov	r6, r1
 800706a:	d9f4      	bls.n	8007056 <_printf_i+0x11a>
 800706c:	2b08      	cmp	r3, #8
 800706e:	d10b      	bne.n	8007088 <_printf_i+0x14c>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	07de      	lsls	r6, r3, #31
 8007074:	d508      	bpl.n	8007088 <_printf_i+0x14c>
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	6861      	ldr	r1, [r4, #4]
 800707a:	4299      	cmp	r1, r3
 800707c:	bfde      	ittt	le
 800707e:	2330      	movle	r3, #48	; 0x30
 8007080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007088:	1b52      	subs	r2, r2, r5
 800708a:	6122      	str	r2, [r4, #16]
 800708c:	f8cd a000 	str.w	sl, [sp]
 8007090:	464b      	mov	r3, r9
 8007092:	aa03      	add	r2, sp, #12
 8007094:	4621      	mov	r1, r4
 8007096:	4640      	mov	r0, r8
 8007098:	f7ff fee2 	bl	8006e60 <_printf_common>
 800709c:	3001      	adds	r0, #1
 800709e:	d14c      	bne.n	800713a <_printf_i+0x1fe>
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	b004      	add	sp, #16
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	4835      	ldr	r0, [pc, #212]	; (8007180 <_printf_i+0x244>)
 80070ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070b0:	6829      	ldr	r1, [r5, #0]
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80070b8:	6029      	str	r1, [r5, #0]
 80070ba:	061d      	lsls	r5, r3, #24
 80070bc:	d514      	bpl.n	80070e8 <_printf_i+0x1ac>
 80070be:	07df      	lsls	r7, r3, #31
 80070c0:	bf44      	itt	mi
 80070c2:	f043 0320 	orrmi.w	r3, r3, #32
 80070c6:	6023      	strmi	r3, [r4, #0]
 80070c8:	b91e      	cbnz	r6, 80070d2 <_printf_i+0x196>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	f023 0320 	bic.w	r3, r3, #32
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	2310      	movs	r3, #16
 80070d4:	e7b0      	b.n	8007038 <_printf_i+0xfc>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	f043 0320 	orr.w	r3, r3, #32
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	2378      	movs	r3, #120	; 0x78
 80070e0:	4828      	ldr	r0, [pc, #160]	; (8007184 <_printf_i+0x248>)
 80070e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070e6:	e7e3      	b.n	80070b0 <_printf_i+0x174>
 80070e8:	0659      	lsls	r1, r3, #25
 80070ea:	bf48      	it	mi
 80070ec:	b2b6      	uxthmi	r6, r6
 80070ee:	e7e6      	b.n	80070be <_printf_i+0x182>
 80070f0:	4615      	mov	r5, r2
 80070f2:	e7bb      	b.n	800706c <_printf_i+0x130>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	6826      	ldr	r6, [r4, #0]
 80070f8:	6961      	ldr	r1, [r4, #20]
 80070fa:	1d18      	adds	r0, r3, #4
 80070fc:	6028      	str	r0, [r5, #0]
 80070fe:	0635      	lsls	r5, r6, #24
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	d501      	bpl.n	8007108 <_printf_i+0x1cc>
 8007104:	6019      	str	r1, [r3, #0]
 8007106:	e002      	b.n	800710e <_printf_i+0x1d2>
 8007108:	0670      	lsls	r0, r6, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0x1c8>
 800710c:	8019      	strh	r1, [r3, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	6123      	str	r3, [r4, #16]
 8007112:	4615      	mov	r5, r2
 8007114:	e7ba      	b.n	800708c <_printf_i+0x150>
 8007116:	682b      	ldr	r3, [r5, #0]
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	602a      	str	r2, [r5, #0]
 800711c:	681d      	ldr	r5, [r3, #0]
 800711e:	6862      	ldr	r2, [r4, #4]
 8007120:	2100      	movs	r1, #0
 8007122:	4628      	mov	r0, r5
 8007124:	f7f9 f85c 	bl	80001e0 <memchr>
 8007128:	b108      	cbz	r0, 800712e <_printf_i+0x1f2>
 800712a:	1b40      	subs	r0, r0, r5
 800712c:	6060      	str	r0, [r4, #4]
 800712e:	6863      	ldr	r3, [r4, #4]
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	2300      	movs	r3, #0
 8007134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007138:	e7a8      	b.n	800708c <_printf_i+0x150>
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	462a      	mov	r2, r5
 800713e:	4649      	mov	r1, r9
 8007140:	4640      	mov	r0, r8
 8007142:	47d0      	blx	sl
 8007144:	3001      	adds	r0, #1
 8007146:	d0ab      	beq.n	80070a0 <_printf_i+0x164>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	079b      	lsls	r3, r3, #30
 800714c:	d413      	bmi.n	8007176 <_printf_i+0x23a>
 800714e:	68e0      	ldr	r0, [r4, #12]
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	4298      	cmp	r0, r3
 8007154:	bfb8      	it	lt
 8007156:	4618      	movlt	r0, r3
 8007158:	e7a4      	b.n	80070a4 <_printf_i+0x168>
 800715a:	2301      	movs	r3, #1
 800715c:	4632      	mov	r2, r6
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	47d0      	blx	sl
 8007164:	3001      	adds	r0, #1
 8007166:	d09b      	beq.n	80070a0 <_printf_i+0x164>
 8007168:	3501      	adds	r5, #1
 800716a:	68e3      	ldr	r3, [r4, #12]
 800716c:	9903      	ldr	r1, [sp, #12]
 800716e:	1a5b      	subs	r3, r3, r1
 8007170:	42ab      	cmp	r3, r5
 8007172:	dcf2      	bgt.n	800715a <_printf_i+0x21e>
 8007174:	e7eb      	b.n	800714e <_printf_i+0x212>
 8007176:	2500      	movs	r5, #0
 8007178:	f104 0619 	add.w	r6, r4, #25
 800717c:	e7f5      	b.n	800716a <_printf_i+0x22e>
 800717e:	bf00      	nop
 8007180:	0800731d 	.word	0x0800731d
 8007184:	0800732e 	.word	0x0800732e

08007188 <memmove>:
 8007188:	4288      	cmp	r0, r1
 800718a:	b510      	push	{r4, lr}
 800718c:	eb01 0402 	add.w	r4, r1, r2
 8007190:	d902      	bls.n	8007198 <memmove+0x10>
 8007192:	4284      	cmp	r4, r0
 8007194:	4623      	mov	r3, r4
 8007196:	d807      	bhi.n	80071a8 <memmove+0x20>
 8007198:	1e43      	subs	r3, r0, #1
 800719a:	42a1      	cmp	r1, r4
 800719c:	d008      	beq.n	80071b0 <memmove+0x28>
 800719e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a6:	e7f8      	b.n	800719a <memmove+0x12>
 80071a8:	4402      	add	r2, r0
 80071aa:	4601      	mov	r1, r0
 80071ac:	428a      	cmp	r2, r1
 80071ae:	d100      	bne.n	80071b2 <memmove+0x2a>
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ba:	e7f7      	b.n	80071ac <memmove+0x24>

080071bc <_realloc_r>:
 80071bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c0:	4680      	mov	r8, r0
 80071c2:	4614      	mov	r4, r2
 80071c4:	460e      	mov	r6, r1
 80071c6:	b921      	cbnz	r1, 80071d2 <_realloc_r+0x16>
 80071c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071cc:	4611      	mov	r1, r2
 80071ce:	f7ff bb85 	b.w	80068dc <_malloc_r>
 80071d2:	b92a      	cbnz	r2, 80071e0 <_realloc_r+0x24>
 80071d4:	f7ff fc9c 	bl	8006b10 <_free_r>
 80071d8:	4625      	mov	r5, r4
 80071da:	4628      	mov	r0, r5
 80071dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e0:	f000 f81b 	bl	800721a <_malloc_usable_size_r>
 80071e4:	4284      	cmp	r4, r0
 80071e6:	4607      	mov	r7, r0
 80071e8:	d802      	bhi.n	80071f0 <_realloc_r+0x34>
 80071ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071ee:	d812      	bhi.n	8007216 <_realloc_r+0x5a>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4640      	mov	r0, r8
 80071f4:	f7ff fb72 	bl	80068dc <_malloc_r>
 80071f8:	4605      	mov	r5, r0
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d0ed      	beq.n	80071da <_realloc_r+0x1e>
 80071fe:	42bc      	cmp	r4, r7
 8007200:	4622      	mov	r2, r4
 8007202:	4631      	mov	r1, r6
 8007204:	bf28      	it	cs
 8007206:	463a      	movcs	r2, r7
 8007208:	f7ff fb32 	bl	8006870 <memcpy>
 800720c:	4631      	mov	r1, r6
 800720e:	4640      	mov	r0, r8
 8007210:	f7ff fc7e 	bl	8006b10 <_free_r>
 8007214:	e7e1      	b.n	80071da <_realloc_r+0x1e>
 8007216:	4635      	mov	r5, r6
 8007218:	e7df      	b.n	80071da <_realloc_r+0x1e>

0800721a <_malloc_usable_size_r>:
 800721a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800721e:	1f18      	subs	r0, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	bfbc      	itt	lt
 8007224:	580b      	ldrlt	r3, [r1, r0]
 8007226:	18c0      	addlt	r0, r0, r3
 8007228:	4770      	bx	lr
	...

0800722c <_init>:
 800722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722e:	bf00      	nop
 8007230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007232:	bc08      	pop	{r3}
 8007234:	469e      	mov	lr, r3
 8007236:	4770      	bx	lr

08007238 <_fini>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr
