
FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006258  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006500  08006500  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006508  08006508  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000417c  20000074  08006584  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041f0  08006584  000241f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e32  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec1  00000000  00000000  00035ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00038d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00039f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cd6  00000000  00000000  0003afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c43  00000000  00000000  00052cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095a61  00000000  00000000  000688f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe35a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  000fe3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063e0 	.word	0x080063e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080063e0 	.word	0x080063e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fce3 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f851 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f955 	bl	8000884 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f929 	bl	8000830 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005de:	f000 f8b7 	bl	8000750 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Timer que captura el ECHO del sensor
 80005e2:	2100      	movs	r1, #0
 80005e4:	481c      	ldr	r0, [pc, #112]	; (8000658 <main+0x90>)
 80005e6:	f001 fda1 	bl	800212c <HAL_TIM_IC_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  semaforo1=xSemaphoreCreateBinary();
 80005ea:	2203      	movs	r2, #3
 80005ec:	2100      	movs	r1, #0
 80005ee:	2001      	movs	r0, #1
 80005f0:	f003 f9ae 	bl	8003950 <xQueueGenericCreate>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a19      	ldr	r2, [pc, #100]	; (800065c <main+0x94>)
 80005f8:	6013      	str	r3, [r2, #0]


  xSemaphoreGive(semaforo1);
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <main+0x94>)
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	f003 f9fe 	bl	8003a04 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <main+0x98>)
 800060a:	1d3c      	adds	r4, r7, #4
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f82d 	bl	800367e <osThreadCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <main+0x9c>)
 8000628:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((void*) TrigSensor, "primera tarea", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2301      	movs	r3, #1
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	490c      	ldr	r1, [pc, #48]	; (8000668 <main+0xa0>)
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <main+0xa4>)
 800063a:	f003 fdda 	bl	80041f2 <xTaskCreate>
  xTaskCreate((void*) FiltroDistancia, "segunda tarea", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <main+0xa8>)
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0xac>)
 800064e:	f003 fdd0 	bl	80041f2 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000652:	f003 f80d 	bl	8003670 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0x8e>
 8000658:	20000344 	.word	0x20000344
 800065c:	200003d4 	.word	0x200003d4
 8000660:	08006424 	.word	0x08006424
 8000664:	200003d0 	.word	0x200003d0
 8000668:	08006404 	.word	0x08006404
 800066c:	08000a81 	.word	0x08000a81
 8000670:	08006414 	.word	0x08006414
 8000674:	08000ab1 	.word	0x08000ab1

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 f9da 	bl	8005a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <SystemClock_Config+0xd0>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd4>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f000 ff3c 	bl	8001580 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 fa7f 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f99e 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073a:	f000 fa69 	bl	8000c10 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_TIM2_Init+0xdc>)
 800077c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000780:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_TIM2_Init+0xdc>)
 8000784:	2253      	movs	r2, #83	; 0x53
 8000786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_TIM2_Init+0xdc>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800078e:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_TIM2_Init+0xdc>)
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <MX_TIM2_Init+0xdc>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_TIM2_Init+0xdc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a2:	4822      	ldr	r0, [pc, #136]	; (800082c <MX_TIM2_Init+0xdc>)
 80007a4:	f001 fbb6 	bl	8001f14 <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007ae:	f000 fa2f 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	4619      	mov	r1, r3
 80007be:	481b      	ldr	r0, [pc, #108]	; (800082c <MX_TIM2_Init+0xdc>)
 80007c0:	f001 ff72 	bl	80026a8 <HAL_TIM_ConfigClockSource>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007ca:	f000 fa21 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007ce:	4817      	ldr	r0, [pc, #92]	; (800082c <MX_TIM2_Init+0xdc>)
 80007d0:	f001 fc52 	bl	8002078 <HAL_TIM_IC_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007da:	f000 fa19 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <MX_TIM2_Init+0xdc>)
 80007ee:	f002 fae3 	bl	8002db8 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007f8:	f000 fa0a 	bl	8000c10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000800:	2301      	movs	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_TIM2_Init+0xdc>)
 8000814:	f001 feac 	bl	8002570 <HAL_TIM_IC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800081e:	f000 f9f7 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000344 	.word	0x20000344

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f002 fb28 	bl	8002ebc <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f9cd 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000038c 	.word	0x2000038c
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a30      	ldr	r2, [pc, #192]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a29      	ldr	r2, [pc, #164]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a22      	ldr	r2, [pc, #136]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <MX_GPIO_Init+0xe0>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_GPIO_Init+0xe0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2121      	movs	r1, #33	; 0x21
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <MX_GPIO_Init+0xe4>)
 8000910:	f000 fdea 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4810      	ldr	r0, [pc, #64]	; (800096c <MX_GPIO_Init+0xe8>)
 800092c:	f000 fc58 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|LD2_Pin;
 8000930:	2321      	movs	r3, #33	; 0x21
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <MX_GPIO_Init+0xe4>)
 8000948:	f000 fc4a 	bl	80011e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2105      	movs	r1, #5
 8000950:	2028      	movs	r0, #40	; 0x28
 8000952:	f000 fc1b 	bl	800118c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000956:	2028      	movs	r0, #40	; 0x28
 8000958:	f000 fc34 	bl	80011c4 <HAL_NVIC_EnableIRQ>

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020800 	.word	0x40020800

08000970 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800097a:	2120      	movs	r1, #32
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <HAL_GPIO_EXTI_Callback+0x1c>)
 800097e:	f000 fdcc 	bl	800151a <HAL_GPIO_TogglePin>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_TIM_IC_CaptureCallback>:
int velocidadSonido=343;

uint32_t uartBufferLen=0;
char uart_buf [50];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

	if(flancoAscendenteCapturado==0){
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d11b      	bne.n	80009d8 <HAL_TIM_IC_CaptureCallback+0x48>
		valorInicial=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f001 ff48 	bl	8002838 <HAL_TIM_ReadCapturedValue>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80009ae:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=1;
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6a1a      	ldr	r2, [r3, #32]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 020a 	bic.w	r2, r2, #10
 80009c4:	621a      	str	r2, [r3, #32]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6a1a      	ldr	r2, [r3, #32]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f042 0202 	orr.w	r2, r2, #2
 80009d4:	621a      	str	r2, [r3, #32]
		else if (valorFinal <= valorInicial)
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorFinal+valorInicial;
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);

	}
}
 80009d6:	e042      	b.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xce>
	else if(flancoAscendenteCapturado==1){
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d13e      	bne.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xce>
		valorFinal=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009e0:	2100      	movs	r1, #0
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f001 ff28 	bl	8002838 <HAL_TIM_ReadCapturedValue>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80009ee:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=0;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6a1a      	ldr	r2, [r3, #32]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 020a 	bic.w	r2, r2, #10
 8000a04:	621a      	str	r2, [r3, #32]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6a12      	ldr	r2, [r2, #32]
 8000a10:	621a      	str	r2, [r3, #32]
		if(valorFinal>valorInicial)
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dd07      	ble.n	8000a2e <HAL_TIM_IC_CaptureCallback+0x9e>
			pulso=valorFinal-valorInicial;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e011      	b.n	8000a52 <HAL_TIM_IC_CaptureCallback+0xc2>
		else if (valorFinal <= valorInicial)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dc0b      	bgt.n	8000a52 <HAL_TIM_IC_CaptureCallback+0xc2>
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorFinal+valorInicial;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a50:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2101      	movs	r1, #1
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 f8d1 	bl	8003c00 <xQueueGiveFromISR>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200003d8 	.word	0x200003d8
 8000a6c:	200003dc 	.word	0x200003dc
 8000a70:	200003e0 	.word	0x200003e0
 8000a74:	200003e4 	.word	0x200003e4
 8000a78:	20000344 	.word	0x20000344
 8000a7c:	200003d4 	.word	0x200003d4

08000a80 <TrigSensor>:


void TrigSensor(void const * argument)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <TrigSensor+0x2c>)
 8000a8e:	f000 fd2b 	bl	80014e8 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f003 fcfa 	bl	800448c <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <TrigSensor+0x2c>)
 8000a9e:	f000 fd23 	bl	80014e8 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);
 8000aa2:	2028      	movs	r0, #40	; 0x28
 8000aa4:	f003 fcf2 	bl	800448c <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000aa8:	e7ee      	b.n	8000a88 <TrigSensor+0x8>
 8000aaa:	bf00      	nop
 8000aac:	40020000 	.word	0x40020000

08000ab0 <FiltroDistancia>:

float muestras[TAM_FILTRO]={0};
int pos=0;
int distancia;
void FiltroDistancia(void const * argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	float suma;
	int i;
  /* Infinite loop */
  while(1)
  {
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <FiltroDistancia+0xd8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 f92b 	bl	8003d1c <xQueueSemaphoreTake>

	  muestras[pos]=(float) pulso*343*100/(2*1000000);
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <FiltroDistancia+0xdc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000b90 <FiltroDistancia+0xe0>
 8000ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ada:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000b94 <FiltroDistancia+0xe4>
 8000ade:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <FiltroDistancia+0xe8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000b9c <FiltroDistancia+0xec>
 8000aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aee:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <FiltroDistancia+0xf0>)
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	edc3 7a00 	vstr	s15, [r3]
	  pos++;
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <FiltroDistancia+0xe8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <FiltroDistancia+0xe8>)
 8000b00:	6013      	str	r3, [r2, #0]
	  if(pos==TAM_FILTRO){
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <FiltroDistancia+0xe8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b05      	cmp	r3, #5
 8000b08:	d1d6      	bne.n	8000ab8 <FiltroDistancia+0x8>
		  pos=0;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <FiltroDistancia+0xe8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
		  for(i = 0; i < TAM_FILTRO; i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	e00e      	b.n	8000b34 <FiltroDistancia+0x84>
		      suma = suma + muestras[i];
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <FiltroDistancia+0xf0>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	edd3 7a00 	vldr	s15, [r3]
 8000b22:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b2a:	edc7 7a03 	vstr	s15, [r7, #12]
		  for(i = 0; i < TAM_FILTRO; i++)
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	dded      	ble.n	8000b16 <FiltroDistancia+0x66>
		  distancia=(int) suma/TAM_FILTRO;
 8000b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b42:	ee17 1a90 	vmov	r1, s15
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <FiltroDistancia+0xf4>)
 8000b48:	fb83 2301 	smull	r2, r3, r3, r1
 8000b4c:	105a      	asrs	r2, r3, #1
 8000b4e:	17cb      	asrs	r3, r1, #31
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <FiltroDistancia+0xf8>)
 8000b54:	6013      	str	r3, [r2, #0]
		  suma=0;
 8000b56:	f04f 0300 	mov.w	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
		  uartBufferLen=sprintf(uart_buf,"%u Cm \r\n",distancia);
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <FiltroDistancia+0xf8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4912      	ldr	r1, [pc, #72]	; (8000bac <FiltroDistancia+0xfc>)
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <FiltroDistancia+0x100>)
 8000b66:	f005 f881 	bl	8005c6c <siprintf>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <FiltroDistancia+0x104>)
 8000b70:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <FiltroDistancia+0x104>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <FiltroDistancia+0x100>)
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <FiltroDistancia+0x108>)
 8000b80:	f002 f9e9 	bl	8002f56 <HAL_UART_Transmit>
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000b84:	e798      	b.n	8000ab8 <FiltroDistancia+0x8>
 8000b86:	bf00      	nop
 8000b88:	200003d4 	.word	0x200003d4
 8000b8c:	200003e4 	.word	0x200003e4
 8000b90:	43ab8000 	.word	0x43ab8000
 8000b94:	42c80000 	.word	0x42c80000
 8000b98:	20000434 	.word	0x20000434
 8000b9c:	49f42400 	.word	0x49f42400
 8000ba0:	20000420 	.word	0x20000420
 8000ba4:	66666667 	.word	0x66666667
 8000ba8:	20000438 	.word	0x20000438
 8000bac:	08006440 	.word	0x08006440
 8000bb0:	200003ec 	.word	0x200003ec
 8000bb4:	200003e8 	.word	0x200003e8
 8000bb8:	2000038c 	.word	0x2000038c

08000bbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {

	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <StartDefaultTask+0x2c>)
 8000bca:	f000 fc8d 	bl	80014e8 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_RATE_MS);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f003 fc5c 	bl	800448c <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <StartDefaultTask+0x2c>)
 8000bda:	f000 fc85 	bl	80014e8 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_RATE_MS);
 8000bde:	2028      	movs	r0, #40	; 0x28
 8000be0:	f003 fc54 	bl	800448c <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000be4:	e7ee      	b.n	8000bc4 <StartDefaultTask+0x8>
 8000be6:	bf00      	nop
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfe:	f000 f9ed 	bl	8000fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40010000 	.word	0x40010000

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_MspInit+0x54>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <HAL_MspInit+0x54>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x54>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_MspInit+0x54>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_MspInit+0x54>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_MspInit+0x54>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	f06f 0001 	mvn.w	r0, #1
 8000c62:	f000 fa93 	bl	800118c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c94:	d134      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_TIM_Base_MspInit+0x94>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <HAL_TIM_Base_MspInit+0x94>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_TIM_Base_MspInit+0x94>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_TIM_Base_MspInit+0x94>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <HAL_TIM_Base_MspInit+0x94>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_TIM_Base_MspInit+0x94>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4808      	ldr	r0, [pc, #32]	; (8000d0c <HAL_TIM_Base_MspInit+0x98>)
 8000cec:	f000 fa78 	bl	80011e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f000 fa49 	bl	800118c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cfa:	201c      	movs	r0, #28
 8000cfc:	f000 fa62 	bl	80011c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_UART_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_UART_MspInit+0x8c>)
 8000d86:	f000 fa2b 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	2019      	movs	r0, #25
 8000db6:	f000 f9e9 	bl	800118c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dba:	2019      	movs	r0, #25
 8000dbc:	f000 fa02 	bl	80011c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ddc:	f107 0210 	add.w	r2, r7, #16
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 f862 	bl	8001eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dec:	f001 f84c 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8000df0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_InitTick+0xa4>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_InitTick+0xac>)
 8000e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e22:	f001 f877 	bl	8001f14 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d104      	bne.n	8000e36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e2e:	f001 f8c1 	bl	8001fb4 <HAL_TIM_Base_Start_IT>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3730      	adds	r7, #48	; 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	431bde83 	.word	0x431bde83
 8000e48:	2000043c 	.word	0x2000043c
 8000e4c:	40010000 	.word	0x40010000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e82:	f001 fa6d 	bl	8002360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000043c 	.word	0x2000043c

08000e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM2_IRQHandler+0x10>)
 8000e96:	f001 fa63 	bl	8002360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000344 	.word	0x20000344

08000ea4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ea8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eac:	f000 fb50 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f004 fd72 	bl	80059cc <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20018000 	.word	0x20018000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	20000484 	.word	0x20000484
 8000f1c:	200041f0 	.word	0x200041f0

08000f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6e:	f7ff ffd7 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f004 fd31 	bl	80059d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fb27 	bl	80005c8 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f88:	08006510 	.word	0x08006510
  ldr r2, =_sbss
 8000f8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f90:	200041f0 	.word	0x200041f0

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f8d8 	bl	8001176 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f7ff feea 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe26 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000488 	.word	0x20000488

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000488 	.word	0x20000488

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff4c 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119e:	f7ff ff61 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff ffb1 	bl	8001110 <NVIC_EncodePriority>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff80 	bl	80010bc <__NVIC_SetPriority>
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff54 	bl	8001080 <__NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e159      	b.n	80014b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8148 	bne.w	80014aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d005      	beq.n	8001232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	2b02      	cmp	r3, #2
 8001230:	d130      	bne.n	8001294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 0201 	and.w	r2, r3, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b03      	cmp	r3, #3
 800129e:	d017      	beq.n	80012d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80a2 	beq.w	80014aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a56      	ldr	r2, [pc, #344]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b54      	ldr	r3, [pc, #336]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001382:	4a52      	ldr	r2, [pc, #328]	; (80014cc <HAL_GPIO_Init+0x2ec>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a49      	ldr	r2, [pc, #292]	; (80014d0 <HAL_GPIO_Init+0x2f0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x202>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <HAL_GPIO_Init+0x2f4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x1fe>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a47      	ldr	r2, [pc, #284]	; (80014d8 <HAL_GPIO_Init+0x2f8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x1fa>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a46      	ldr	r2, [pc, #280]	; (80014dc <HAL_GPIO_Init+0x2fc>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x1f6>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a45      	ldr	r2, [pc, #276]	; (80014e0 <HAL_GPIO_Init+0x300>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x1f2>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	; (80014cc <HAL_GPIO_Init+0x2ec>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_GPIO_Init+0x304>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <HAL_GPIO_Init+0x304>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_GPIO_Init+0x304>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001450:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <HAL_GPIO_Init+0x304>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_GPIO_Init+0x304>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147a:	4a1a      	ldr	r2, [pc, #104]	; (80014e4 <HAL_GPIO_Init+0x304>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_GPIO_Init+0x304>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_GPIO_Init+0x304>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f aea2 	bls.w	80011fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	041a      	lsls	r2, r3, #16
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43d9      	mvns	r1, r3
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	400b      	ands	r3, r1
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f9fe 	bl	8000970 <HAL_GPIO_EXTI_Callback>
  }
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e267      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d075      	beq.n	800168a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159e:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d00c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015aa:	4b85      	ldr	r3, [pc, #532]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d112      	bne.n	80015dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b6:	4b82      	ldr	r3, [pc, #520]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c2:	d10b      	bne.n	80015dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d05b      	beq.n	8001688 <HAL_RCC_OscConfig+0x108>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d157      	bne.n	8001688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e242      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x74>
 80015e6:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a75      	ldr	r2, [pc, #468]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e01d      	b.n	8001630 <HAL_RCC_OscConfig+0xb0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x98>
 80015fe:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6f      	ldr	r2, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6c      	ldr	r2, [pc, #432]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0xb0>
 8001618:	4b69      	ldr	r3, [pc, #420]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a68      	ldr	r2, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fce4 	bl	8001004 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fce0 	bl	8001004 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e207      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b5b      	ldr	r3, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0xc0>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fcd0 	bl	8001004 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fccc 	bl	8001004 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1f3      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0xe8>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d063      	beq.n	800175e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00b      	beq.n	80016ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d11c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b44      	ldr	r3, [pc, #272]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d116      	bne.n	80016e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x152>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e1c7      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4937      	ldr	r1, [pc, #220]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	e03a      	b.n	800175e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <HAL_RCC_OscConfig+0x244>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff fc85 	bl	8001004 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fc81 	bl	8001004 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1a8      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4925      	ldr	r1, [pc, #148]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_RCC_OscConfig+0x244>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fc64 	bl	8001004 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001740:	f7ff fc60 	bl	8001004 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e187      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d036      	beq.n	80017d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d016      	beq.n	80017a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_RCC_OscConfig+0x248>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fc44 	bl	8001004 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff fc40 	bl	8001004 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e167      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x200>
 800179e:	e01b      	b.n	80017d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_OscConfig+0x248>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fc2d 	bl	8001004 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	e00e      	b.n	80017cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fc29 	bl	8001004 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d907      	bls.n	80017cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e150      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
 80017c0:	40023800 	.word	0x40023800
 80017c4:	42470000 	.word	0x42470000
 80017c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1ea      	bne.n	80017ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8097 	beq.w	8001914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a7c      	ldr	r2, [pc, #496]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x474>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001822:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <HAL_RCC_OscConfig+0x474>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a73      	ldr	r2, [pc, #460]	; (80019f4 <HAL_RCC_OscConfig+0x474>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7ff fbe9 	bl	8001004 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7ff fbe5 	bl	8001004 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e10c      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x474>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x2ea>
 800185c:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	e01c      	b.n	80018a4 <HAL_RCC_OscConfig+0x324>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x30c>
 8001872:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a5e      	ldr	r2, [pc, #376]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a5b      	ldr	r2, [pc, #364]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_OscConfig+0x324>
 800188c:	4b58      	ldr	r3, [pc, #352]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a57      	ldr	r2, [pc, #348]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a54      	ldr	r2, [pc, #336]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d015      	beq.n	80018d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fbaa 	bl	8001004 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff fba6 	bl	8001004 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e0cb      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0ee      	beq.n	80018b4 <HAL_RCC_OscConfig+0x334>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff fb94 	bl	8001004 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff fb90 	bl	8001004 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0b5      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f6:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ee      	bne.n	80018e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a1 	beq.w	8001a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191e:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b08      	cmp	r3, #8
 8001928:	d05c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d141      	bne.n	80019b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_RCC_OscConfig+0x478>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fb64 	bl	8001004 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff fb60 	bl	8001004 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e087      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	019b      	lsls	r3, r3, #6
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	3b01      	subs	r3, #1
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	491b      	ldr	r1, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x478>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff fb39 	bl	8001004 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff fb35 	bl	8001004 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e05c      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x416>
 80019b4:	e054      	b.n	8001a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x478>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fb22 	bl	8001004 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff fb1e 	bl	8001004 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e045      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x444>
 80019e2:	e03d      	b.n	8001a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e038      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000
 80019f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d028      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d121      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d11a      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d111      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	3b01      	subs	r3, #1
 8001a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0cc      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d90c      	bls.n	8001aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b65      	ldr	r3, [pc, #404]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0b8      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d020      	beq.n	8001afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	494d      	ldr	r1, [pc, #308]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d044      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d119      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e07f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e06f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e067      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f023 0203 	bic.w	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4934      	ldr	r1, [pc, #208]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b60:	f7ff fa50 	bl	8001004 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b68:	f7ff fa4c 	bl	8001004 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 020c 	and.w	r2, r3, #12
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1eb      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d20c      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e032      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4916      	ldr	r1, [pc, #88]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490e      	ldr	r1, [pc, #56]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf6:	f000 f821 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490a      	ldr	r1, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f8c2 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08006454 	.word	0x08006454
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c40:	b094      	sub	sp, #80	; 0x50
 8001c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	647b      	str	r3, [r7, #68]	; 0x44
 8001c48:	2300      	movs	r3, #0
 8001c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c54:	4b79      	ldr	r3, [pc, #484]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d00d      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	f200 80e1 	bhi.w	8001e28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d003      	beq.n	8001c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c6e:	e0db      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b73      	ldr	r3, [pc, #460]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c74:	e0db      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c76:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7a:	e0d8      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c86:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	2200      	movs	r2, #0
 8001c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8001caa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cae:	4622      	mov	r2, r4
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	0159      	lsls	r1, r3, #5
 8001cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc0:	0150      	lsls	r0, r2, #5
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	1a51      	subs	r1, r2, r1
 8001cca:	6139      	str	r1, [r7, #16]
 8001ccc:	4629      	mov	r1, r5
 8001cce:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	018b      	lsls	r3, r1, #6
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cea:	4651      	mov	r1, sl
 8001cec:	018a      	lsls	r2, r1, #6
 8001cee:	4651      	mov	r1, sl
 8001cf0:	ebb2 0801 	subs.w	r8, r2, r1
 8001cf4:	4659      	mov	r1, fp
 8001cf6:	eb63 0901 	sbc.w	r9, r3, r1
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d0e:	4690      	mov	r8, r2
 8001d10:	4699      	mov	r9, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	eb18 0303 	adds.w	r3, r8, r3
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	462b      	mov	r3, r5
 8001d1c:	eb49 0303 	adc.w	r3, r9, r3
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	024b      	lsls	r3, r1, #9
 8001d32:	4621      	mov	r1, r4
 8001d34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d38:	4621      	mov	r1, r4
 8001d3a:	024a      	lsls	r2, r1, #9
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d42:	2200      	movs	r2, #0
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d4c:	f7fe fa98 	bl	8000280 <__aeabi_uldivmod>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4613      	mov	r3, r2
 8001d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d58:	e058      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5a:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	099b      	lsrs	r3, r3, #6
 8001d60:	2200      	movs	r2, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	4611      	mov	r1, r2
 8001d66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d74:	4642      	mov	r2, r8
 8001d76:	464b      	mov	r3, r9
 8001d78:	f04f 0000 	mov.w	r0, #0
 8001d7c:	f04f 0100 	mov.w	r1, #0
 8001d80:	0159      	lsls	r1, r3, #5
 8001d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d86:	0150      	lsls	r0, r2, #5
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d92:	4649      	mov	r1, r9
 8001d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dac:	ebb2 040a 	subs.w	r4, r2, sl
 8001db0:	eb63 050b 	sbc.w	r5, r3, fp
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	00eb      	lsls	r3, r5, #3
 8001dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dc2:	00e2      	lsls	r2, r4, #3
 8001dc4:	4614      	mov	r4, r2
 8001dc6:	461d      	mov	r5, r3
 8001dc8:	4643      	mov	r3, r8
 8001dca:	18e3      	adds	r3, r4, r3
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	464b      	mov	r3, r9
 8001dd0:	eb45 0303 	adc.w	r3, r5, r3
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001de2:	4629      	mov	r1, r5
 8001de4:	028b      	lsls	r3, r1, #10
 8001de6:	4621      	mov	r1, r4
 8001de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dec:	4621      	mov	r1, r4
 8001dee:	028a      	lsls	r2, r1, #10
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df6:	2200      	movs	r2, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	61fa      	str	r2, [r7, #28]
 8001dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e00:	f7fe fa3e 	bl	8000280 <__aeabi_uldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3750      	adds	r7, #80	; 0x50
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	007a1200 	.word	0x007a1200

08001e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000000 	.word	0x20000000

08001e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e64:	f7ff fff0 	bl	8001e48 <HAL_RCC_GetHCLKFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0a9b      	lsrs	r3, r3, #10
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4903      	ldr	r1, [pc, #12]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	08006464 	.word	0x08006464

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e8c:	f7ff ffdc 	bl	8001e48 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0b5b      	lsrs	r3, r3, #13
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	08006464 	.word	0x08006464

08001eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_RCC_GetClockConfig+0x5c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_RCC_GetClockConfig+0x60>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0207 	and.w	r2, r3, #7
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e041      	b.n	8001faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fe9a 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 fcd2 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e044      	b.n	8002056 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_TIM_Base_Start_IT+0xb0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d018      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d013      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00e      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_TIM_Base_Start_IT+0xb8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_TIM_Base_Start_IT+0xbc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_TIM_Base_Start_IT+0xc0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b06      	cmp	r3, #6
 8002030:	d010      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002042:	e007      	b.n	8002054 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	40000400 	.word	0x40000400
 800206c:	40000800 	.word	0x40000800
 8002070:	40000c00 	.word	0x40000c00
 8002074:	40014000 	.word	0x40014000

08002078 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e041      	b.n	800210e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f839 	bl	8002116 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f000 fc20 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <HAL_TIM_IC_Start_IT+0x1e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e013      	b.n	8002172 <HAL_TIM_IC_Start_IT+0x46>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d104      	bne.n	800215a <HAL_TIM_IC_Start_IT+0x2e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002156:	b2db      	uxtb	r3, r3
 8002158:	e00b      	b.n	8002172 <HAL_TIM_IC_Start_IT+0x46>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d104      	bne.n	800216a <HAL_TIM_IC_Start_IT+0x3e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002166:	b2db      	uxtb	r3, r3
 8002168:	e003      	b.n	8002172 <HAL_TIM_IC_Start_IT+0x46>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002170:	b2db      	uxtb	r3, r3
 8002172:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d104      	bne.n	8002184 <HAL_TIM_IC_Start_IT+0x58>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e013      	b.n	80021ac <HAL_TIM_IC_Start_IT+0x80>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d104      	bne.n	8002194 <HAL_TIM_IC_Start_IT+0x68>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e00b      	b.n	80021ac <HAL_TIM_IC_Start_IT+0x80>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b08      	cmp	r3, #8
 8002198:	d104      	bne.n	80021a4 <HAL_TIM_IC_Start_IT+0x78>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e003      	b.n	80021ac <HAL_TIM_IC_Start_IT+0x80>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80021ae:	7bbb      	ldrb	r3, [r7, #14]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80021b4:	7b7b      	ldrb	r3, [r7, #13]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d001      	beq.n	80021be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0c2      	b.n	8002344 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <HAL_TIM_IC_Start_IT+0xa2>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021cc:	e013      	b.n	80021f6 <HAL_TIM_IC_Start_IT+0xca>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d104      	bne.n	80021de <HAL_TIM_IC_Start_IT+0xb2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021dc:	e00b      	b.n	80021f6 <HAL_TIM_IC_Start_IT+0xca>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d104      	bne.n	80021ee <HAL_TIM_IC_Start_IT+0xc2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ec:	e003      	b.n	80021f6 <HAL_TIM_IC_Start_IT+0xca>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d104      	bne.n	8002206 <HAL_TIM_IC_Start_IT+0xda>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002204:	e013      	b.n	800222e <HAL_TIM_IC_Start_IT+0x102>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d104      	bne.n	8002216 <HAL_TIM_IC_Start_IT+0xea>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002214:	e00b      	b.n	800222e <HAL_TIM_IC_Start_IT+0x102>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d104      	bne.n	8002226 <HAL_TIM_IC_Start_IT+0xfa>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002224:	e003      	b.n	800222e <HAL_TIM_IC_Start_IT+0x102>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d841      	bhi.n	80022b8 <HAL_TIM_IC_Start_IT+0x18c>
 8002234:	a201      	add	r2, pc, #4	; (adr r2, 800223c <HAL_TIM_IC_Start_IT+0x110>)
 8002236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223a:	bf00      	nop
 800223c:	08002271 	.word	0x08002271
 8002240:	080022b9 	.word	0x080022b9
 8002244:	080022b9 	.word	0x080022b9
 8002248:	080022b9 	.word	0x080022b9
 800224c:	08002283 	.word	0x08002283
 8002250:	080022b9 	.word	0x080022b9
 8002254:	080022b9 	.word	0x080022b9
 8002258:	080022b9 	.word	0x080022b9
 800225c:	08002295 	.word	0x08002295
 8002260:	080022b9 	.word	0x080022b9
 8002264:	080022b9 	.word	0x080022b9
 8002268:	080022b9 	.word	0x080022b9
 800226c:	080022a7 	.word	0x080022a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0202 	orr.w	r2, r2, #2
 800227e:	60da      	str	r2, [r3, #12]
      break;
 8002280:	e01d      	b.n	80022be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0204 	orr.w	r2, r2, #4
 8002290:	60da      	str	r2, [r3, #12]
      break;
 8002292:	e014      	b.n	80022be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0208 	orr.w	r2, r2, #8
 80022a2:	60da      	str	r2, [r3, #12]
      break;
 80022a4:	e00b      	b.n	80022be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0210 	orr.w	r2, r2, #16
 80022b4:	60da      	str	r2, [r3, #12]
      break;
 80022b6:	e002      	b.n	80022be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      break;
 80022bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d13e      	bne.n	8002342 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	6839      	ldr	r1, [r7, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fd4d 	bl	8002d6c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_TIM_IC_Start_IT+0x220>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d018      	beq.n	800230e <HAL_TIM_IC_Start_IT+0x1e2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e4:	d013      	beq.n	800230e <HAL_TIM_IC_Start_IT+0x1e2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_TIM_IC_Start_IT+0x224>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00e      	beq.n	800230e <HAL_TIM_IC_Start_IT+0x1e2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_TIM_IC_Start_IT+0x228>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_TIM_IC_Start_IT+0x1e2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_TIM_IC_Start_IT+0x22c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_TIM_IC_Start_IT+0x1e2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_TIM_IC_Start_IT+0x230>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d111      	bne.n	8002332 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d010      	beq.n	8002342 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002330:	e007      	b.n	8002342 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0201 	orr.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40010000 	.word	0x40010000
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800
 8002358:	40000c00 	.word	0x40000c00
 800235c:	40014000 	.word	0x40014000

08002360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0202 	mvn.w	r2, #2
 800238c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe faf4 	bl	8000990 <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa88 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa8f 	bl	80028d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0204 	mvn.w	r2, #4
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe faca 	bl	8000990 <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa5e 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fa65 	bl	80028d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b08      	cmp	r3, #8
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b08      	cmp	r3, #8
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0208 	mvn.w	r2, #8
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2204      	movs	r2, #4
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe faa0 	bl	8000990 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa34 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa3b 	bl	80028d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b10      	cmp	r3, #16
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b10      	cmp	r3, #16
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0210 	mvn.w	r2, #16
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2208      	movs	r2, #8
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fa76 	bl	8000990 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa0a 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa11 	bl	80028d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d10e      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0201 	mvn.w	r2, #1
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fb84 	bl	8000bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	d10e      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d107      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fccc 	bl	8002ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9d6 	bl	80028e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b20      	cmp	r3, #32
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b20      	cmp	r3, #32
 8002556:	d107      	bne.n	8002568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0220 	mvn.w	r2, #32
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fc96 	bl	8002e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_TIM_IC_ConfigChannel+0x1e>
 800258a:	2302      	movs	r3, #2
 800258c:	e088      	b.n	80026a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f000 fa26 	bl	80029fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 020c 	bic.w	r2, r2, #12
 80025be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6999      	ldr	r1, [r3, #24]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	619a      	str	r2, [r3, #24]
 80025d2:	e060      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d11c      	bne.n	8002614 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f000 fa9e 	bl	8002b2a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6999      	ldr	r1, [r3, #24]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	021a      	lsls	r2, r3, #8
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	619a      	str	r2, [r3, #24]
 8002612:	e040      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11b      	bne.n	8002652 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f000 faeb 	bl	8002c04 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 020c 	bic.w	r2, r2, #12
 800263c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69d9      	ldr	r1, [r3, #28]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	61da      	str	r2, [r3, #28]
 8002650:	e021      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d11c      	bne.n	8002692 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f000 fb08 	bl	8002c7c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800267a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69d9      	ldr	r1, [r3, #28]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	021a      	lsls	r2, r3, #8
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	61da      	str	r2, [r3, #28]
 8002690:	e001      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e0b4      	b.n	800282e <HAL_TIM_ConfigClockSource+0x186>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fc:	d03e      	beq.n	800277c <HAL_TIM_ConfigClockSource+0xd4>
 80026fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002702:	f200 8087 	bhi.w	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270a:	f000 8086 	beq.w	800281a <HAL_TIM_ConfigClockSource+0x172>
 800270e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002712:	d87f      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b70      	cmp	r3, #112	; 0x70
 8002716:	d01a      	beq.n	800274e <HAL_TIM_ConfigClockSource+0xa6>
 8002718:	2b70      	cmp	r3, #112	; 0x70
 800271a:	d87b      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b60      	cmp	r3, #96	; 0x60
 800271e:	d050      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d877      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b50      	cmp	r3, #80	; 0x50
 8002726:	d03c      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002728:	2b50      	cmp	r3, #80	; 0x50
 800272a:	d873      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d058      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d86f      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b30      	cmp	r3, #48	; 0x30
 8002736:	d064      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b30      	cmp	r3, #48	; 0x30
 800273a:	d86b      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b20      	cmp	r3, #32
 800273e:	d060      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002740:	2b20      	cmp	r3, #32
 8002742:	d867      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d05c      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	2b10      	cmp	r3, #16
 800274a:	d05a      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	e062      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f000 fae5 	bl	8002d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002770:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
      break;
 800277a:	e04f      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f000 face 	bl	8002d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800279e:	609a      	str	r2, [r3, #8]
      break;
 80027a0:	e03c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f000 f98c 	bl	8002acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2150      	movs	r1, #80	; 0x50
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fa9b 	bl	8002cf6 <TIM_ITRx_SetConfig>
      break;
 80027c0:	e02c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f9e8 	bl	8002ba4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2160      	movs	r1, #96	; 0x60
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fa8b 	bl	8002cf6 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e01c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f96c 	bl	8002acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2140      	movs	r1, #64	; 0x40
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fa7b 	bl	8002cf6 <TIM_ITRx_SetConfig>
      break;
 8002800:	e00c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f000 fa72 	bl	8002cf6 <TIM_ITRx_SetConfig>
      break;
 8002812:	e003      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e000      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800281a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d831      	bhi.n	80028b0 <HAL_TIM_ReadCapturedValue+0x78>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_TIM_ReadCapturedValue+0x1c>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002889 	.word	0x08002889
 8002858:	080028b1 	.word	0x080028b1
 800285c:	080028b1 	.word	0x080028b1
 8002860:	080028b1 	.word	0x080028b1
 8002864:	08002893 	.word	0x08002893
 8002868:	080028b1 	.word	0x080028b1
 800286c:	080028b1 	.word	0x080028b1
 8002870:	080028b1 	.word	0x080028b1
 8002874:	0800289d 	.word	0x0800289d
 8002878:	080028b1 	.word	0x080028b1
 800287c:	080028b1 	.word	0x080028b1
 8002880:	080028b1 	.word	0x080028b1
 8002884:	080028a7 	.word	0x080028a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	60fb      	str	r3, [r7, #12]

      break;
 8002890:	e00f      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	60fb      	str	r3, [r7, #12]

      break;
 800289a:	e00a      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	60fb      	str	r3, [r7, #12]

      break;
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	60fb      	str	r3, [r7, #12]

      break;
 80028ae:	e000      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80028b0:	bf00      	nop
  }

  return tmpreg;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00f      	beq.n	8002934 <TIM_Base_SetConfig+0x38>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d00b      	beq.n	8002934 <TIM_Base_SetConfig+0x38>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <TIM_Base_SetConfig+0xe8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <TIM_Base_SetConfig+0x38>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <TIM_Base_SetConfig+0xec>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_Base_SetConfig+0x38>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a2f      	ldr	r2, [pc, #188]	; (80029ec <TIM_Base_SetConfig+0xf0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d108      	bne.n	8002946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01b      	beq.n	8002986 <TIM_Base_SetConfig+0x8a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d017      	beq.n	8002986 <TIM_Base_SetConfig+0x8a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <TIM_Base_SetConfig+0xe8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <TIM_Base_SetConfig+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <TIM_Base_SetConfig+0xec>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00f      	beq.n	8002986 <TIM_Base_SetConfig+0x8a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a20      	ldr	r2, [pc, #128]	; (80029ec <TIM_Base_SetConfig+0xf0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00b      	beq.n	8002986 <TIM_Base_SetConfig+0x8a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <TIM_Base_SetConfig+0xf4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <TIM_Base_SetConfig+0x8a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <TIM_Base_SetConfig+0xf8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_Base_SetConfig+0x8a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <TIM_Base_SetConfig+0xfc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d108      	bne.n	8002998 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d103      	bne.n	80029cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	615a      	str	r2, [r3, #20]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40014400 	.word	0x40014400
 80029f8:	40014800 	.word	0x40014800

080029fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0201 	bic.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a24      	ldr	r2, [pc, #144]	; (8002ab8 <TIM_TI1_SetConfig+0xbc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <TIM_TI1_SetConfig+0x56>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d00f      	beq.n	8002a52 <TIM_TI1_SetConfig+0x56>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a21      	ldr	r2, [pc, #132]	; (8002abc <TIM_TI1_SetConfig+0xc0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00b      	beq.n	8002a52 <TIM_TI1_SetConfig+0x56>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <TIM_TI1_SetConfig+0xc4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <TIM_TI1_SetConfig+0x56>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <TIM_TI1_SetConfig+0xc8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d003      	beq.n	8002a52 <TIM_TI1_SetConfig+0x56>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a1e      	ldr	r2, [pc, #120]	; (8002ac8 <TIM_TI1_SetConfig+0xcc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <TIM_TI1_SetConfig+0x5a>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <TIM_TI1_SetConfig+0x5c>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e003      	b.n	8002a76 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f023 030a 	bic.w	r3, r3, #10
 8002a90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 030a 	and.w	r3, r3, #10
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	40014000 	.word	0x40014000

08002acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 030a 	bic.w	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f023 0210 	bic.w	r2, r3, #16
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	031b      	lsls	r3, r3, #12
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	621a      	str	r2, [r3, #32]
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 0210 	bic.w	r2, r3, #16
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	031b      	lsls	r3, r3, #12
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f023 0303 	bic.w	r3, r3, #3
 8002c30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002c54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	621a      	str	r2, [r3, #32]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	031b      	lsls	r3, r3, #12
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002cce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	031b      	lsls	r3, r3, #12
 8002cd4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	621a      	str	r2, [r3, #32]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f043 0307 	orr.w	r3, r3, #7
 8002d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	021a      	lsls	r2, r3, #8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2201      	movs	r2, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	401a      	ands	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e050      	b.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d018      	beq.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1c:	d013      	beq.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00e      	beq.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10c      	bne.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40010000 	.word	0x40010000
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800
 8002e8c:	40000c00 	.word	0x40000c00
 8002e90:	40014000 	.word	0x40014000

08002e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e03f      	b.n	8002f4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd ff14 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f929 	bl	8003158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08a      	sub	sp, #40	; 0x28
 8002f5a:	af02      	add	r7, sp, #8
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d17c      	bne.n	8003070 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_Transmit+0x2c>
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e075      	b.n	8003072 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_UART_Transmit+0x3e>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e06e      	b.n	8003072 <HAL_UART_Transmit+0x11c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2221      	movs	r2, #33	; 0x21
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002faa:	f7fe f82b 	bl	8001004 <HAL_GetTick>
 8002fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d108      	bne.n	8002fd8 <HAL_UART_Transmit+0x82>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e003      	b.n	8002fe0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fe8:	e02a      	b.n	8003040 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f840 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e036      	b.n	8003072 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	3302      	adds	r3, #2
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e007      	b.n	8003032 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1cf      	bne.n	8002fea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f810 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e006      	b.n	8003072 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b090      	sub	sp, #64	; 0x40
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308a:	e050      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d04c      	beq.n	800312e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <UART_WaitOnFlagUntilTimeout+0x30>
 800309a:	f7fd ffb3 	bl	8001004 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d241      	bcs.n	800312e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ca:	637a      	str	r2, [r7, #52]	; 0x34
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e5      	bne.n	80030aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	613b      	str	r3, [r7, #16]
   return(result);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3314      	adds	r3, #20
 80030fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030fe:	623a      	str	r2, [r7, #32]
 8003100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	69f9      	ldr	r1, [r7, #28]
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	61bb      	str	r3, [r7, #24]
   return(result);
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e5      	bne.n	80030de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e00f      	b.n	800314e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	429a      	cmp	r2, r3
 800314a:	d09f      	beq.n	800308c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3740      	adds	r7, #64	; 0x40
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800315c:	b0c0      	sub	sp, #256	; 0x100
 800315e:	af00      	add	r7, sp, #0
 8003160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	68d9      	ldr	r1, [r3, #12]
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	ea40 0301 	orr.w	r3, r0, r1
 8003180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	431a      	orrs	r2, r3
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	431a      	orrs	r2, r3
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031b0:	f021 010c 	bic.w	r1, r1, #12
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031be:	430b      	orrs	r3, r1
 80031c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d2:	6999      	ldr	r1, [r3, #24]
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	ea40 0301 	orr.w	r3, r0, r1
 80031de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b8f      	ldr	r3, [pc, #572]	; (8003424 <UART_SetConfig+0x2cc>)
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d005      	beq.n	80031f8 <UART_SetConfig+0xa0>
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b8d      	ldr	r3, [pc, #564]	; (8003428 <UART_SetConfig+0x2d0>)
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d104      	bne.n	8003202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031f8:	f7fe fe46 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 80031fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003200:	e003      	b.n	800320a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003202:	f7fe fe2d 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 8003206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	f040 810c 	bne.w	8003430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321c:	2200      	movs	r2, #0
 800321e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800322a:	4622      	mov	r2, r4
 800322c:	462b      	mov	r3, r5
 800322e:	1891      	adds	r1, r2, r2
 8003230:	65b9      	str	r1, [r7, #88]	; 0x58
 8003232:	415b      	adcs	r3, r3
 8003234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800323a:	4621      	mov	r1, r4
 800323c:	eb12 0801 	adds.w	r8, r2, r1
 8003240:	4629      	mov	r1, r5
 8003242:	eb43 0901 	adc.w	r9, r3, r1
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800325a:	4690      	mov	r8, r2
 800325c:	4699      	mov	r9, r3
 800325e:	4623      	mov	r3, r4
 8003260:	eb18 0303 	adds.w	r3, r8, r3
 8003264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003268:	462b      	mov	r3, r5
 800326a:	eb49 0303 	adc.w	r3, r9, r3
 800326e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800327e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003286:	460b      	mov	r3, r1
 8003288:	18db      	adds	r3, r3, r3
 800328a:	653b      	str	r3, [r7, #80]	; 0x50
 800328c:	4613      	mov	r3, r2
 800328e:	eb42 0303 	adc.w	r3, r2, r3
 8003292:	657b      	str	r3, [r7, #84]	; 0x54
 8003294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800329c:	f7fc fff0 	bl	8000280 <__aeabi_uldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4b61      	ldr	r3, [pc, #388]	; (800342c <UART_SetConfig+0x2d4>)
 80032a6:	fba3 2302 	umull	r2, r3, r3, r2
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	011c      	lsls	r4, r3, #4
 80032ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032c0:	4642      	mov	r2, r8
 80032c2:	464b      	mov	r3, r9
 80032c4:	1891      	adds	r1, r2, r2
 80032c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80032c8:	415b      	adcs	r3, r3
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032d0:	4641      	mov	r1, r8
 80032d2:	eb12 0a01 	adds.w	sl, r2, r1
 80032d6:	4649      	mov	r1, r9
 80032d8:	eb43 0b01 	adc.w	fp, r3, r1
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f0:	4692      	mov	sl, r2
 80032f2:	469b      	mov	fp, r3
 80032f4:	4643      	mov	r3, r8
 80032f6:	eb1a 0303 	adds.w	r3, sl, r3
 80032fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032fe:	464b      	mov	r3, r9
 8003300:	eb4b 0303 	adc.w	r3, fp, r3
 8003304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800331c:	460b      	mov	r3, r1
 800331e:	18db      	adds	r3, r3, r3
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
 8003322:	4613      	mov	r3, r2
 8003324:	eb42 0303 	adc.w	r3, r2, r3
 8003328:	647b      	str	r3, [r7, #68]	; 0x44
 800332a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800332e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003332:	f7fc ffa5 	bl	8000280 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4611      	mov	r1, r2
 800333c:	4b3b      	ldr	r3, [pc, #236]	; (800342c <UART_SetConfig+0x2d4>)
 800333e:	fba3 2301 	umull	r2, r3, r3, r1
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2264      	movs	r2, #100	; 0x64
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	1acb      	subs	r3, r1, r3
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003352:	4b36      	ldr	r3, [pc, #216]	; (800342c <UART_SetConfig+0x2d4>)
 8003354:	fba3 2302 	umull	r2, r3, r3, r2
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003360:	441c      	add	r4, r3
 8003362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800336c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	1891      	adds	r1, r2, r2
 800337a:	63b9      	str	r1, [r7, #56]	; 0x38
 800337c:	415b      	adcs	r3, r3
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003384:	4641      	mov	r1, r8
 8003386:	1851      	adds	r1, r2, r1
 8003388:	6339      	str	r1, [r7, #48]	; 0x30
 800338a:	4649      	mov	r1, r9
 800338c:	414b      	adcs	r3, r1
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800339c:	4659      	mov	r1, fp
 800339e:	00cb      	lsls	r3, r1, #3
 80033a0:	4651      	mov	r1, sl
 80033a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a6:	4651      	mov	r1, sl
 80033a8:	00ca      	lsls	r2, r1, #3
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	4642      	mov	r2, r8
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033b8:	464b      	mov	r3, r9
 80033ba:	460a      	mov	r2, r1
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033d8:	460b      	mov	r3, r1
 80033da:	18db      	adds	r3, r3, r3
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033de:	4613      	mov	r3, r2
 80033e0:	eb42 0303 	adc.w	r3, r2, r3
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033ee:	f7fc ff47 	bl	8000280 <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4b0d      	ldr	r3, [pc, #52]	; (800342c <UART_SetConfig+0x2d4>)
 80033f8:	fba3 1302 	umull	r1, r3, r3, r2
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	2164      	movs	r1, #100	; 0x64
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	3332      	adds	r3, #50	; 0x32
 800340a:	4a08      	ldr	r2, [pc, #32]	; (800342c <UART_SetConfig+0x2d4>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	f003 0207 	and.w	r2, r3, #7
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4422      	add	r2, r4
 800341e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003420:	e105      	b.n	800362e <UART_SetConfig+0x4d6>
 8003422:	bf00      	nop
 8003424:	40011000 	.word	0x40011000
 8003428:	40011400 	.word	0x40011400
 800342c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800343a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800343e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003442:	4642      	mov	r2, r8
 8003444:	464b      	mov	r3, r9
 8003446:	1891      	adds	r1, r2, r2
 8003448:	6239      	str	r1, [r7, #32]
 800344a:	415b      	adcs	r3, r3
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
 800344e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003452:	4641      	mov	r1, r8
 8003454:	1854      	adds	r4, r2, r1
 8003456:	4649      	mov	r1, r9
 8003458:	eb43 0501 	adc.w	r5, r3, r1
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	00eb      	lsls	r3, r5, #3
 8003466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800346a:	00e2      	lsls	r2, r4, #3
 800346c:	4614      	mov	r4, r2
 800346e:	461d      	mov	r5, r3
 8003470:	4643      	mov	r3, r8
 8003472:	18e3      	adds	r3, r4, r3
 8003474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003478:	464b      	mov	r3, r9
 800347a:	eb45 0303 	adc.w	r3, r5, r3
 800347e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800348e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800349e:	4629      	mov	r1, r5
 80034a0:	008b      	lsls	r3, r1, #2
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a8:	4621      	mov	r1, r4
 80034aa:	008a      	lsls	r2, r1, #2
 80034ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034b0:	f7fc fee6 	bl	8000280 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4b60      	ldr	r3, [pc, #384]	; (800363c <UART_SetConfig+0x4e4>)
 80034ba:	fba3 2302 	umull	r2, r3, r3, r2
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	011c      	lsls	r4, r3, #4
 80034c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034d4:	4642      	mov	r2, r8
 80034d6:	464b      	mov	r3, r9
 80034d8:	1891      	adds	r1, r2, r2
 80034da:	61b9      	str	r1, [r7, #24]
 80034dc:	415b      	adcs	r3, r3
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e4:	4641      	mov	r1, r8
 80034e6:	1851      	adds	r1, r2, r1
 80034e8:	6139      	str	r1, [r7, #16]
 80034ea:	4649      	mov	r1, r9
 80034ec:	414b      	adcs	r3, r1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034fc:	4659      	mov	r1, fp
 80034fe:	00cb      	lsls	r3, r1, #3
 8003500:	4651      	mov	r1, sl
 8003502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003506:	4651      	mov	r1, sl
 8003508:	00ca      	lsls	r2, r1, #3
 800350a:	4610      	mov	r0, r2
 800350c:	4619      	mov	r1, r3
 800350e:	4603      	mov	r3, r0
 8003510:	4642      	mov	r2, r8
 8003512:	189b      	adds	r3, r3, r2
 8003514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003518:	464b      	mov	r3, r9
 800351a:	460a      	mov	r2, r1
 800351c:	eb42 0303 	adc.w	r3, r2, r3
 8003520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	67bb      	str	r3, [r7, #120]	; 0x78
 800352e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800353c:	4649      	mov	r1, r9
 800353e:	008b      	lsls	r3, r1, #2
 8003540:	4641      	mov	r1, r8
 8003542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003546:	4641      	mov	r1, r8
 8003548:	008a      	lsls	r2, r1, #2
 800354a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800354e:	f7fc fe97 	bl	8000280 <__aeabi_uldivmod>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4b39      	ldr	r3, [pc, #228]	; (800363c <UART_SetConfig+0x4e4>)
 8003558:	fba3 1302 	umull	r1, r3, r3, r2
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	2164      	movs	r1, #100	; 0x64
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	3332      	adds	r3, #50	; 0x32
 800356a:	4a34      	ldr	r2, [pc, #208]	; (800363c <UART_SetConfig+0x4e4>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003576:	441c      	add	r4, r3
 8003578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357c:	2200      	movs	r2, #0
 800357e:	673b      	str	r3, [r7, #112]	; 0x70
 8003580:	677a      	str	r2, [r7, #116]	; 0x74
 8003582:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003586:	4642      	mov	r2, r8
 8003588:	464b      	mov	r3, r9
 800358a:	1891      	adds	r1, r2, r2
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	415b      	adcs	r3, r3
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003596:	4641      	mov	r1, r8
 8003598:	1851      	adds	r1, r2, r1
 800359a:	6039      	str	r1, [r7, #0]
 800359c:	4649      	mov	r1, r9
 800359e:	414b      	adcs	r3, r1
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035ae:	4659      	mov	r1, fp
 80035b0:	00cb      	lsls	r3, r1, #3
 80035b2:	4651      	mov	r1, sl
 80035b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b8:	4651      	mov	r1, sl
 80035ba:	00ca      	lsls	r2, r1, #3
 80035bc:	4610      	mov	r0, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	4603      	mov	r3, r0
 80035c2:	4642      	mov	r2, r8
 80035c4:	189b      	adds	r3, r3, r2
 80035c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c8:	464b      	mov	r3, r9
 80035ca:	460a      	mov	r2, r1
 80035cc:	eb42 0303 	adc.w	r3, r2, r3
 80035d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	663b      	str	r3, [r7, #96]	; 0x60
 80035dc:	667a      	str	r2, [r7, #100]	; 0x64
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035ea:	4649      	mov	r1, r9
 80035ec:	008b      	lsls	r3, r1, #2
 80035ee:	4641      	mov	r1, r8
 80035f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f4:	4641      	mov	r1, r8
 80035f6:	008a      	lsls	r2, r1, #2
 80035f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035fc:	f7fc fe40 	bl	8000280 <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <UART_SetConfig+0x4e4>)
 8003606:	fba3 1302 	umull	r1, r3, r3, r2
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	2164      	movs	r1, #100	; 0x64
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	3332      	adds	r3, #50	; 0x32
 8003618:	4a08      	ldr	r2, [pc, #32]	; (800363c <UART_SetConfig+0x4e4>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	f003 020f 	and.w	r2, r3, #15
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4422      	add	r2, r4
 800362c:	609a      	str	r2, [r3, #8]
}
 800362e:	bf00      	nop
 8003630:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003634:	46bd      	mov	sp, r7
 8003636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800363a:	bf00      	nop
 800363c:	51eb851f 	.word	0x51eb851f

08003640 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800364e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003652:	2b84      	cmp	r3, #132	; 0x84
 8003654:	d005      	beq.n	8003662 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4413      	add	r3, r2
 800365e:	3303      	adds	r3, #3
 8003660:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003674:	f000 ff3e 	bl	80044f4 <vTaskStartScheduler>
  
  return osOK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	bd80      	pop	{r7, pc}

0800367e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800367e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003680:	b089      	sub	sp, #36	; 0x24
 8003682:	af04      	add	r7, sp, #16
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <osThreadCreate+0x54>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01c      	beq.n	80036d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685c      	ldr	r4, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681d      	ldr	r5, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691e      	ldr	r6, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ffc8 	bl	8003640 <makeFreeRtosPriority>
 80036b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036ba:	9202      	str	r2, [sp, #8]
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	9100      	str	r1, [sp, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4632      	mov	r2, r6
 80036c4:	4629      	mov	r1, r5
 80036c6:	4620      	mov	r0, r4
 80036c8:	f000 fd36 	bl	8004138 <xTaskCreateStatic>
 80036cc:	4603      	mov	r3, r0
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e01c      	b.n	800370c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685c      	ldr	r4, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036de:	b29e      	uxth	r6, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ffaa 	bl	8003640 <makeFreeRtosPriority>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f107 030c 	add.w	r3, r7, #12
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	4632      	mov	r2, r6
 80036fa:	4629      	mov	r1, r5
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 fd78 	bl	80041f2 <xTaskCreate>
 8003702:	4603      	mov	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003716 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f103 0208 	add.w	r2, r3, #8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f103 0208 	add.w	r2, r3, #8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 0208 	add.w	r2, r3, #8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	601a      	str	r2, [r3, #0]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d103      	bne.n	80037d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e00c      	b.n	80037f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3308      	adds	r3, #8
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e002      	b.n	80037e6 <vListInsert+0x2e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d2f6      	bcs.n	80037e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6892      	ldr	r2, [r2, #8]
 8003840:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6852      	ldr	r2, [r2, #4]
 800384a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d103      	bne.n	800385e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038aa:	f001 fd83 	bl	80053b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	441a      	add	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	3b01      	subs	r3, #1
 80038dc:	68f9      	ldr	r1, [r7, #12]
 80038de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	441a      	add	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	22ff      	movs	r2, #255	; 0xff
 80038ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	22ff      	movs	r2, #255	; 0xff
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d114      	bne.n	800392a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01a      	beq.n	800393e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3310      	adds	r3, #16
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f843 	bl	8004998 <xTaskRemoveFromEventList>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <xQueueGenericReset+0xcc>)
 800391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	e009      	b.n	800393e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3310      	adds	r3, #16
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fef1 	bl	8003716 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3324      	adds	r3, #36	; 0x24
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff feec 	bl	8003716 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800393e:	f001 fd69 	bl	8005414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003942:	2301      	movs	r3, #1
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	e000ed04 	.word	0xe000ed04

08003950 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	613b      	str	r3, [r7, #16]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3348      	adds	r3, #72	; 0x48
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fe35 	bl	80055f8 <pvPortMalloc>
 800398e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d011      	beq.n	80039ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	3348      	adds	r3, #72	; 0x48
 800399e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039a8:	79fa      	ldrb	r2, [r7, #7]
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f805 	bl	80039c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039ba:	69bb      	ldr	r3, [r7, #24]
	}
 80039bc:	4618      	mov	r0, r3
 80039be:	3720      	adds	r7, #32
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e002      	b.n	80039e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039f2:	2101      	movs	r1, #1
 80039f4:	69b8      	ldr	r0, [r7, #24]
 80039f6:	f7ff ff43 	bl	8003880 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	; 0x38
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a12:	2300      	movs	r3, #0
 8003a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueGenericSend+0x32>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <xQueueGenericSend+0x40>
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <xQueueGenericSend+0x44>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <xQueueGenericSend+0x46>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <xQueueGenericSend+0x60>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a60:	bf00      	nop
 8003a62:	e7fe      	b.n	8003a62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d103      	bne.n	8003a72 <xQueueGenericSend+0x6e>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <xQueueGenericSend+0x72>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <xQueueGenericSend+0x74>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	623b      	str	r3, [r7, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a92:	f001 f943 	bl	8004d1c <xTaskGetSchedulerState>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <xQueueGenericSend+0x9e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericSend+0xa2>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericSend+0xa4>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	61fb      	str	r3, [r7, #28]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ac2:	f001 fc77 	bl	80053b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <xQueueGenericSend+0xd4>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d129      	bne.n	8003b2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ade:	f000 fa41 	bl	8003f64 <prvCopyDataToQueue>
 8003ae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	3324      	adds	r3, #36	; 0x24
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 ff51 	bl	8004998 <xTaskRemoveFromEventList>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003afc:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <xQueueGenericSend+0x1f8>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	e00a      	b.n	8003b24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <xQueueGenericSend+0x1f8>)
 8003b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b24:	f001 fc76 	bl	8005414 <vPortExitCritical>
				return pdPASS;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e063      	b.n	8003bf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b32:	f001 fc6f 	bl	8005414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e05c      	b.n	8003bf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 ff89 	bl	8004a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b4e:	f001 fc61 	bl	8005414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b52:	f000 fd39 	bl	80045c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b56:	f001 fc2d 	bl	80053b4 <vPortEnterCritical>
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <xQueueGenericSend+0x16c>
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d103      	bne.n	8003b86 <xQueueGenericSend+0x182>
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b86:	f001 fc45 	bl	8005414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b8a:	1d3a      	adds	r2, r7, #4
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 ff78 	bl	8004a88 <xTaskCheckForTimeOut>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d124      	bne.n	8003be8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ba0:	f000 fab2 	bl	8004108 <prvIsQueueFull>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d018      	beq.n	8003bdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	3310      	adds	r3, #16
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fecc 	bl	8004950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bba:	f000 fa3d 	bl	8004038 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bbe:	f000 fd11 	bl	80045e4 <xTaskResumeAll>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f47f af7c 	bne.w	8003ac2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <xQueueGenericSend+0x1f8>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	e772      	b.n	8003ac2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bde:	f000 fa2b 	bl	8004038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003be2:	f000 fcff 	bl	80045e4 <xTaskResumeAll>
 8003be6:	e76c      	b.n	8003ac2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bea:	f000 fa25 	bl	8004038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bee:	f000 fcf9 	bl	80045e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3738      	adds	r7, #56	; 0x38
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	623b      	str	r3, [r7, #32]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	61fb      	str	r3, [r7, #28]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <xQueueGiveFromISR+0x58>
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <xQueueGiveFromISR+0x5c>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <xQueueGiveFromISR+0x5e>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	61bb      	str	r3, [r7, #24]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c78:	f001 fc7e 	bl	8005578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c7c:	f3ef 8211 	mrs	r2, BASEPRI
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	617a      	str	r2, [r7, #20]
 8003c92:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c94:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d22b      	bcs.n	8003d00 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d112      	bne.n	8003cea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	3324      	adds	r3, #36	; 0x24
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fe61 	bl	8004998 <xTaskRemoveFromEventList>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e007      	b.n	8003cfa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cee:	3301      	adds	r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	b25a      	sxtb	r2, r3
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cfe:	e001      	b.n	8003d04 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3738      	adds	r7, #56	; 0x38
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08e      	sub	sp, #56	; 0x38
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	623b      	str	r3, [r7, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	61fb      	str	r3, [r7, #28]
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d6c:	f000 ffd6 	bl	8004d1c <xTaskGetSchedulerState>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <xQueueSemaphoreTake+0x60>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <xQueueSemaphoreTake+0x64>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <xQueueSemaphoreTake+0x66>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	61bb      	str	r3, [r7, #24]
}
 8003d98:	bf00      	nop
 8003d9a:	e7fe      	b.n	8003d9a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d9c:	f001 fb0a 	bl	80053b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d024      	beq.n	8003df6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	1e5a      	subs	r2, r3, #1
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003dbc:	f001 f956 	bl	800506c <pvTaskIncrementMutexHeldCount>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00f      	beq.n	8003dee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	3310      	adds	r3, #16
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fde0 	bl	8004998 <xTaskRemoveFromEventList>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dde:	4b54      	ldr	r3, [pc, #336]	; (8003f30 <xQueueSemaphoreTake+0x214>)
 8003de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dee:	f001 fb11 	bl	8005414 <vPortExitCritical>
				return pdPASS;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e097      	b.n	8003f26 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d111      	bne.n	8003e20 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	617b      	str	r3, [r7, #20]
}
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e18:	f001 fafc 	bl	8005414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e082      	b.n	8003f26 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fe16 	bl	8004a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e34:	f001 faee 	bl	8005414 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e38:	f000 fbc6 	bl	80045c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e3c:	f001 faba 	bl	80053b4 <vPortEnterCritical>
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d103      	bne.n	8003e56 <xQueueSemaphoreTake+0x13a>
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d103      	bne.n	8003e6c <xQueueSemaphoreTake+0x150>
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e6c:	f001 fad2 	bl	8005414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e70:	463a      	mov	r2, r7
 8003e72:	f107 030c 	add.w	r3, r7, #12
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fe05 	bl	8004a88 <xTaskCheckForTimeOut>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d132      	bne.n	8003eea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e86:	f000 f929 	bl	80040dc <prvIsQueueEmpty>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d026      	beq.n	8003ede <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e98:	f001 fa8c 	bl	80053b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 ff59 	bl	8004d58 <xTaskPriorityInherit>
 8003ea6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ea8:	f001 fab4 	bl	8005414 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	3324      	adds	r3, #36	; 0x24
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fd4b 	bl	8004950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ebc:	f000 f8bc 	bl	8004038 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ec0:	f000 fb90 	bl	80045e4 <xTaskResumeAll>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f47f af68 	bne.w	8003d9c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <xQueueSemaphoreTake+0x214>)
 8003ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	e75e      	b.n	8003d9c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ee0:	f000 f8aa 	bl	8004038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ee4:	f000 fb7e 	bl	80045e4 <xTaskResumeAll>
 8003ee8:	e758      	b.n	8003d9c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003eea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eec:	f000 f8a4 	bl	8004038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef0:	f000 fb78 	bl	80045e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ef6:	f000 f8f1 	bl	80040dc <prvIsQueueEmpty>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f43f af4d 	beq.w	8003d9c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f08:	f001 fa54 	bl	80053b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f0e:	f000 f811 	bl	8003f34 <prvGetDisinheritPriorityAfterTimeout>
 8003f12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 f818 	bl	8004f50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f20:	f001 fa78 	bl	8005414 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3738      	adds	r7, #56	; 0x38
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d006      	beq.n	8003f52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1c3 0307 	rsb	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e001      	b.n	8003f56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f56:	68fb      	ldr	r3, [r7, #12]
	}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d14d      	bne.n	8004026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 ff58 	bl	8004e44 <xTaskPriorityDisinherit>
 8003f94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	e043      	b.n	8004026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d119      	bne.n	8003fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6858      	ldr	r0, [r3, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	461a      	mov	r2, r3
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	f001 fd38 	bl	8005a24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d32b      	bcc.n	8004026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	e026      	b.n	8004026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68d8      	ldr	r0, [r3, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	f001 fd1e 	bl	8005a24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d207      	bcs.n	8004014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	425b      	negs	r3, r3
 800400e:	441a      	add	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d105      	bne.n	8004026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	3b01      	subs	r3, #1
 8004024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800402e:	697b      	ldr	r3, [r7, #20]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004040:	f001 f9b8 	bl	80053b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800404a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800404c:	e011      	b.n	8004072 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d012      	beq.n	800407c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3324      	adds	r3, #36	; 0x24
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fc9c 	bl	8004998 <xTaskRemoveFromEventList>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004066:	f000 fd71 	bl	8004b4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	3b01      	subs	r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	dce9      	bgt.n	800404e <prvUnlockQueue+0x16>
 800407a:	e000      	b.n	800407e <prvUnlockQueue+0x46>
					break;
 800407c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	22ff      	movs	r2, #255	; 0xff
 8004082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004086:	f001 f9c5 	bl	8005414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800408a:	f001 f993 	bl	80053b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004094:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004096:	e011      	b.n	80040bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d012      	beq.n	80040c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3310      	adds	r3, #16
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fc77 	bl	8004998 <xTaskRemoveFromEventList>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040b0:	f000 fd4c 	bl	8004b4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040b4:	7bbb      	ldrb	r3, [r7, #14]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	dce9      	bgt.n	8004098 <prvUnlockQueue+0x60>
 80040c4:	e000      	b.n	80040c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040d0:	f001 f9a0 	bl	8005414 <vPortExitCritical>
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e4:	f001 f966 	bl	80053b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e001      	b.n	80040fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040fa:	f001 f98b 	bl	8005414 <vPortExitCritical>

	return xReturn;
 80040fe:	68fb      	ldr	r3, [r7, #12]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004110:	f001 f950 	bl	80053b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	429a      	cmp	r2, r3
 800411e:	d102      	bne.n	8004126 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e001      	b.n	800412a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800412a:	f001 f973 	bl	8005414 <vPortExitCritical>

	return xReturn;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	; 0x38
 800413c:	af04      	add	r7, sp, #16
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xTaskCreateStatic+0x2a>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	623b      	str	r3, [r7, #32]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <xTaskCreateStatic+0x46>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	61fb      	str	r3, [r7, #28]
}
 800417a:	bf00      	nop
 800417c:	e7fe      	b.n	800417c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800417e:	23b4      	movs	r3, #180	; 0xb4
 8004180:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2bb4      	cmp	r3, #180	; 0xb4
 8004186:	d00a      	beq.n	800419e <xTaskCreateStatic+0x66>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	61bb      	str	r3, [r7, #24]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800419e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01e      	beq.n	80041e4 <xTaskCreateStatic+0xac>
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01b      	beq.n	80041e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041be:	2300      	movs	r3, #0
 80041c0:	9303      	str	r3, [sp, #12]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	9302      	str	r3, [sp, #8]
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f850 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041de:	f000 f8eb 	bl	80043b8 <prvAddNewTaskToReadyList>
 80041e2:	e001      	b.n	80041e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041e8:	697b      	ldr	r3, [r7, #20]
	}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b08c      	sub	sp, #48	; 0x30
 80041f6:	af04      	add	r7, sp, #16
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f001 f9f6 	bl	80055f8 <pvPortMalloc>
 800420c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004214:	20b4      	movs	r0, #180	; 0xb4
 8004216:	f001 f9ef 	bl	80055f8 <pvPortMalloc>
 800421a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
 8004228:	e005      	b.n	8004236 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f001 fab0 	bl	8005790 <vPortFree>
 8004230:	e001      	b.n	8004236 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d017      	beq.n	800426c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	2300      	movs	r3, #0
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f80e 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004260:	69f8      	ldr	r0, [r7, #28]
 8004262:	f000 f8a9 	bl	80043b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e002      	b.n	8004272 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
 8004270:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004272:	69bb      	ldr	r3, [r7, #24]
	}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004294:	3b01      	subs	r3, #1
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	617b      	str	r3, [r7, #20]
}
 80042c0:	bf00      	nop
 80042c2:	e7fe      	b.n	80042c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01f      	beq.n	800430a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e012      	b.n	80042f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	7819      	ldrb	r1, [r3, #0]
 80042d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	3334      	adds	r3, #52	; 0x34
 80042e0:	460a      	mov	r2, r1
 80042e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d006      	beq.n	80042fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	3301      	adds	r3, #1
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b0f      	cmp	r3, #15
 80042fa:	d9e9      	bls.n	80042d0 <prvInitialiseNewTask+0x54>
 80042fc:	e000      	b.n	8004300 <prvInitialiseNewTask+0x84>
			{
				break;
 80042fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004308:	e003      	b.n	8004312 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	2b06      	cmp	r3, #6
 8004316:	d901      	bls.n	800431c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004318:	2306      	movs	r3, #6
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004326:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	2200      	movs	r2, #0
 800432c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fa0f 	bl	8003756 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	3318      	adds	r3, #24
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fa0a 	bl	8003756 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	f1c3 0207 	rsb	r2, r3, #7
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	2200      	movs	r2, #0
 800435c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	2200      	movs	r2, #0
 8004364:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	334c      	adds	r3, #76	; 0x4c
 800436c:	2260      	movs	r2, #96	; 0x60
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f001 fb65 	bl	8005a40 <memset>
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <prvInitialiseNewTask+0x130>)
 800437a:	651a      	str	r2, [r3, #80]	; 0x50
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <prvInitialiseNewTask+0x134>)
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	4a0b      	ldr	r2, [pc, #44]	; (80043b4 <prvInitialiseNewTask+0x138>)
 8004386:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	69b8      	ldr	r0, [r7, #24]
 800438e:	f000 fee7 	bl	8005160 <pxPortInitialiseStack>
 8004392:	4602      	mov	r2, r0
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a4:	bf00      	nop
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	0800648c 	.word	0x0800648c
 80043b0:	080064ac 	.word	0x080064ac
 80043b4:	0800646c 	.word	0x0800646c

080043b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043c0:	f000 fff8 	bl	80053b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043c4:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <prvAddNewTaskToReadyList+0xb8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a29      	ldr	r2, [pc, #164]	; (8004470 <prvAddNewTaskToReadyList+0xb8>)
 80043cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ce:	4b29      	ldr	r3, [pc, #164]	; (8004474 <prvAddNewTaskToReadyList+0xbc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043d6:	4a27      	ldr	r2, [pc, #156]	; (8004474 <prvAddNewTaskToReadyList+0xbc>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043dc:	4b24      	ldr	r3, [pc, #144]	; (8004470 <prvAddNewTaskToReadyList+0xb8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d110      	bne.n	8004406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043e4:	f000 fbd8 	bl	8004b98 <prvInitialiseTaskLists>
 80043e8:	e00d      	b.n	8004406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <prvAddNewTaskToReadyList+0xc0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <prvAddNewTaskToReadyList+0xbc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d802      	bhi.n	8004406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004400:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <prvAddNewTaskToReadyList+0xbc>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004406:	4b1d      	ldr	r3, [pc, #116]	; (800447c <prvAddNewTaskToReadyList+0xc4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	4a1b      	ldr	r2, [pc, #108]	; (800447c <prvAddNewTaskToReadyList+0xc4>)
 800440e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <prvAddNewTaskToReadyList+0xc8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4313      	orrs	r3, r2
 800441e:	4a18      	ldr	r2, [pc, #96]	; (8004480 <prvAddNewTaskToReadyList+0xc8>)
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <prvAddNewTaskToReadyList+0xcc>)
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7ff f999 	bl	8003770 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800443e:	f000 ffe9 	bl	8005414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <prvAddNewTaskToReadyList+0xc0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <prvAddNewTaskToReadyList+0xbc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	429a      	cmp	r2, r3
 8004456:	d207      	bcs.n	8004468 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <prvAddNewTaskToReadyList+0xd0>)
 800445a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	2000058c 	.word	0x2000058c
 8004474:	2000048c 	.word	0x2000048c
 8004478:	20000598 	.word	0x20000598
 800447c:	200005a8 	.word	0x200005a8
 8004480:	20000594 	.word	0x20000594
 8004484:	20000490 	.word	0x20000490
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d017      	beq.n	80044ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <vTaskDelay+0x60>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <vTaskDelay+0x30>
	__asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	60bb      	str	r3, [r7, #8]
}
 80044b8:	bf00      	nop
 80044ba:	e7fe      	b.n	80044ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044bc:	f000 f884 	bl	80045c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044c0:	2100      	movs	r1, #0
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fde6 	bl	8005094 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044c8:	f000 f88c 	bl	80045e4 <xTaskResumeAll>
 80044cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d107      	bne.n	80044e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <vTaskDelay+0x64>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	200005b4 	.word	0x200005b4
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004502:	463a      	mov	r2, r7
 8004504:	1d39      	adds	r1, r7, #4
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc f842 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	9202      	str	r2, [sp, #8]
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2300      	movs	r3, #0
 8004520:	460a      	mov	r2, r1
 8004522:	4921      	ldr	r1, [pc, #132]	; (80045a8 <vTaskStartScheduler+0xb4>)
 8004524:	4821      	ldr	r0, [pc, #132]	; (80045ac <vTaskStartScheduler+0xb8>)
 8004526:	f7ff fe07 	bl	8004138 <xTaskCreateStatic>
 800452a:	4603      	mov	r3, r0
 800452c:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <vTaskStartScheduler+0xbc>)
 800452e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <vTaskStartScheduler+0xbc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004538:	2301      	movs	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e001      	b.n	8004542 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d11b      	bne.n	8004580 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	613b      	str	r3, [r7, #16]
}
 800455a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800455c:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <vTaskStartScheduler+0xc0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	334c      	adds	r3, #76	; 0x4c
 8004562:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <vTaskStartScheduler+0xc4>)
 8004564:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <vTaskStartScheduler+0xc8>)
 8004568:	f04f 32ff 	mov.w	r2, #4294967295
 800456c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800456e:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <vTaskStartScheduler+0xcc>)
 8004570:	2201      	movs	r2, #1
 8004572:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004574:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <vTaskStartScheduler+0xd0>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800457a:	f000 fe79 	bl	8005270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800457e:	e00e      	b.n	800459e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d10a      	bne.n	800459e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	60fb      	str	r3, [r7, #12]
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <vTaskStartScheduler+0xa8>
}
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	0800644c 	.word	0x0800644c
 80045ac:	08004b65 	.word	0x08004b65
 80045b0:	200005b0 	.word	0x200005b0
 80045b4:	2000048c 	.word	0x2000048c
 80045b8:	20000010 	.word	0x20000010
 80045bc:	200005ac 	.word	0x200005ac
 80045c0:	20000598 	.word	0x20000598
 80045c4:	20000590 	.word	0x20000590

080045c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <vTaskSuspendAll+0x18>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4a03      	ldr	r2, [pc, #12]	; (80045e0 <vTaskSuspendAll+0x18>)
 80045d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	200005b4 	.word	0x200005b4

080045e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045f2:	4b41      	ldr	r3, [pc, #260]	; (80046f8 <xTaskResumeAll+0x114>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <xTaskResumeAll+0x2c>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	603b      	str	r3, [r7, #0]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004610:	f000 fed0 	bl	80053b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004614:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <xTaskResumeAll+0x114>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3b01      	subs	r3, #1
 800461a:	4a37      	ldr	r2, [pc, #220]	; (80046f8 <xTaskResumeAll+0x114>)
 800461c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800461e:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <xTaskResumeAll+0x114>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d161      	bne.n	80046ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004626:	4b35      	ldr	r3, [pc, #212]	; (80046fc <xTaskResumeAll+0x118>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d05d      	beq.n	80046ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800462e:	e02e      	b.n	800468e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004630:	4b33      	ldr	r3, [pc, #204]	; (8004700 <xTaskResumeAll+0x11c>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3318      	adds	r3, #24
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff f8f4 	bl	800382a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3304      	adds	r3, #4
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff f8ef 	bl	800382a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	2201      	movs	r2, #1
 8004652:	409a      	lsls	r2, r3
 8004654:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <xTaskResumeAll+0x120>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	4a2a      	ldr	r2, [pc, #168]	; (8004704 <xTaskResumeAll+0x120>)
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4a27      	ldr	r2, [pc, #156]	; (8004708 <xTaskResumeAll+0x124>)
 800466c:	441a      	add	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f7ff f87b 	bl	8003770 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <xTaskResumeAll+0x128>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	429a      	cmp	r2, r3
 8004686:	d302      	bcc.n	800468e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <xTaskResumeAll+0x12c>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800468e:	4b1c      	ldr	r3, [pc, #112]	; (8004700 <xTaskResumeAll+0x11c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1cc      	bne.n	8004630 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800469c:	f000 fb1e 	bl	8004cdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046a0:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <xTaskResumeAll+0x130>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046ac:	f000 f836 	bl	800471c <xTaskIncrementTick>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <xTaskResumeAll+0x12c>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f1      	bne.n	80046ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80046c8:	4b12      	ldr	r3, [pc, #72]	; (8004714 <xTaskResumeAll+0x130>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <xTaskResumeAll+0x12c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046d6:	2301      	movs	r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046da:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <xTaskResumeAll+0x134>)
 80046dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046ea:	f000 fe93 	bl	8005414 <vPortExitCritical>

	return xAlreadyYielded;
 80046ee:	68bb      	ldr	r3, [r7, #8]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	200005b4 	.word	0x200005b4
 80046fc:	2000058c 	.word	0x2000058c
 8004700:	2000054c 	.word	0x2000054c
 8004704:	20000594 	.word	0x20000594
 8004708:	20000490 	.word	0x20000490
 800470c:	2000048c 	.word	0x2000048c
 8004710:	200005a0 	.word	0x200005a0
 8004714:	2000059c 	.word	0x2000059c
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004726:	4b4e      	ldr	r3, [pc, #312]	; (8004860 <xTaskIncrementTick+0x144>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 808e 	bne.w	800484c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004730:	4b4c      	ldr	r3, [pc, #304]	; (8004864 <xTaskIncrementTick+0x148>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004738:	4a4a      	ldr	r2, [pc, #296]	; (8004864 <xTaskIncrementTick+0x148>)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d120      	bne.n	8004786 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004744:	4b48      	ldr	r3, [pc, #288]	; (8004868 <xTaskIncrementTick+0x14c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <xTaskIncrementTick+0x48>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	603b      	str	r3, [r7, #0]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <xTaskIncrementTick+0x46>
 8004764:	4b40      	ldr	r3, [pc, #256]	; (8004868 <xTaskIncrementTick+0x14c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b40      	ldr	r3, [pc, #256]	; (800486c <xTaskIncrementTick+0x150>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3e      	ldr	r2, [pc, #248]	; (8004868 <xTaskIncrementTick+0x14c>)
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4a3e      	ldr	r2, [pc, #248]	; (800486c <xTaskIncrementTick+0x150>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <xTaskIncrementTick+0x154>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3301      	adds	r3, #1
 800477e:	4a3c      	ldr	r2, [pc, #240]	; (8004870 <xTaskIncrementTick+0x154>)
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	f000 faab 	bl	8004cdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <xTaskIncrementTick+0x158>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d348      	bcc.n	8004822 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004790:	4b35      	ldr	r3, [pc, #212]	; (8004868 <xTaskIncrementTick+0x14c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479a:	4b36      	ldr	r3, [pc, #216]	; (8004874 <xTaskIncrementTick+0x158>)
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	601a      	str	r2, [r3, #0]
					break;
 80047a2:	e03e      	b.n	8004822 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a4:	4b30      	ldr	r3, [pc, #192]	; (8004868 <xTaskIncrementTick+0x14c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d203      	bcs.n	80047c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047bc:	4a2d      	ldr	r2, [pc, #180]	; (8004874 <xTaskIncrementTick+0x158>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047c2:	e02e      	b.n	8004822 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f82e 	bl	800382a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3318      	adds	r3, #24
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f825 	bl	800382a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	2201      	movs	r2, #1
 80047e6:	409a      	lsls	r2, r3
 80047e8:	4b23      	ldr	r3, [pc, #140]	; (8004878 <xTaskIncrementTick+0x15c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	4a22      	ldr	r2, [pc, #136]	; (8004878 <xTaskIncrementTick+0x15c>)
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4a1f      	ldr	r2, [pc, #124]	; (800487c <xTaskIncrementTick+0x160>)
 8004800:	441a      	add	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f7fe ffb1 	bl	8003770 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <xTaskIncrementTick+0x164>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d3b9      	bcc.n	8004790 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800481c:	2301      	movs	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004820:	e7b6      	b.n	8004790 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <xTaskIncrementTick+0x164>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	4914      	ldr	r1, [pc, #80]	; (800487c <xTaskIncrementTick+0x160>)
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d901      	bls.n	800483e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800483a:	2301      	movs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <xTaskIncrementTick+0x168>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004846:	2301      	movs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e004      	b.n	8004856 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <xTaskIncrementTick+0x16c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	4a0d      	ldr	r2, [pc, #52]	; (8004888 <xTaskIncrementTick+0x16c>)
 8004854:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004856:	697b      	ldr	r3, [r7, #20]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	200005b4 	.word	0x200005b4
 8004864:	20000590 	.word	0x20000590
 8004868:	20000544 	.word	0x20000544
 800486c:	20000548 	.word	0x20000548
 8004870:	200005a4 	.word	0x200005a4
 8004874:	200005ac 	.word	0x200005ac
 8004878:	20000594 	.word	0x20000594
 800487c:	20000490 	.word	0x20000490
 8004880:	2000048c 	.word	0x2000048c
 8004884:	200005a0 	.word	0x200005a0
 8004888:	2000059c 	.word	0x2000059c

0800488c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004892:	4b29      	ldr	r3, [pc, #164]	; (8004938 <vTaskSwitchContext+0xac>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800489a:	4b28      	ldr	r3, [pc, #160]	; (800493c <vTaskSwitchContext+0xb0>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048a0:	e044      	b.n	800492c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <vTaskSwitchContext+0xb0>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <vTaskSwitchContext+0xb4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048b6:	7afb      	ldrb	r3, [r7, #11]
 80048b8:	f1c3 031f 	rsb	r3, r3, #31
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	4921      	ldr	r1, [pc, #132]	; (8004944 <vTaskSwitchContext+0xb8>)
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	607b      	str	r3, [r7, #4]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <vTaskSwitchContext+0x5a>
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4a14      	ldr	r2, [pc, #80]	; (8004944 <vTaskSwitchContext+0xb8>)
 80048f4:	4413      	add	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3308      	adds	r3, #8
 800490a:	429a      	cmp	r2, r3
 800490c:	d104      	bne.n	8004918 <vTaskSwitchContext+0x8c>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	605a      	str	r2, [r3, #4]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <vTaskSwitchContext+0xbc>)
 8004920:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <vTaskSwitchContext+0xbc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	334c      	adds	r3, #76	; 0x4c
 8004928:	4a08      	ldr	r2, [pc, #32]	; (800494c <vTaskSwitchContext+0xc0>)
 800492a:	6013      	str	r3, [r2, #0]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	200005b4 	.word	0x200005b4
 800493c:	200005a0 	.word	0x200005a0
 8004940:	20000594 	.word	0x20000594
 8004944:	20000490 	.word	0x20000490
 8004948:	2000048c 	.word	0x2000048c
 800494c:	20000010 	.word	0x20000010

08004950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60fb      	str	r3, [r7, #12]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <vTaskPlaceOnEventList+0x44>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3318      	adds	r3, #24
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fe ff1a 	bl	80037b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004984:	2101      	movs	r1, #1
 8004986:	6838      	ldr	r0, [r7, #0]
 8004988:	f000 fb84 	bl	8005094 <prvAddCurrentTaskToDelayedList>
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	2000048c 	.word	0x2000048c

08004998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	60fb      	str	r3, [r7, #12]
}
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3318      	adds	r3, #24
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe ff2e 	bl	800382a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <xTaskRemoveFromEventList+0xac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11c      	bne.n	8004a10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	3304      	adds	r3, #4
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe ff25 	bl	800382a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	2201      	movs	r2, #1
 80049e6:	409a      	lsls	r2, r3
 80049e8:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <xTaskRemoveFromEventList+0xb0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <xTaskRemoveFromEventList+0xb0>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <xTaskRemoveFromEventList+0xb4>)
 8004a00:	441a      	add	r2, r3
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7fe feb1 	bl	8003770 <vListInsertEnd>
 8004a0e:	e005      	b.n	8004a1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3318      	adds	r3, #24
 8004a14:	4619      	mov	r1, r3
 8004a16:	480e      	ldr	r0, [pc, #56]	; (8004a50 <xTaskRemoveFromEventList+0xb8>)
 8004a18:	f7fe feaa 	bl	8003770 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <xTaskRemoveFromEventList+0xbc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d905      	bls.n	8004a36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <xTaskRemoveFromEventList+0xc0>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e001      	b.n	8004a3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a3a:	697b      	ldr	r3, [r7, #20]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	200005b4 	.word	0x200005b4
 8004a48:	20000594 	.word	0x20000594
 8004a4c:	20000490 	.word	0x20000490
 8004a50:	2000054c 	.word	0x2000054c
 8004a54:	2000048c 	.word	0x2000048c
 8004a58:	200005a0 	.word	0x200005a0

08004a5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <vTaskInternalSetTimeOutState+0x24>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <vTaskInternalSetTimeOutState+0x28>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	605a      	str	r2, [r3, #4]
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	200005a4 	.word	0x200005a4
 8004a84:	20000590 	.word	0x20000590

08004a88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	613b      	str	r3, [r7, #16]
}
 8004aaa:	bf00      	nop
 8004aac:	e7fe      	b.n	8004aac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004aca:	f000 fc73 	bl	80053b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <xTaskCheckForTimeOut+0xbc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d102      	bne.n	8004aee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e023      	b.n	8004b36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <xTaskCheckForTimeOut+0xc0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d007      	beq.n	8004b0a <xTaskCheckForTimeOut+0x82>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	e015      	b.n	8004b36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d20b      	bcs.n	8004b2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad2      	subs	r2, r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff ff9b 	bl	8004a5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e004      	b.n	8004b36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b32:	2301      	movs	r3, #1
 8004b34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b36:	f000 fc6d 	bl	8005414 <vPortExitCritical>

	return xReturn;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000590 	.word	0x20000590
 8004b48:	200005a4 	.word	0x200005a4

08004b4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <vTaskMissedYield+0x14>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	200005a0 	.word	0x200005a0

08004b64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b6c:	f000 f854 	bl	8004c18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <prvIdleTask+0x2c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d907      	bls.n	8004b88 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <prvIdleTask+0x30>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004b88:	f7fb fcfc 	bl	8000584 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004b8c:	e7ee      	b.n	8004b6c <prvIdleTask+0x8>
 8004b8e:	bf00      	nop
 8004b90:	20000490 	.word	0x20000490
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	e00c      	b.n	8004bbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <prvInitialiseTaskLists+0x60>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe fdaf 	bl	8003716 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b06      	cmp	r3, #6
 8004bc2:	d9ef      	bls.n	8004ba4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bc4:	480d      	ldr	r0, [pc, #52]	; (8004bfc <prvInitialiseTaskLists+0x64>)
 8004bc6:	f7fe fda6 	bl	8003716 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bca:	480d      	ldr	r0, [pc, #52]	; (8004c00 <prvInitialiseTaskLists+0x68>)
 8004bcc:	f7fe fda3 	bl	8003716 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bd0:	480c      	ldr	r0, [pc, #48]	; (8004c04 <prvInitialiseTaskLists+0x6c>)
 8004bd2:	f7fe fda0 	bl	8003716 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bd6:	480c      	ldr	r0, [pc, #48]	; (8004c08 <prvInitialiseTaskLists+0x70>)
 8004bd8:	f7fe fd9d 	bl	8003716 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bdc:	480b      	ldr	r0, [pc, #44]	; (8004c0c <prvInitialiseTaskLists+0x74>)
 8004bde:	f7fe fd9a 	bl	8003716 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <prvInitialiseTaskLists+0x78>)
 8004be4:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <prvInitialiseTaskLists+0x64>)
 8004be6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <prvInitialiseTaskLists+0x7c>)
 8004bea:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <prvInitialiseTaskLists+0x68>)
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000490 	.word	0x20000490
 8004bfc:	2000051c 	.word	0x2000051c
 8004c00:	20000530 	.word	0x20000530
 8004c04:	2000054c 	.word	0x2000054c
 8004c08:	20000560 	.word	0x20000560
 8004c0c:	20000578 	.word	0x20000578
 8004c10:	20000544 	.word	0x20000544
 8004c14:	20000548 	.word	0x20000548

08004c18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c1e:	e019      	b.n	8004c54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c20:	f000 fbc8 	bl	80053b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c24:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <prvCheckTasksWaitingTermination+0x50>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe fdfa 	bl	800382a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <prvCheckTasksWaitingTermination+0x54>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	4a0b      	ldr	r2, [pc, #44]	; (8004c6c <prvCheckTasksWaitingTermination+0x54>)
 8004c3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <prvCheckTasksWaitingTermination+0x58>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <prvCheckTasksWaitingTermination+0x58>)
 8004c48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c4a:	f000 fbe3 	bl	8005414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f810 	bl	8004c74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <prvCheckTasksWaitingTermination+0x58>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e1      	bne.n	8004c20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000560 	.word	0x20000560
 8004c6c:	2000058c 	.word	0x2000058c
 8004c70:	20000574 	.word	0x20000574

08004c74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	334c      	adds	r3, #76	; 0x4c
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 ff87 	bl	8005b94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d108      	bne.n	8004ca2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fd7b 	bl	8005790 <vPortFree>
				vPortFree( pxTCB );
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fd78 	bl	8005790 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ca0:	e018      	b.n	8004cd4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d103      	bne.n	8004cb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fd6f 	bl	8005790 <vPortFree>
	}
 8004cb2:	e00f      	b.n	8004cd4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d00a      	beq.n	8004cd4 <prvDeleteTCB+0x60>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60fb      	str	r3, [r7, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <prvDeleteTCB+0x5e>
	}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <prvResetNextTaskUnblockTime+0x38>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <prvResetNextTaskUnblockTime+0x3c>)
 8004cee:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cf4:	e008      	b.n	8004d08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <prvResetNextTaskUnblockTime+0x38>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <prvResetNextTaskUnblockTime+0x3c>)
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	20000544 	.word	0x20000544
 8004d18:	200005ac 	.word	0x200005ac

08004d1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <xTaskGetSchedulerState+0x34>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	607b      	str	r3, [r7, #4]
 8004d2e:	e008      	b.n	8004d42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <xTaskGetSchedulerState+0x38>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	e001      	b.n	8004d42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d42:	687b      	ldr	r3, [r7, #4]
	}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000598 	.word	0x20000598
 8004d54:	200005b4 	.word	0x200005b4

08004d58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d05e      	beq.n	8004e2c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <xTaskPriorityInherit+0xe0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d24e      	bcs.n	8004e1a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	db06      	blt.n	8004d92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d84:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <xTaskPriorityInherit+0xe0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	f1c3 0207 	rsb	r2, r3, #7
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6959      	ldr	r1, [r3, #20]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <xTaskPriorityInherit+0xe4>)
 8004da4:	4413      	add	r3, r2
 8004da6:	4299      	cmp	r1, r3
 8004da8:	d12f      	bne.n	8004e0a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fd3b 	bl	800382a <uxListRemove>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <xTaskPriorityInherit+0xe8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <xTaskPriorityInherit+0xe8>)
 8004dce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dd0:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <xTaskPriorityInherit+0xe0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	2201      	movs	r2, #1
 8004de0:	409a      	lsls	r2, r3
 8004de2:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <xTaskPriorityInherit+0xe8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <xTaskPriorityInherit+0xe8>)
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4a10      	ldr	r2, [pc, #64]	; (8004e3c <xTaskPriorityInherit+0xe4>)
 8004dfa:	441a      	add	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7fe fcb4 	bl	8003770 <vListInsertEnd>
 8004e08:	e004      	b.n	8004e14 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <xTaskPriorityInherit+0xe0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e14:	2301      	movs	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e008      	b.n	8004e2c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <xTaskPriorityInherit+0xe0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d201      	bcs.n	8004e2c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
	}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000048c 	.word	0x2000048c
 8004e3c:	20000490 	.word	0x20000490
 8004e40:	20000594 	.word	0x20000594

08004e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d06e      	beq.n	8004f38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e5a:	4b3a      	ldr	r3, [pc, #232]	; (8004f44 <xTaskPriorityDisinherit+0x100>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d00a      	beq.n	8004e7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60fb      	str	r3, [r7, #12]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	60bb      	str	r3, [r7, #8]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	1e5a      	subs	r2, r3, #1
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d044      	beq.n	8004f38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d140      	bne.n	8004f38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe fcb5 	bl	800382a <uxListRemove>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d115      	bne.n	8004ef2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	491f      	ldr	r1, [pc, #124]	; (8004f48 <xTaskPriorityDisinherit+0x104>)
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xTaskPriorityDisinherit+0xae>
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43da      	mvns	r2, r3
 8004ee8:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <xTaskPriorityDisinherit+0x108>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4013      	ands	r3, r2
 8004eee:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <xTaskPriorityDisinherit+0x108>)
 8004ef0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f1c3 0207 	rsb	r2, r3, #7
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <xTaskPriorityDisinherit+0x108>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <xTaskPriorityDisinherit+0x108>)
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4a08      	ldr	r2, [pc, #32]	; (8004f48 <xTaskPriorityDisinherit+0x104>)
 8004f26:	441a      	add	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7fe fc1e 	bl	8003770 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f38:	697b      	ldr	r3, [r7, #20]
	}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2000048c 	.word	0x2000048c
 8004f48:	20000490 	.word	0x20000490
 8004f4c:	20000594 	.word	0x20000594

08004f50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d077      	beq.n	8005058 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d902      	bls.n	8004f96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e002      	b.n	8004f9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d058      	beq.n	8005058 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d153      	bne.n	8005058 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d10a      	bne.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	60bb      	str	r3, [r7, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db04      	blt.n	8004fee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f1c3 0207 	rsb	r2, r3, #7
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	6959      	ldr	r1, [r3, #20]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4a19      	ldr	r2, [pc, #100]	; (8005064 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004ffe:	4413      	add	r3, r2
 8005000:	4299      	cmp	r1, r3
 8005002:	d129      	bne.n	8005058 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	3304      	adds	r3, #4
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe fc0e 	bl	800382a <uxListRemove>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	2201      	movs	r2, #1
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43da      	mvns	r2, r3
 8005020:	4b11      	ldr	r3, [pc, #68]	; (8005068 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4013      	ands	r3, r2
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005028:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	2201      	movs	r2, #1
 8005030:	409a      	lsls	r2, r3
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4313      	orrs	r3, r2
 8005038:	4a0b      	ldr	r2, [pc, #44]	; (8005068 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4a06      	ldr	r2, [pc, #24]	; (8005064 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800504a:	441a      	add	r2, r3
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f7fe fb8c 	bl	8003770 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005058:	bf00      	nop
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	2000048c 	.word	0x2000048c
 8005064:	20000490 	.word	0x20000490
 8005068:	20000594 	.word	0x20000594

0800506c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <pvTaskIncrementMutexHeldCount+0x24>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d004      	beq.n	8005082 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <pvTaskIncrementMutexHeldCount+0x24>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800507e:	3201      	adds	r2, #1
 8005080:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005082:	4b03      	ldr	r3, [pc, #12]	; (8005090 <pvTaskIncrementMutexHeldCount+0x24>)
 8005084:	681b      	ldr	r3, [r3, #0]
	}
 8005086:	4618      	mov	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	2000048c 	.word	0x2000048c

08005094 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800509e:	4b29      	ldr	r3, [pc, #164]	; (8005144 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050a4:	4b28      	ldr	r3, [pc, #160]	; (8005148 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe fbbd 	bl	800382a <uxListRemove>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050b6:	4b24      	ldr	r3, [pc, #144]	; (8005148 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	2201      	movs	r2, #1
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43da      	mvns	r2, r3
 80050c4:	4b21      	ldr	r3, [pc, #132]	; (800514c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4013      	ands	r3, r2
 80050ca:	4a20      	ldr	r2, [pc, #128]	; (800514c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d10a      	bne.n	80050ec <prvAddCurrentTaskToDelayedList+0x58>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050dc:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	481a      	ldr	r0, [pc, #104]	; (8005150 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050e6:	f7fe fb43 	bl	8003770 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050ea:	e026      	b.n	800513a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050f4:	4b14      	ldr	r3, [pc, #80]	; (8005148 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	429a      	cmp	r2, r3
 8005102:	d209      	bcs.n	8005118 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fe fb51 	bl	80037b8 <vListInsert>
}
 8005116:	e010      	b.n	800513a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <prvAddCurrentTaskToDelayedList+0xc4>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe fb47 	bl	80037b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800512a:	4b0c      	ldr	r3, [pc, #48]	; (800515c <prvAddCurrentTaskToDelayedList+0xc8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	d202      	bcs.n	800513a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005134:	4a09      	ldr	r2, [pc, #36]	; (800515c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6013      	str	r3, [r2, #0]
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000590 	.word	0x20000590
 8005148:	2000048c 	.word	0x2000048c
 800514c:	20000594 	.word	0x20000594
 8005150:	20000578 	.word	0x20000578
 8005154:	20000548 	.word	0x20000548
 8005158:	20000544 	.word	0x20000544
 800515c:	200005ac 	.word	0x200005ac

08005160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3b04      	subs	r3, #4
 8005170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3b04      	subs	r3, #4
 800517e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3b04      	subs	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005190:	4a0c      	ldr	r2, [pc, #48]	; (80051c4 <pxPortInitialiseStack+0x64>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3b14      	subs	r3, #20
 800519a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b04      	subs	r3, #4
 80051a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f06f 0202 	mvn.w	r2, #2
 80051ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3b20      	subs	r3, #32
 80051b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051b6:	68fb      	ldr	r3, [r7, #12]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	080051c9 	.word	0x080051c9

080051c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <prvTaskExitError+0x54>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d00a      	beq.n	80051f2 <prvTaskExitError+0x2a>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <prvTaskExitError+0x28>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	60bb      	str	r3, [r7, #8]
}
 8005204:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005206:	bf00      	nop
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0fc      	beq.n	8005208 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	2000000c 	.word	0x2000000c

08005220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <pxCurrentTCBConst2>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	6808      	ldr	r0, [r1, #0]
 8005226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522a:	f380 8809 	msr	PSP, r0
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8811 	msr	BASEPRI, r0
 800523a:	4770      	bx	lr
 800523c:	f3af 8000 	nop.w

08005240 <pxCurrentTCBConst2>:
 8005240:	2000048c 	.word	0x2000048c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005248:	4808      	ldr	r0, [pc, #32]	; (800526c <prvPortStartFirstTask+0x24>)
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	6800      	ldr	r0, [r0, #0]
 800524e:	f380 8808 	msr	MSP, r0
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8814 	msr	CONTROL, r0
 800525a:	b662      	cpsie	i
 800525c:	b661      	cpsie	f
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	df00      	svc	0
 8005268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800526a:	bf00      	nop
 800526c:	e000ed08 	.word	0xe000ed08

08005270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005276:	4b46      	ldr	r3, [pc, #280]	; (8005390 <xPortStartScheduler+0x120>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a46      	ldr	r2, [pc, #280]	; (8005394 <xPortStartScheduler+0x124>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10a      	bne.n	8005296 <xPortStartScheduler+0x26>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	613b      	str	r3, [r7, #16]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005296:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <xPortStartScheduler+0x120>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3f      	ldr	r2, [pc, #252]	; (8005398 <xPortStartScheduler+0x128>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10a      	bne.n	80052b6 <xPortStartScheduler+0x46>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	60fb      	str	r3, [r7, #12]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052b6:	4b39      	ldr	r3, [pc, #228]	; (800539c <xPortStartScheduler+0x12c>)
 80052b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	22ff      	movs	r2, #255	; 0xff
 80052c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <xPortStartScheduler+0x130>)
 80052dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052de:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <xPortStartScheduler+0x134>)
 80052e0:	2207      	movs	r2, #7
 80052e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e4:	e009      	b.n	80052fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80052e6:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <xPortStartScheduler+0x134>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	4a2d      	ldr	r2, [pc, #180]	; (80053a4 <xPortStartScheduler+0x134>)
 80052ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d0ef      	beq.n	80052e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <xPortStartScheduler+0x134>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1c3 0307 	rsb	r3, r3, #7
 800530e:	2b04      	cmp	r3, #4
 8005310:	d00a      	beq.n	8005328 <xPortStartScheduler+0xb8>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	60bb      	str	r3, [r7, #8]
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <xPortStartScheduler+0x134>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <xPortStartScheduler+0x134>)
 8005330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005332:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <xPortStartScheduler+0x134>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <xPortStartScheduler+0x134>)
 800533c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <xPortStartScheduler+0x138>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <xPortStartScheduler+0x138>)
 800534c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <xPortStartScheduler+0x138>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <xPortStartScheduler+0x138>)
 8005358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800535c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800535e:	f000 f8dd 	bl	800551c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005362:	4b12      	ldr	r3, [pc, #72]	; (80053ac <xPortStartScheduler+0x13c>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005368:	f000 f8fc 	bl	8005564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <xPortStartScheduler+0x140>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <xPortStartScheduler+0x140>)
 8005372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005378:	f7ff ff66 	bl	8005248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800537c:	f7ff fa86 	bl	800488c <vTaskSwitchContext>
	prvTaskExitError();
 8005380:	f7ff ff22 	bl	80051c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	e000ed00 	.word	0xe000ed00
 8005394:	410fc271 	.word	0x410fc271
 8005398:	410fc270 	.word	0x410fc270
 800539c:	e000e400 	.word	0xe000e400
 80053a0:	200005b8 	.word	0x200005b8
 80053a4:	200005bc 	.word	0x200005bc
 80053a8:	e000ed20 	.word	0xe000ed20
 80053ac:	2000000c 	.word	0x2000000c
 80053b0:	e000ef34 	.word	0xe000ef34

080053b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	607b      	str	r3, [r7, #4]
}
 80053cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053ce:	4b0f      	ldr	r3, [pc, #60]	; (800540c <vPortEnterCritical+0x58>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	4a0d      	ldr	r2, [pc, #52]	; (800540c <vPortEnterCritical+0x58>)
 80053d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <vPortEnterCritical+0x58>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10f      	bne.n	8005400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <vPortEnterCritical+0x5c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <vPortEnterCritical+0x4c>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	603b      	str	r3, [r7, #0]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <vPortEnterCritical+0x4a>
	}
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	2000000c 	.word	0x2000000c
 8005410:	e000ed04 	.word	0xe000ed04

08005414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <vPortExitCritical+0x50>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <vPortExitCritical+0x24>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	607b      	str	r3, [r7, #4]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <vPortExitCritical+0x50>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	4a09      	ldr	r2, [pc, #36]	; (8005464 <vPortExitCritical+0x50>)
 8005440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <vPortExitCritical+0x50>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d105      	bne.n	8005456 <vPortExitCritical+0x42>
 800544a:	2300      	movs	r3, #0
 800544c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	f383 8811 	msr	BASEPRI, r3
}
 8005454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	2000000c 	.word	0x2000000c
	...

08005470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005470:	f3ef 8009 	mrs	r0, PSP
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <pxCurrentTCBConst>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	f01e 0f10 	tst.w	lr, #16
 8005480:	bf08      	it	eq
 8005482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	6010      	str	r0, [r2, #0]
 800548c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005494:	f380 8811 	msr	BASEPRI, r0
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f7ff f9f4 	bl	800488c <vTaskSwitchContext>
 80054a4:	f04f 0000 	mov.w	r0, #0
 80054a8:	f380 8811 	msr	BASEPRI, r0
 80054ac:	bc09      	pop	{r0, r3}
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	6808      	ldr	r0, [r1, #0]
 80054b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b6:	f01e 0f10 	tst.w	lr, #16
 80054ba:	bf08      	it	eq
 80054bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054c0:	f380 8809 	msr	PSP, r0
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	f3af 8000 	nop.w

080054d0 <pxCurrentTCBConst>:
 80054d0:	2000048c 	.word	0x2000048c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	607b      	str	r3, [r7, #4]
}
 80054f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054f2:	f7ff f913 	bl	800471c <xTaskIncrementTick>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <SysTick_Handler+0x40>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f383 8811 	msr	BASEPRI, r3
}
 800550e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <vPortSetupTimerInterrupt+0x34>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005526:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <vPortSetupTimerInterrupt+0x38>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <vPortSetupTimerInterrupt+0x3c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <vPortSetupTimerInterrupt+0x40>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <vPortSetupTimerInterrupt+0x44>)
 800553a:	3b01      	subs	r3, #1
 800553c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800553e:	4b04      	ldr	r3, [pc, #16]	; (8005550 <vPortSetupTimerInterrupt+0x34>)
 8005540:	2207      	movs	r2, #7
 8005542:	601a      	str	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	e000e010 	.word	0xe000e010
 8005554:	e000e018 	.word	0xe000e018
 8005558:	20000000 	.word	0x20000000
 800555c:	10624dd3 	.word	0x10624dd3
 8005560:	e000e014 	.word	0xe000e014

08005564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005574 <vPortEnableVFP+0x10>
 8005568:	6801      	ldr	r1, [r0, #0]
 800556a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800556e:	6001      	str	r1, [r0, #0]
 8005570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005572:	bf00      	nop
 8005574:	e000ed88 	.word	0xe000ed88

08005578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800557e:	f3ef 8305 	mrs	r3, IPSR
 8005582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b0f      	cmp	r3, #15
 8005588:	d914      	bls.n	80055b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <vPortValidateInterruptPriority+0x70>)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005594:	4b15      	ldr	r3, [pc, #84]	; (80055ec <vPortValidateInterruptPriority+0x74>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	7afa      	ldrb	r2, [r7, #11]
 800559a:	429a      	cmp	r2, r3
 800559c:	d20a      	bcs.n	80055b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	607b      	str	r3, [r7, #4]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <vPortValidateInterruptPriority+0x78>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055bc:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <vPortValidateInterruptPriority+0x7c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d90a      	bls.n	80055da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	603b      	str	r3, [r7, #0]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <vPortValidateInterruptPriority+0x60>
	}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e3f0 	.word	0xe000e3f0
 80055ec:	200005b8 	.word	0x200005b8
 80055f0:	e000ed0c 	.word	0xe000ed0c
 80055f4:	200005bc 	.word	0x200005bc

080055f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005600:	2300      	movs	r3, #0
 8005602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005604:	f7fe ffe0 	bl	80045c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005608:	4b5b      	ldr	r3, [pc, #364]	; (8005778 <pvPortMalloc+0x180>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005610:	f000 f920 	bl	8005854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005614:	4b59      	ldr	r3, [pc, #356]	; (800577c <pvPortMalloc+0x184>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	f040 8093 	bne.w	8005748 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01d      	beq.n	8005664 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005628:	2208      	movs	r2, #8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4413      	add	r3, r2
 800562e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	2b00      	cmp	r3, #0
 8005638:	d014      	beq.n	8005664 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f023 0307 	bic.w	r3, r3, #7
 8005640:	3308      	adds	r3, #8
 8005642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <pvPortMalloc+0x6c>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	617b      	str	r3, [r7, #20]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d06e      	beq.n	8005748 <pvPortMalloc+0x150>
 800566a:	4b45      	ldr	r3, [pc, #276]	; (8005780 <pvPortMalloc+0x188>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d869      	bhi.n	8005748 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005674:	4b43      	ldr	r3, [pc, #268]	; (8005784 <pvPortMalloc+0x18c>)
 8005676:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005678:	4b42      	ldr	r3, [pc, #264]	; (8005784 <pvPortMalloc+0x18c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800567e:	e004      	b.n	800568a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d903      	bls.n	800569c <pvPortMalloc+0xa4>
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f1      	bne.n	8005680 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <pvPortMalloc+0x180>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d050      	beq.n	8005748 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2208      	movs	r2, #8
 80056ac:	4413      	add	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	2308      	movs	r3, #8
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d91f      	bls.n	8005708 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <pvPortMalloc+0xf8>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	613b      	str	r3, [r7, #16]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005702:	69b8      	ldr	r0, [r7, #24]
 8005704:	f000 f908 	bl	8005918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <pvPortMalloc+0x188>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <pvPortMalloc+0x188>)
 8005714:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005716:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <pvPortMalloc+0x188>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <pvPortMalloc+0x190>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d203      	bcs.n	800572a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005722:	4b17      	ldr	r3, [pc, #92]	; (8005780 <pvPortMalloc+0x188>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <pvPortMalloc+0x190>)
 8005728:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <pvPortMalloc+0x184>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	431a      	orrs	r2, r3
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <pvPortMalloc+0x194>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a11      	ldr	r2, [pc, #68]	; (800578c <pvPortMalloc+0x194>)
 8005746:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005748:	f7fe ff4c 	bl	80045e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <pvPortMalloc+0x174>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60fb      	str	r3, [r7, #12]
}
 8005768:	bf00      	nop
 800576a:	e7fe      	b.n	800576a <pvPortMalloc+0x172>
	return pvReturn;
 800576c:	69fb      	ldr	r3, [r7, #28]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200041c8 	.word	0x200041c8
 800577c:	200041dc 	.word	0x200041dc
 8005780:	200041cc 	.word	0x200041cc
 8005784:	200041c0 	.word	0x200041c0
 8005788:	200041d0 	.word	0x200041d0
 800578c:	200041d4 	.word	0x200041d4

08005790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04d      	beq.n	800583e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057a2:	2308      	movs	r3, #8
 80057a4:	425b      	negs	r3, r3
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4b24      	ldr	r3, [pc, #144]	; (8005848 <vPortFree+0xb8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <vPortFree+0x44>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60fb      	str	r3, [r7, #12]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <vPortFree+0x62>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60bb      	str	r3, [r7, #8]
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	4b14      	ldr	r3, [pc, #80]	; (8005848 <vPortFree+0xb8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01e      	beq.n	800583e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11a      	bne.n	800583e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <vPortFree+0xb8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	43db      	mvns	r3, r3
 8005812:	401a      	ands	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005818:	f7fe fed6 	bl	80045c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <vPortFree+0xbc>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4413      	add	r3, r2
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <vPortFree+0xbc>)
 8005828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800582a:	6938      	ldr	r0, [r7, #16]
 800582c:	f000 f874 	bl	8005918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <vPortFree+0xc0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	4a06      	ldr	r2, [pc, #24]	; (8005850 <vPortFree+0xc0>)
 8005838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800583a:	f7fe fed3 	bl	80045e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800583e:	bf00      	nop
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	200041dc 	.word	0x200041dc
 800584c:	200041cc 	.word	0x200041cc
 8005850:	200041d8 	.word	0x200041d8

08005854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800585a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800585e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005860:	4b27      	ldr	r3, [pc, #156]	; (8005900 <prvHeapInit+0xac>)
 8005862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3307      	adds	r3, #7
 8005872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0307 	bic.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <prvHeapInit+0xac>)
 8005884:	4413      	add	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800588c:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <prvHeapInit+0xb0>)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005892:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <prvHeapInit+0xb0>)
 8005894:	2200      	movs	r2, #0
 8005896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	4413      	add	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058a0:	2208      	movs	r2, #8
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a15      	ldr	r2, [pc, #84]	; (8005908 <prvHeapInit+0xb4>)
 80058b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058b6:	4b14      	ldr	r3, [pc, #80]	; (8005908 <prvHeapInit+0xb4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <prvHeapInit+0xb4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058d4:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <prvHeapInit+0xb4>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a0a      	ldr	r2, [pc, #40]	; (800590c <prvHeapInit+0xb8>)
 80058e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a09      	ldr	r2, [pc, #36]	; (8005910 <prvHeapInit+0xbc>)
 80058ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <prvHeapInit+0xc0>)
 80058ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058f2:	601a      	str	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	200005c0 	.word	0x200005c0
 8005904:	200041c0 	.word	0x200041c0
 8005908:	200041c8 	.word	0x200041c8
 800590c:	200041d0 	.word	0x200041d0
 8005910:	200041cc 	.word	0x200041cc
 8005914:	200041dc 	.word	0x200041dc

08005918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005920:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <prvInsertBlockIntoFreeList+0xac>)
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e002      	b.n	800592c <prvInsertBlockIntoFreeList+0x14>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d8f7      	bhi.n	8005926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4413      	add	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	d108      	bne.n	800595a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	441a      	add	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	441a      	add	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d118      	bne.n	80059a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d00d      	beq.n	8005996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	441a      	add	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e008      	b.n	80059a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	e003      	b.n	80059a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d002      	beq.n	80059b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	200041c0 	.word	0x200041c0
 80059c8:	200041c8 	.word	0x200041c8

080059cc <__errno>:
 80059cc:	4b01      	ldr	r3, [pc, #4]	; (80059d4 <__errno+0x8>)
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000010 	.word	0x20000010

080059d8 <__libc_init_array>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	4d0d      	ldr	r5, [pc, #52]	; (8005a10 <__libc_init_array+0x38>)
 80059dc:	4c0d      	ldr	r4, [pc, #52]	; (8005a14 <__libc_init_array+0x3c>)
 80059de:	1b64      	subs	r4, r4, r5
 80059e0:	10a4      	asrs	r4, r4, #2
 80059e2:	2600      	movs	r6, #0
 80059e4:	42a6      	cmp	r6, r4
 80059e6:	d109      	bne.n	80059fc <__libc_init_array+0x24>
 80059e8:	4d0b      	ldr	r5, [pc, #44]	; (8005a18 <__libc_init_array+0x40>)
 80059ea:	4c0c      	ldr	r4, [pc, #48]	; (8005a1c <__libc_init_array+0x44>)
 80059ec:	f000 fcf8 	bl	80063e0 <_init>
 80059f0:	1b64      	subs	r4, r4, r5
 80059f2:	10a4      	asrs	r4, r4, #2
 80059f4:	2600      	movs	r6, #0
 80059f6:	42a6      	cmp	r6, r4
 80059f8:	d105      	bne.n	8005a06 <__libc_init_array+0x2e>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a00:	4798      	blx	r3
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7ee      	b.n	80059e4 <__libc_init_array+0xc>
 8005a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0a:	4798      	blx	r3
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	e7f2      	b.n	80059f6 <__libc_init_array+0x1e>
 8005a10:	08006508 	.word	0x08006508
 8005a14:	08006508 	.word	0x08006508
 8005a18:	08006508 	.word	0x08006508
 8005a1c:	0800650c 	.word	0x0800650c

08005a20 <__retarget_lock_acquire_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <__retarget_lock_release_recursive>:
 8005a22:	4770      	bx	lr

08005a24 <memcpy>:
 8005a24:	440a      	add	r2, r1
 8005a26:	4291      	cmp	r1, r2
 8005a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a2c:	d100      	bne.n	8005a30 <memcpy+0xc>
 8005a2e:	4770      	bx	lr
 8005a30:	b510      	push	{r4, lr}
 8005a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a3a:	4291      	cmp	r1, r2
 8005a3c:	d1f9      	bne.n	8005a32 <memcpy+0xe>
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <memset>:
 8005a40:	4402      	add	r2, r0
 8005a42:	4603      	mov	r3, r0
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d100      	bne.n	8005a4a <memset+0xa>
 8005a48:	4770      	bx	lr
 8005a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4e:	e7f9      	b.n	8005a44 <memset+0x4>

08005a50 <sbrk_aligned>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4e0e      	ldr	r6, [pc, #56]	; (8005a8c <sbrk_aligned+0x3c>)
 8005a54:	460c      	mov	r4, r1
 8005a56:	6831      	ldr	r1, [r6, #0]
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b911      	cbnz	r1, 8005a62 <sbrk_aligned+0x12>
 8005a5c:	f000 f8f6 	bl	8005c4c <_sbrk_r>
 8005a60:	6030      	str	r0, [r6, #0]
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f8f1 	bl	8005c4c <_sbrk_r>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d00a      	beq.n	8005a84 <sbrk_aligned+0x34>
 8005a6e:	1cc4      	adds	r4, r0, #3
 8005a70:	f024 0403 	bic.w	r4, r4, #3
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d007      	beq.n	8005a88 <sbrk_aligned+0x38>
 8005a78:	1a21      	subs	r1, r4, r0
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f8e6 	bl	8005c4c <_sbrk_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d101      	bne.n	8005a88 <sbrk_aligned+0x38>
 8005a84:	f04f 34ff 	mov.w	r4, #4294967295
 8005a88:	4620      	mov	r0, r4
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	200041e8 	.word	0x200041e8

08005a90 <_malloc_r>:
 8005a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a94:	1ccd      	adds	r5, r1, #3
 8005a96:	f025 0503 	bic.w	r5, r5, #3
 8005a9a:	3508      	adds	r5, #8
 8005a9c:	2d0c      	cmp	r5, #12
 8005a9e:	bf38      	it	cc
 8005aa0:	250c      	movcc	r5, #12
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	db01      	blt.n	8005aac <_malloc_r+0x1c>
 8005aa8:	42a9      	cmp	r1, r5
 8005aaa:	d905      	bls.n	8005ab8 <_malloc_r+0x28>
 8005aac:	230c      	movs	r3, #12
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab8:	4e2e      	ldr	r6, [pc, #184]	; (8005b74 <_malloc_r+0xe4>)
 8005aba:	f000 f8f7 	bl	8005cac <__malloc_lock>
 8005abe:	6833      	ldr	r3, [r6, #0]
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	bb34      	cbnz	r4, 8005b12 <_malloc_r+0x82>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f7ff ffc2 	bl	8005a50 <sbrk_aligned>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	4604      	mov	r4, r0
 8005ad0:	d14d      	bne.n	8005b6e <_malloc_r+0xde>
 8005ad2:	6834      	ldr	r4, [r6, #0]
 8005ad4:	4626      	mov	r6, r4
 8005ad6:	2e00      	cmp	r6, #0
 8005ad8:	d140      	bne.n	8005b5c <_malloc_r+0xcc>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	4631      	mov	r1, r6
 8005ade:	4638      	mov	r0, r7
 8005ae0:	eb04 0803 	add.w	r8, r4, r3
 8005ae4:	f000 f8b2 	bl	8005c4c <_sbrk_r>
 8005ae8:	4580      	cmp	r8, r0
 8005aea:	d13a      	bne.n	8005b62 <_malloc_r+0xd2>
 8005aec:	6821      	ldr	r1, [r4, #0]
 8005aee:	3503      	adds	r5, #3
 8005af0:	1a6d      	subs	r5, r5, r1
 8005af2:	f025 0503 	bic.w	r5, r5, #3
 8005af6:	3508      	adds	r5, #8
 8005af8:	2d0c      	cmp	r5, #12
 8005afa:	bf38      	it	cc
 8005afc:	250c      	movcc	r5, #12
 8005afe:	4629      	mov	r1, r5
 8005b00:	4638      	mov	r0, r7
 8005b02:	f7ff ffa5 	bl	8005a50 <sbrk_aligned>
 8005b06:	3001      	adds	r0, #1
 8005b08:	d02b      	beq.n	8005b62 <_malloc_r+0xd2>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	442b      	add	r3, r5
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	e00e      	b.n	8005b30 <_malloc_r+0xa0>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	1b52      	subs	r2, r2, r5
 8005b16:	d41e      	bmi.n	8005b56 <_malloc_r+0xc6>
 8005b18:	2a0b      	cmp	r2, #11
 8005b1a:	d916      	bls.n	8005b4a <_malloc_r+0xba>
 8005b1c:	1961      	adds	r1, r4, r5
 8005b1e:	42a3      	cmp	r3, r4
 8005b20:	6025      	str	r5, [r4, #0]
 8005b22:	bf18      	it	ne
 8005b24:	6059      	strne	r1, [r3, #4]
 8005b26:	6863      	ldr	r3, [r4, #4]
 8005b28:	bf08      	it	eq
 8005b2a:	6031      	streq	r1, [r6, #0]
 8005b2c:	5162      	str	r2, [r4, r5]
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	4638      	mov	r0, r7
 8005b32:	f104 060b 	add.w	r6, r4, #11
 8005b36:	f000 f8bf 	bl	8005cb8 <__malloc_unlock>
 8005b3a:	f026 0607 	bic.w	r6, r6, #7
 8005b3e:	1d23      	adds	r3, r4, #4
 8005b40:	1af2      	subs	r2, r6, r3
 8005b42:	d0b6      	beq.n	8005ab2 <_malloc_r+0x22>
 8005b44:	1b9b      	subs	r3, r3, r6
 8005b46:	50a3      	str	r3, [r4, r2]
 8005b48:	e7b3      	b.n	8005ab2 <_malloc_r+0x22>
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	bf0c      	ite	eq
 8005b50:	6032      	streq	r2, [r6, #0]
 8005b52:	605a      	strne	r2, [r3, #4]
 8005b54:	e7ec      	b.n	8005b30 <_malloc_r+0xa0>
 8005b56:	4623      	mov	r3, r4
 8005b58:	6864      	ldr	r4, [r4, #4]
 8005b5a:	e7b2      	b.n	8005ac2 <_malloc_r+0x32>
 8005b5c:	4634      	mov	r4, r6
 8005b5e:	6876      	ldr	r6, [r6, #4]
 8005b60:	e7b9      	b.n	8005ad6 <_malloc_r+0x46>
 8005b62:	230c      	movs	r3, #12
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4638      	mov	r0, r7
 8005b68:	f000 f8a6 	bl	8005cb8 <__malloc_unlock>
 8005b6c:	e7a1      	b.n	8005ab2 <_malloc_r+0x22>
 8005b6e:	6025      	str	r5, [r4, #0]
 8005b70:	e7de      	b.n	8005b30 <_malloc_r+0xa0>
 8005b72:	bf00      	nop
 8005b74:	200041e4 	.word	0x200041e4

08005b78 <cleanup_glue>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	6809      	ldr	r1, [r1, #0]
 8005b7e:	4605      	mov	r5, r0
 8005b80:	b109      	cbz	r1, 8005b86 <cleanup_glue+0xe>
 8005b82:	f7ff fff9 	bl	8005b78 <cleanup_glue>
 8005b86:	4621      	mov	r1, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b8e:	f000 b899 	b.w	8005cc4 <_free_r>
	...

08005b94 <_reclaim_reent>:
 8005b94:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <_reclaim_reent+0xb4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4283      	cmp	r3, r0
 8005b9a:	b570      	push	{r4, r5, r6, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	d051      	beq.n	8005c44 <_reclaim_reent+0xb0>
 8005ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ba2:	b143      	cbz	r3, 8005bb6 <_reclaim_reent+0x22>
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d14a      	bne.n	8005c40 <_reclaim_reent+0xac>
 8005baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bac:	6819      	ldr	r1, [r3, #0]
 8005bae:	b111      	cbz	r1, 8005bb6 <_reclaim_reent+0x22>
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 f887 	bl	8005cc4 <_free_r>
 8005bb6:	6961      	ldr	r1, [r4, #20]
 8005bb8:	b111      	cbz	r1, 8005bc0 <_reclaim_reent+0x2c>
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 f882 	bl	8005cc4 <_free_r>
 8005bc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005bc2:	b111      	cbz	r1, 8005bca <_reclaim_reent+0x36>
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 f87d 	bl	8005cc4 <_free_r>
 8005bca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005bcc:	b111      	cbz	r1, 8005bd4 <_reclaim_reent+0x40>
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 f878 	bl	8005cc4 <_free_r>
 8005bd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005bd6:	b111      	cbz	r1, 8005bde <_reclaim_reent+0x4a>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f000 f873 	bl	8005cc4 <_free_r>
 8005bde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005be0:	b111      	cbz	r1, 8005be8 <_reclaim_reent+0x54>
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 f86e 	bl	8005cc4 <_free_r>
 8005be8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005bea:	b111      	cbz	r1, 8005bf2 <_reclaim_reent+0x5e>
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 f869 	bl	8005cc4 <_free_r>
 8005bf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005bf4:	b111      	cbz	r1, 8005bfc <_reclaim_reent+0x68>
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 f864 	bl	8005cc4 <_free_r>
 8005bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bfe:	b111      	cbz	r1, 8005c06 <_reclaim_reent+0x72>
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 f85f 	bl	8005cc4 <_free_r>
 8005c06:	69a3      	ldr	r3, [r4, #24]
 8005c08:	b1e3      	cbz	r3, 8005c44 <_reclaim_reent+0xb0>
 8005c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	4798      	blx	r3
 8005c10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c12:	b1b9      	cbz	r1, 8005c44 <_reclaim_reent+0xb0>
 8005c14:	4620      	mov	r0, r4
 8005c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c1a:	f7ff bfad 	b.w	8005b78 <cleanup_glue>
 8005c1e:	5949      	ldr	r1, [r1, r5]
 8005c20:	b941      	cbnz	r1, 8005c34 <_reclaim_reent+0xa0>
 8005c22:	3504      	adds	r5, #4
 8005c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c26:	2d80      	cmp	r5, #128	; 0x80
 8005c28:	68d9      	ldr	r1, [r3, #12]
 8005c2a:	d1f8      	bne.n	8005c1e <_reclaim_reent+0x8a>
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f000 f849 	bl	8005cc4 <_free_r>
 8005c32:	e7ba      	b.n	8005baa <_reclaim_reent+0x16>
 8005c34:	680e      	ldr	r6, [r1, #0]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 f844 	bl	8005cc4 <_free_r>
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	e7ef      	b.n	8005c20 <_reclaim_reent+0x8c>
 8005c40:	2500      	movs	r5, #0
 8005c42:	e7ef      	b.n	8005c24 <_reclaim_reent+0x90>
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	bf00      	nop
 8005c48:	20000010 	.word	0x20000010

08005c4c <_sbrk_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d06      	ldr	r5, [pc, #24]	; (8005c68 <_sbrk_r+0x1c>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fb f92c 	bl	8000eb4 <_sbrk>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_sbrk_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_sbrk_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	200041ec 	.word	0x200041ec

08005c6c <siprintf>:
 8005c6c:	b40e      	push	{r1, r2, r3}
 8005c6e:	b500      	push	{lr}
 8005c70:	b09c      	sub	sp, #112	; 0x70
 8005c72:	ab1d      	add	r3, sp, #116	; 0x74
 8005c74:	9002      	str	r0, [sp, #8]
 8005c76:	9006      	str	r0, [sp, #24]
 8005c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c7c:	4809      	ldr	r0, [pc, #36]	; (8005ca4 <siprintf+0x38>)
 8005c7e:	9107      	str	r1, [sp, #28]
 8005c80:	9104      	str	r1, [sp, #16]
 8005c82:	4909      	ldr	r1, [pc, #36]	; (8005ca8 <siprintf+0x3c>)
 8005c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c88:	9105      	str	r1, [sp, #20]
 8005c8a:	6800      	ldr	r0, [r0, #0]
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	a902      	add	r1, sp, #8
 8005c90:	f000 f8c0 	bl	8005e14 <_svfiprintf_r>
 8005c94:	9b02      	ldr	r3, [sp, #8]
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	b01c      	add	sp, #112	; 0x70
 8005c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ca0:	b003      	add	sp, #12
 8005ca2:	4770      	bx	lr
 8005ca4:	20000010 	.word	0x20000010
 8005ca8:	ffff0208 	.word	0xffff0208

08005cac <__malloc_lock>:
 8005cac:	4801      	ldr	r0, [pc, #4]	; (8005cb4 <__malloc_lock+0x8>)
 8005cae:	f7ff beb7 	b.w	8005a20 <__retarget_lock_acquire_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	200041e0 	.word	0x200041e0

08005cb8 <__malloc_unlock>:
 8005cb8:	4801      	ldr	r0, [pc, #4]	; (8005cc0 <__malloc_unlock+0x8>)
 8005cba:	f7ff beb2 	b.w	8005a22 <__retarget_lock_release_recursive>
 8005cbe:	bf00      	nop
 8005cc0:	200041e0 	.word	0x200041e0

08005cc4 <_free_r>:
 8005cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d044      	beq.n	8005d54 <_free_r+0x90>
 8005cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cce:	9001      	str	r0, [sp, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005cd6:	bfb8      	it	lt
 8005cd8:	18e4      	addlt	r4, r4, r3
 8005cda:	f7ff ffe7 	bl	8005cac <__malloc_lock>
 8005cde:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <_free_r+0x94>)
 8005ce0:	9801      	ldr	r0, [sp, #4]
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	b933      	cbnz	r3, 8005cf4 <_free_r+0x30>
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	6014      	str	r4, [r2, #0]
 8005cea:	b003      	add	sp, #12
 8005cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cf0:	f7ff bfe2 	b.w	8005cb8 <__malloc_unlock>
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d908      	bls.n	8005d0a <_free_r+0x46>
 8005cf8:	6825      	ldr	r5, [r4, #0]
 8005cfa:	1961      	adds	r1, r4, r5
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	bf01      	itttt	eq
 8005d00:	6819      	ldreq	r1, [r3, #0]
 8005d02:	685b      	ldreq	r3, [r3, #4]
 8005d04:	1949      	addeq	r1, r1, r5
 8005d06:	6021      	streq	r1, [r4, #0]
 8005d08:	e7ed      	b.n	8005ce6 <_free_r+0x22>
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	b10b      	cbz	r3, 8005d14 <_free_r+0x50>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d9fa      	bls.n	8005d0a <_free_r+0x46>
 8005d14:	6811      	ldr	r1, [r2, #0]
 8005d16:	1855      	adds	r5, r2, r1
 8005d18:	42a5      	cmp	r5, r4
 8005d1a:	d10b      	bne.n	8005d34 <_free_r+0x70>
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	4421      	add	r1, r4
 8005d20:	1854      	adds	r4, r2, r1
 8005d22:	42a3      	cmp	r3, r4
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	d1e0      	bne.n	8005cea <_free_r+0x26>
 8005d28:	681c      	ldr	r4, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	6053      	str	r3, [r2, #4]
 8005d2e:	4421      	add	r1, r4
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	e7da      	b.n	8005cea <_free_r+0x26>
 8005d34:	d902      	bls.n	8005d3c <_free_r+0x78>
 8005d36:	230c      	movs	r3, #12
 8005d38:	6003      	str	r3, [r0, #0]
 8005d3a:	e7d6      	b.n	8005cea <_free_r+0x26>
 8005d3c:	6825      	ldr	r5, [r4, #0]
 8005d3e:	1961      	adds	r1, r4, r5
 8005d40:	428b      	cmp	r3, r1
 8005d42:	bf04      	itt	eq
 8005d44:	6819      	ldreq	r1, [r3, #0]
 8005d46:	685b      	ldreq	r3, [r3, #4]
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	bf04      	itt	eq
 8005d4c:	1949      	addeq	r1, r1, r5
 8005d4e:	6021      	streq	r1, [r4, #0]
 8005d50:	6054      	str	r4, [r2, #4]
 8005d52:	e7ca      	b.n	8005cea <_free_r+0x26>
 8005d54:	b003      	add	sp, #12
 8005d56:	bd30      	pop	{r4, r5, pc}
 8005d58:	200041e4 	.word	0x200041e4

08005d5c <__ssputs_r>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	688e      	ldr	r6, [r1, #8]
 8005d62:	429e      	cmp	r6, r3
 8005d64:	4682      	mov	sl, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	4690      	mov	r8, r2
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	d838      	bhi.n	8005de0 <__ssputs_r+0x84>
 8005d6e:	898a      	ldrh	r2, [r1, #12]
 8005d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d74:	d032      	beq.n	8005ddc <__ssputs_r+0x80>
 8005d76:	6825      	ldr	r5, [r4, #0]
 8005d78:	6909      	ldr	r1, [r1, #16]
 8005d7a:	eba5 0901 	sub.w	r9, r5, r1
 8005d7e:	6965      	ldr	r5, [r4, #20]
 8005d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d88:	3301      	adds	r3, #1
 8005d8a:	444b      	add	r3, r9
 8005d8c:	106d      	asrs	r5, r5, #1
 8005d8e:	429d      	cmp	r5, r3
 8005d90:	bf38      	it	cc
 8005d92:	461d      	movcc	r5, r3
 8005d94:	0553      	lsls	r3, r2, #21
 8005d96:	d531      	bpl.n	8005dfc <__ssputs_r+0xa0>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7ff fe79 	bl	8005a90 <_malloc_r>
 8005d9e:	4606      	mov	r6, r0
 8005da0:	b950      	cbnz	r0, 8005db8 <__ssputs_r+0x5c>
 8005da2:	230c      	movs	r3, #12
 8005da4:	f8ca 3000 	str.w	r3, [sl]
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db8:	6921      	ldr	r1, [r4, #16]
 8005dba:	464a      	mov	r2, r9
 8005dbc:	f7ff fe32 	bl	8005a24 <memcpy>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	6126      	str	r6, [r4, #16]
 8005dce:	6165      	str	r5, [r4, #20]
 8005dd0:	444e      	add	r6, r9
 8005dd2:	eba5 0509 	sub.w	r5, r5, r9
 8005dd6:	6026      	str	r6, [r4, #0]
 8005dd8:	60a5      	str	r5, [r4, #8]
 8005dda:	463e      	mov	r6, r7
 8005ddc:	42be      	cmp	r6, r7
 8005dde:	d900      	bls.n	8005de2 <__ssputs_r+0x86>
 8005de0:	463e      	mov	r6, r7
 8005de2:	6820      	ldr	r0, [r4, #0]
 8005de4:	4632      	mov	r2, r6
 8005de6:	4641      	mov	r1, r8
 8005de8:	f000 faa8 	bl	800633c <memmove>
 8005dec:	68a3      	ldr	r3, [r4, #8]
 8005dee:	1b9b      	subs	r3, r3, r6
 8005df0:	60a3      	str	r3, [r4, #8]
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	4433      	add	r3, r6
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e7db      	b.n	8005db4 <__ssputs_r+0x58>
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	f000 fab7 	bl	8006370 <_realloc_r>
 8005e02:	4606      	mov	r6, r0
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d1e1      	bne.n	8005dcc <__ssputs_r+0x70>
 8005e08:	6921      	ldr	r1, [r4, #16]
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	f7ff ff5a 	bl	8005cc4 <_free_r>
 8005e10:	e7c7      	b.n	8005da2 <__ssputs_r+0x46>
	...

08005e14 <_svfiprintf_r>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	4698      	mov	r8, r3
 8005e1a:	898b      	ldrh	r3, [r1, #12]
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	b09d      	sub	sp, #116	; 0x74
 8005e20:	4607      	mov	r7, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	d50e      	bpl.n	8005e46 <_svfiprintf_r+0x32>
 8005e28:	690b      	ldr	r3, [r1, #16]
 8005e2a:	b963      	cbnz	r3, 8005e46 <_svfiprintf_r+0x32>
 8005e2c:	2140      	movs	r1, #64	; 0x40
 8005e2e:	f7ff fe2f 	bl	8005a90 <_malloc_r>
 8005e32:	6028      	str	r0, [r5, #0]
 8005e34:	6128      	str	r0, [r5, #16]
 8005e36:	b920      	cbnz	r0, 8005e42 <_svfiprintf_r+0x2e>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	e0d1      	b.n	8005fe6 <_svfiprintf_r+0x1d2>
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	616b      	str	r3, [r5, #20]
 8005e46:	2300      	movs	r3, #0
 8005e48:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4a:	2320      	movs	r3, #32
 8005e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e54:	2330      	movs	r3, #48	; 0x30
 8005e56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006000 <_svfiprintf_r+0x1ec>
 8005e5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e5e:	f04f 0901 	mov.w	r9, #1
 8005e62:	4623      	mov	r3, r4
 8005e64:	469a      	mov	sl, r3
 8005e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e6a:	b10a      	cbz	r2, 8005e70 <_svfiprintf_r+0x5c>
 8005e6c:	2a25      	cmp	r2, #37	; 0x25
 8005e6e:	d1f9      	bne.n	8005e64 <_svfiprintf_r+0x50>
 8005e70:	ebba 0b04 	subs.w	fp, sl, r4
 8005e74:	d00b      	beq.n	8005e8e <_svfiprintf_r+0x7a>
 8005e76:	465b      	mov	r3, fp
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f7ff ff6d 	bl	8005d5c <__ssputs_r>
 8005e82:	3001      	adds	r0, #1
 8005e84:	f000 80aa 	beq.w	8005fdc <_svfiprintf_r+0x1c8>
 8005e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e8a:	445a      	add	r2, fp
 8005e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80a2 	beq.w	8005fdc <_svfiprintf_r+0x1c8>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ea2:	f10a 0a01 	add.w	sl, sl, #1
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	9307      	str	r3, [sp, #28]
 8005eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eae:	931a      	str	r3, [sp, #104]	; 0x68
 8005eb0:	4654      	mov	r4, sl
 8005eb2:	2205      	movs	r2, #5
 8005eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb8:	4851      	ldr	r0, [pc, #324]	; (8006000 <_svfiprintf_r+0x1ec>)
 8005eba:	f7fa f991 	bl	80001e0 <memchr>
 8005ebe:	9a04      	ldr	r2, [sp, #16]
 8005ec0:	b9d8      	cbnz	r0, 8005efa <_svfiprintf_r+0xe6>
 8005ec2:	06d0      	lsls	r0, r2, #27
 8005ec4:	bf44      	itt	mi
 8005ec6:	2320      	movmi	r3, #32
 8005ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ecc:	0711      	lsls	r1, r2, #28
 8005ece:	bf44      	itt	mi
 8005ed0:	232b      	movmi	r3, #43	; 0x2b
 8005ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eda:	2b2a      	cmp	r3, #42	; 0x2a
 8005edc:	d015      	beq.n	8005f0a <_svfiprintf_r+0xf6>
 8005ede:	9a07      	ldr	r2, [sp, #28]
 8005ee0:	4654      	mov	r4, sl
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f04f 0c0a 	mov.w	ip, #10
 8005ee8:	4621      	mov	r1, r4
 8005eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eee:	3b30      	subs	r3, #48	; 0x30
 8005ef0:	2b09      	cmp	r3, #9
 8005ef2:	d94e      	bls.n	8005f92 <_svfiprintf_r+0x17e>
 8005ef4:	b1b0      	cbz	r0, 8005f24 <_svfiprintf_r+0x110>
 8005ef6:	9207      	str	r2, [sp, #28]
 8005ef8:	e014      	b.n	8005f24 <_svfiprintf_r+0x110>
 8005efa:	eba0 0308 	sub.w	r3, r0, r8
 8005efe:	fa09 f303 	lsl.w	r3, r9, r3
 8005f02:	4313      	orrs	r3, r2
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	46a2      	mov	sl, r4
 8005f08:	e7d2      	b.n	8005eb0 <_svfiprintf_r+0x9c>
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	1d19      	adds	r1, r3, #4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	9103      	str	r1, [sp, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bfbb      	ittet	lt
 8005f16:	425b      	neglt	r3, r3
 8005f18:	f042 0202 	orrlt.w	r2, r2, #2
 8005f1c:	9307      	strge	r3, [sp, #28]
 8005f1e:	9307      	strlt	r3, [sp, #28]
 8005f20:	bfb8      	it	lt
 8005f22:	9204      	strlt	r2, [sp, #16]
 8005f24:	7823      	ldrb	r3, [r4, #0]
 8005f26:	2b2e      	cmp	r3, #46	; 0x2e
 8005f28:	d10c      	bne.n	8005f44 <_svfiprintf_r+0x130>
 8005f2a:	7863      	ldrb	r3, [r4, #1]
 8005f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2e:	d135      	bne.n	8005f9c <_svfiprintf_r+0x188>
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	1d1a      	adds	r2, r3, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	9203      	str	r2, [sp, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bfb8      	it	lt
 8005f3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f40:	3402      	adds	r4, #2
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006010 <_svfiprintf_r+0x1fc>
 8005f48:	7821      	ldrb	r1, [r4, #0]
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	f7fa f947 	bl	80001e0 <memchr>
 8005f52:	b140      	cbz	r0, 8005f66 <_svfiprintf_r+0x152>
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	eba0 000a 	sub.w	r0, r0, sl
 8005f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f5e:	9b04      	ldr	r3, [sp, #16]
 8005f60:	4303      	orrs	r3, r0
 8005f62:	3401      	adds	r4, #1
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f6a:	4826      	ldr	r0, [pc, #152]	; (8006004 <_svfiprintf_r+0x1f0>)
 8005f6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f70:	2206      	movs	r2, #6
 8005f72:	f7fa f935 	bl	80001e0 <memchr>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d038      	beq.n	8005fec <_svfiprintf_r+0x1d8>
 8005f7a:	4b23      	ldr	r3, [pc, #140]	; (8006008 <_svfiprintf_r+0x1f4>)
 8005f7c:	bb1b      	cbnz	r3, 8005fc6 <_svfiprintf_r+0x1b2>
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	3307      	adds	r3, #7
 8005f82:	f023 0307 	bic.w	r3, r3, #7
 8005f86:	3308      	adds	r3, #8
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8c:	4433      	add	r3, r6
 8005f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f90:	e767      	b.n	8005e62 <_svfiprintf_r+0x4e>
 8005f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f96:	460c      	mov	r4, r1
 8005f98:	2001      	movs	r0, #1
 8005f9a:	e7a5      	b.n	8005ee8 <_svfiprintf_r+0xd4>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	3401      	adds	r4, #1
 8005fa0:	9305      	str	r3, [sp, #20]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f04f 0c0a 	mov.w	ip, #10
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fae:	3a30      	subs	r2, #48	; 0x30
 8005fb0:	2a09      	cmp	r2, #9
 8005fb2:	d903      	bls.n	8005fbc <_svfiprintf_r+0x1a8>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0c5      	beq.n	8005f44 <_svfiprintf_r+0x130>
 8005fb8:	9105      	str	r1, [sp, #20]
 8005fba:	e7c3      	b.n	8005f44 <_svfiprintf_r+0x130>
 8005fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e7f0      	b.n	8005fa8 <_svfiprintf_r+0x194>
 8005fc6:	ab03      	add	r3, sp, #12
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	462a      	mov	r2, r5
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <_svfiprintf_r+0x1f8>)
 8005fce:	a904      	add	r1, sp, #16
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f3af 8000 	nop.w
 8005fd6:	1c42      	adds	r2, r0, #1
 8005fd8:	4606      	mov	r6, r0
 8005fda:	d1d6      	bne.n	8005f8a <_svfiprintf_r+0x176>
 8005fdc:	89ab      	ldrh	r3, [r5, #12]
 8005fde:	065b      	lsls	r3, r3, #25
 8005fe0:	f53f af2c 	bmi.w	8005e3c <_svfiprintf_r+0x28>
 8005fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fe6:	b01d      	add	sp, #116	; 0x74
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <_svfiprintf_r+0x1f8>)
 8005ff4:	a904      	add	r1, sp, #16
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f000 f87a 	bl	80060f0 <_printf_i>
 8005ffc:	e7eb      	b.n	8005fd6 <_svfiprintf_r+0x1c2>
 8005ffe:	bf00      	nop
 8006000:	080064cc 	.word	0x080064cc
 8006004:	080064d6 	.word	0x080064d6
 8006008:	00000000 	.word	0x00000000
 800600c:	08005d5d 	.word	0x08005d5d
 8006010:	080064d2 	.word	0x080064d2

08006014 <_printf_common>:
 8006014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	4616      	mov	r6, r2
 800601a:	4699      	mov	r9, r3
 800601c:	688a      	ldr	r2, [r1, #8]
 800601e:	690b      	ldr	r3, [r1, #16]
 8006020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006024:	4293      	cmp	r3, r2
 8006026:	bfb8      	it	lt
 8006028:	4613      	movlt	r3, r2
 800602a:	6033      	str	r3, [r6, #0]
 800602c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006030:	4607      	mov	r7, r0
 8006032:	460c      	mov	r4, r1
 8006034:	b10a      	cbz	r2, 800603a <_printf_common+0x26>
 8006036:	3301      	adds	r3, #1
 8006038:	6033      	str	r3, [r6, #0]
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	0699      	lsls	r1, r3, #26
 800603e:	bf42      	ittt	mi
 8006040:	6833      	ldrmi	r3, [r6, #0]
 8006042:	3302      	addmi	r3, #2
 8006044:	6033      	strmi	r3, [r6, #0]
 8006046:	6825      	ldr	r5, [r4, #0]
 8006048:	f015 0506 	ands.w	r5, r5, #6
 800604c:	d106      	bne.n	800605c <_printf_common+0x48>
 800604e:	f104 0a19 	add.w	sl, r4, #25
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	6832      	ldr	r2, [r6, #0]
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	42ab      	cmp	r3, r5
 800605a:	dc26      	bgt.n	80060aa <_printf_common+0x96>
 800605c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006060:	1e13      	subs	r3, r2, #0
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	bf18      	it	ne
 8006066:	2301      	movne	r3, #1
 8006068:	0692      	lsls	r2, r2, #26
 800606a:	d42b      	bmi.n	80060c4 <_printf_common+0xb0>
 800606c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006070:	4649      	mov	r1, r9
 8006072:	4638      	mov	r0, r7
 8006074:	47c0      	blx	r8
 8006076:	3001      	adds	r0, #1
 8006078:	d01e      	beq.n	80060b8 <_printf_common+0xa4>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	68e5      	ldr	r5, [r4, #12]
 800607e:	6832      	ldr	r2, [r6, #0]
 8006080:	f003 0306 	and.w	r3, r3, #6
 8006084:	2b04      	cmp	r3, #4
 8006086:	bf08      	it	eq
 8006088:	1aad      	subeq	r5, r5, r2
 800608a:	68a3      	ldr	r3, [r4, #8]
 800608c:	6922      	ldr	r2, [r4, #16]
 800608e:	bf0c      	ite	eq
 8006090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006094:	2500      	movne	r5, #0
 8006096:	4293      	cmp	r3, r2
 8006098:	bfc4      	itt	gt
 800609a:	1a9b      	subgt	r3, r3, r2
 800609c:	18ed      	addgt	r5, r5, r3
 800609e:	2600      	movs	r6, #0
 80060a0:	341a      	adds	r4, #26
 80060a2:	42b5      	cmp	r5, r6
 80060a4:	d11a      	bne.n	80060dc <_printf_common+0xc8>
 80060a6:	2000      	movs	r0, #0
 80060a8:	e008      	b.n	80060bc <_printf_common+0xa8>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4652      	mov	r2, sl
 80060ae:	4649      	mov	r1, r9
 80060b0:	4638      	mov	r0, r7
 80060b2:	47c0      	blx	r8
 80060b4:	3001      	adds	r0, #1
 80060b6:	d103      	bne.n	80060c0 <_printf_common+0xac>
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c0:	3501      	adds	r5, #1
 80060c2:	e7c6      	b.n	8006052 <_printf_common+0x3e>
 80060c4:	18e1      	adds	r1, r4, r3
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	2030      	movs	r0, #48	; 0x30
 80060ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ce:	4422      	add	r2, r4
 80060d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060d8:	3302      	adds	r3, #2
 80060da:	e7c7      	b.n	800606c <_printf_common+0x58>
 80060dc:	2301      	movs	r3, #1
 80060de:	4622      	mov	r2, r4
 80060e0:	4649      	mov	r1, r9
 80060e2:	4638      	mov	r0, r7
 80060e4:	47c0      	blx	r8
 80060e6:	3001      	adds	r0, #1
 80060e8:	d0e6      	beq.n	80060b8 <_printf_common+0xa4>
 80060ea:	3601      	adds	r6, #1
 80060ec:	e7d9      	b.n	80060a2 <_printf_common+0x8e>
	...

080060f0 <_printf_i>:
 80060f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	7e0f      	ldrb	r7, [r1, #24]
 80060f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060f8:	2f78      	cmp	r7, #120	; 0x78
 80060fa:	4691      	mov	r9, r2
 80060fc:	4680      	mov	r8, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	469a      	mov	sl, r3
 8006102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006106:	d807      	bhi.n	8006118 <_printf_i+0x28>
 8006108:	2f62      	cmp	r7, #98	; 0x62
 800610a:	d80a      	bhi.n	8006122 <_printf_i+0x32>
 800610c:	2f00      	cmp	r7, #0
 800610e:	f000 80d8 	beq.w	80062c2 <_printf_i+0x1d2>
 8006112:	2f58      	cmp	r7, #88	; 0x58
 8006114:	f000 80a3 	beq.w	800625e <_printf_i+0x16e>
 8006118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800611c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006120:	e03a      	b.n	8006198 <_printf_i+0xa8>
 8006122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006126:	2b15      	cmp	r3, #21
 8006128:	d8f6      	bhi.n	8006118 <_printf_i+0x28>
 800612a:	a101      	add	r1, pc, #4	; (adr r1, 8006130 <_printf_i+0x40>)
 800612c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006130:	08006189 	.word	0x08006189
 8006134:	0800619d 	.word	0x0800619d
 8006138:	08006119 	.word	0x08006119
 800613c:	08006119 	.word	0x08006119
 8006140:	08006119 	.word	0x08006119
 8006144:	08006119 	.word	0x08006119
 8006148:	0800619d 	.word	0x0800619d
 800614c:	08006119 	.word	0x08006119
 8006150:	08006119 	.word	0x08006119
 8006154:	08006119 	.word	0x08006119
 8006158:	08006119 	.word	0x08006119
 800615c:	080062a9 	.word	0x080062a9
 8006160:	080061cd 	.word	0x080061cd
 8006164:	0800628b 	.word	0x0800628b
 8006168:	08006119 	.word	0x08006119
 800616c:	08006119 	.word	0x08006119
 8006170:	080062cb 	.word	0x080062cb
 8006174:	08006119 	.word	0x08006119
 8006178:	080061cd 	.word	0x080061cd
 800617c:	08006119 	.word	0x08006119
 8006180:	08006119 	.word	0x08006119
 8006184:	08006293 	.word	0x08006293
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	1d1a      	adds	r2, r3, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	602a      	str	r2, [r5, #0]
 8006190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006198:	2301      	movs	r3, #1
 800619a:	e0a3      	b.n	80062e4 <_printf_i+0x1f4>
 800619c:	6820      	ldr	r0, [r4, #0]
 800619e:	6829      	ldr	r1, [r5, #0]
 80061a0:	0606      	lsls	r6, r0, #24
 80061a2:	f101 0304 	add.w	r3, r1, #4
 80061a6:	d50a      	bpl.n	80061be <_printf_i+0xce>
 80061a8:	680e      	ldr	r6, [r1, #0]
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	2e00      	cmp	r6, #0
 80061ae:	da03      	bge.n	80061b8 <_printf_i+0xc8>
 80061b0:	232d      	movs	r3, #45	; 0x2d
 80061b2:	4276      	negs	r6, r6
 80061b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b8:	485e      	ldr	r0, [pc, #376]	; (8006334 <_printf_i+0x244>)
 80061ba:	230a      	movs	r3, #10
 80061bc:	e019      	b.n	80061f2 <_printf_i+0x102>
 80061be:	680e      	ldr	r6, [r1, #0]
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061c6:	bf18      	it	ne
 80061c8:	b236      	sxthne	r6, r6
 80061ca:	e7ef      	b.n	80061ac <_printf_i+0xbc>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	6820      	ldr	r0, [r4, #0]
 80061d0:	1d19      	adds	r1, r3, #4
 80061d2:	6029      	str	r1, [r5, #0]
 80061d4:	0601      	lsls	r1, r0, #24
 80061d6:	d501      	bpl.n	80061dc <_printf_i+0xec>
 80061d8:	681e      	ldr	r6, [r3, #0]
 80061da:	e002      	b.n	80061e2 <_printf_i+0xf2>
 80061dc:	0646      	lsls	r6, r0, #25
 80061de:	d5fb      	bpl.n	80061d8 <_printf_i+0xe8>
 80061e0:	881e      	ldrh	r6, [r3, #0]
 80061e2:	4854      	ldr	r0, [pc, #336]	; (8006334 <_printf_i+0x244>)
 80061e4:	2f6f      	cmp	r7, #111	; 0x6f
 80061e6:	bf0c      	ite	eq
 80061e8:	2308      	moveq	r3, #8
 80061ea:	230a      	movne	r3, #10
 80061ec:	2100      	movs	r1, #0
 80061ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061f2:	6865      	ldr	r5, [r4, #4]
 80061f4:	60a5      	str	r5, [r4, #8]
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	bfa2      	ittt	ge
 80061fa:	6821      	ldrge	r1, [r4, #0]
 80061fc:	f021 0104 	bicge.w	r1, r1, #4
 8006200:	6021      	strge	r1, [r4, #0]
 8006202:	b90e      	cbnz	r6, 8006208 <_printf_i+0x118>
 8006204:	2d00      	cmp	r5, #0
 8006206:	d04d      	beq.n	80062a4 <_printf_i+0x1b4>
 8006208:	4615      	mov	r5, r2
 800620a:	fbb6 f1f3 	udiv	r1, r6, r3
 800620e:	fb03 6711 	mls	r7, r3, r1, r6
 8006212:	5dc7      	ldrb	r7, [r0, r7]
 8006214:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006218:	4637      	mov	r7, r6
 800621a:	42bb      	cmp	r3, r7
 800621c:	460e      	mov	r6, r1
 800621e:	d9f4      	bls.n	800620a <_printf_i+0x11a>
 8006220:	2b08      	cmp	r3, #8
 8006222:	d10b      	bne.n	800623c <_printf_i+0x14c>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	07de      	lsls	r6, r3, #31
 8006228:	d508      	bpl.n	800623c <_printf_i+0x14c>
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	6861      	ldr	r1, [r4, #4]
 800622e:	4299      	cmp	r1, r3
 8006230:	bfde      	ittt	le
 8006232:	2330      	movle	r3, #48	; 0x30
 8006234:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006238:	f105 35ff 	addle.w	r5, r5, #4294967295
 800623c:	1b52      	subs	r2, r2, r5
 800623e:	6122      	str	r2, [r4, #16]
 8006240:	f8cd a000 	str.w	sl, [sp]
 8006244:	464b      	mov	r3, r9
 8006246:	aa03      	add	r2, sp, #12
 8006248:	4621      	mov	r1, r4
 800624a:	4640      	mov	r0, r8
 800624c:	f7ff fee2 	bl	8006014 <_printf_common>
 8006250:	3001      	adds	r0, #1
 8006252:	d14c      	bne.n	80062ee <_printf_i+0x1fe>
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	b004      	add	sp, #16
 800625a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625e:	4835      	ldr	r0, [pc, #212]	; (8006334 <_printf_i+0x244>)
 8006260:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006264:	6829      	ldr	r1, [r5, #0]
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	f851 6b04 	ldr.w	r6, [r1], #4
 800626c:	6029      	str	r1, [r5, #0]
 800626e:	061d      	lsls	r5, r3, #24
 8006270:	d514      	bpl.n	800629c <_printf_i+0x1ac>
 8006272:	07df      	lsls	r7, r3, #31
 8006274:	bf44      	itt	mi
 8006276:	f043 0320 	orrmi.w	r3, r3, #32
 800627a:	6023      	strmi	r3, [r4, #0]
 800627c:	b91e      	cbnz	r6, 8006286 <_printf_i+0x196>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	f023 0320 	bic.w	r3, r3, #32
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	2310      	movs	r3, #16
 8006288:	e7b0      	b.n	80061ec <_printf_i+0xfc>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	f043 0320 	orr.w	r3, r3, #32
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	2378      	movs	r3, #120	; 0x78
 8006294:	4828      	ldr	r0, [pc, #160]	; (8006338 <_printf_i+0x248>)
 8006296:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800629a:	e7e3      	b.n	8006264 <_printf_i+0x174>
 800629c:	0659      	lsls	r1, r3, #25
 800629e:	bf48      	it	mi
 80062a0:	b2b6      	uxthmi	r6, r6
 80062a2:	e7e6      	b.n	8006272 <_printf_i+0x182>
 80062a4:	4615      	mov	r5, r2
 80062a6:	e7bb      	b.n	8006220 <_printf_i+0x130>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	6826      	ldr	r6, [r4, #0]
 80062ac:	6961      	ldr	r1, [r4, #20]
 80062ae:	1d18      	adds	r0, r3, #4
 80062b0:	6028      	str	r0, [r5, #0]
 80062b2:	0635      	lsls	r5, r6, #24
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	d501      	bpl.n	80062bc <_printf_i+0x1cc>
 80062b8:	6019      	str	r1, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <_printf_i+0x1d2>
 80062bc:	0670      	lsls	r0, r6, #25
 80062be:	d5fb      	bpl.n	80062b8 <_printf_i+0x1c8>
 80062c0:	8019      	strh	r1, [r3, #0]
 80062c2:	2300      	movs	r3, #0
 80062c4:	6123      	str	r3, [r4, #16]
 80062c6:	4615      	mov	r5, r2
 80062c8:	e7ba      	b.n	8006240 <_printf_i+0x150>
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	1d1a      	adds	r2, r3, #4
 80062ce:	602a      	str	r2, [r5, #0]
 80062d0:	681d      	ldr	r5, [r3, #0]
 80062d2:	6862      	ldr	r2, [r4, #4]
 80062d4:	2100      	movs	r1, #0
 80062d6:	4628      	mov	r0, r5
 80062d8:	f7f9 ff82 	bl	80001e0 <memchr>
 80062dc:	b108      	cbz	r0, 80062e2 <_printf_i+0x1f2>
 80062de:	1b40      	subs	r0, r0, r5
 80062e0:	6060      	str	r0, [r4, #4]
 80062e2:	6863      	ldr	r3, [r4, #4]
 80062e4:	6123      	str	r3, [r4, #16]
 80062e6:	2300      	movs	r3, #0
 80062e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ec:	e7a8      	b.n	8006240 <_printf_i+0x150>
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	462a      	mov	r2, r5
 80062f2:	4649      	mov	r1, r9
 80062f4:	4640      	mov	r0, r8
 80062f6:	47d0      	blx	sl
 80062f8:	3001      	adds	r0, #1
 80062fa:	d0ab      	beq.n	8006254 <_printf_i+0x164>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	079b      	lsls	r3, r3, #30
 8006300:	d413      	bmi.n	800632a <_printf_i+0x23a>
 8006302:	68e0      	ldr	r0, [r4, #12]
 8006304:	9b03      	ldr	r3, [sp, #12]
 8006306:	4298      	cmp	r0, r3
 8006308:	bfb8      	it	lt
 800630a:	4618      	movlt	r0, r3
 800630c:	e7a4      	b.n	8006258 <_printf_i+0x168>
 800630e:	2301      	movs	r3, #1
 8006310:	4632      	mov	r2, r6
 8006312:	4649      	mov	r1, r9
 8006314:	4640      	mov	r0, r8
 8006316:	47d0      	blx	sl
 8006318:	3001      	adds	r0, #1
 800631a:	d09b      	beq.n	8006254 <_printf_i+0x164>
 800631c:	3501      	adds	r5, #1
 800631e:	68e3      	ldr	r3, [r4, #12]
 8006320:	9903      	ldr	r1, [sp, #12]
 8006322:	1a5b      	subs	r3, r3, r1
 8006324:	42ab      	cmp	r3, r5
 8006326:	dcf2      	bgt.n	800630e <_printf_i+0x21e>
 8006328:	e7eb      	b.n	8006302 <_printf_i+0x212>
 800632a:	2500      	movs	r5, #0
 800632c:	f104 0619 	add.w	r6, r4, #25
 8006330:	e7f5      	b.n	800631e <_printf_i+0x22e>
 8006332:	bf00      	nop
 8006334:	080064dd 	.word	0x080064dd
 8006338:	080064ee 	.word	0x080064ee

0800633c <memmove>:
 800633c:	4288      	cmp	r0, r1
 800633e:	b510      	push	{r4, lr}
 8006340:	eb01 0402 	add.w	r4, r1, r2
 8006344:	d902      	bls.n	800634c <memmove+0x10>
 8006346:	4284      	cmp	r4, r0
 8006348:	4623      	mov	r3, r4
 800634a:	d807      	bhi.n	800635c <memmove+0x20>
 800634c:	1e43      	subs	r3, r0, #1
 800634e:	42a1      	cmp	r1, r4
 8006350:	d008      	beq.n	8006364 <memmove+0x28>
 8006352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800635a:	e7f8      	b.n	800634e <memmove+0x12>
 800635c:	4402      	add	r2, r0
 800635e:	4601      	mov	r1, r0
 8006360:	428a      	cmp	r2, r1
 8006362:	d100      	bne.n	8006366 <memmove+0x2a>
 8006364:	bd10      	pop	{r4, pc}
 8006366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800636a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800636e:	e7f7      	b.n	8006360 <memmove+0x24>

08006370 <_realloc_r>:
 8006370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006374:	4680      	mov	r8, r0
 8006376:	4614      	mov	r4, r2
 8006378:	460e      	mov	r6, r1
 800637a:	b921      	cbnz	r1, 8006386 <_realloc_r+0x16>
 800637c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006380:	4611      	mov	r1, r2
 8006382:	f7ff bb85 	b.w	8005a90 <_malloc_r>
 8006386:	b92a      	cbnz	r2, 8006394 <_realloc_r+0x24>
 8006388:	f7ff fc9c 	bl	8005cc4 <_free_r>
 800638c:	4625      	mov	r5, r4
 800638e:	4628      	mov	r0, r5
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006394:	f000 f81b 	bl	80063ce <_malloc_usable_size_r>
 8006398:	4284      	cmp	r4, r0
 800639a:	4607      	mov	r7, r0
 800639c:	d802      	bhi.n	80063a4 <_realloc_r+0x34>
 800639e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063a2:	d812      	bhi.n	80063ca <_realloc_r+0x5a>
 80063a4:	4621      	mov	r1, r4
 80063a6:	4640      	mov	r0, r8
 80063a8:	f7ff fb72 	bl	8005a90 <_malloc_r>
 80063ac:	4605      	mov	r5, r0
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d0ed      	beq.n	800638e <_realloc_r+0x1e>
 80063b2:	42bc      	cmp	r4, r7
 80063b4:	4622      	mov	r2, r4
 80063b6:	4631      	mov	r1, r6
 80063b8:	bf28      	it	cs
 80063ba:	463a      	movcs	r2, r7
 80063bc:	f7ff fb32 	bl	8005a24 <memcpy>
 80063c0:	4631      	mov	r1, r6
 80063c2:	4640      	mov	r0, r8
 80063c4:	f7ff fc7e 	bl	8005cc4 <_free_r>
 80063c8:	e7e1      	b.n	800638e <_realloc_r+0x1e>
 80063ca:	4635      	mov	r5, r6
 80063cc:	e7df      	b.n	800638e <_realloc_r+0x1e>

080063ce <_malloc_usable_size_r>:
 80063ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d2:	1f18      	subs	r0, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bfbc      	itt	lt
 80063d8:	580b      	ldrlt	r3, [r1, r0]
 80063da:	18c0      	addlt	r0, r0, r3
 80063dc:	4770      	bx	lr
	...

080063e0 <_init>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr

080063ec <_fini>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr
