
FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006ca8  08006ca8  00016ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da4  08006da4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dac  08006dac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006db0  08006db0  00016db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c8  20000074  08006e28  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000423c  08006e28  0002423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016048  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0a  00000000  00000000  000360ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00038ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cd6  00000000  00000000  0003b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d5c  00000000  00000000  00052f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ab3  00000000  00000000  00068cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f88  00000000  00000000  000fe7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c90 	.word	0x08006c90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006c90 	.word	0x08006c90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fde7 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f879 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f9d7 	bl	8000988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f9ab 	bl	8000934 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005de:	f000 f8df 	bl	80007a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e2:	f000 f94d 	bl	8000880 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Timer que captura el ECHO del sensor
 80005e6:	2100      	movs	r1, #0
 80005e8:	482b      	ldr	r0, [pc, #172]	; (8000698 <main+0xd0>)
 80005ea:	f001 ffa3 	bl	8002534 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		//Timer que genera la señal sonora
 80005ee:	2100      	movs	r1, #0
 80005f0:	482a      	ldr	r0, [pc, #168]	; (800069c <main+0xd4>)
 80005f2:	f001 fe95 	bl	8002320 <HAL_TIM_PWM_Start>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  semaforo1=xSemaphoreCreateBinary();
 80005f6:	2203      	movs	r2, #3
 80005f8:	2100      	movs	r1, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	f003 fdfa 	bl	80041f4 <xQueueGenericCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <main+0xd8>)
 8000604:	6013      	str	r3, [r2, #0]
  semaforo2=xSemaphoreCreateBinary();
 8000606:	2203      	movs	r2, #3
 8000608:	2100      	movs	r1, #0
 800060a:	2001      	movs	r0, #1
 800060c:	f003 fdf2 	bl	80041f4 <xQueueGenericCreate>
 8000610:	4603      	mov	r3, r0
 8000612:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <main+0xdc>)
 8000614:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(semaforo1);
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <main+0xd8>)
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	f003 fe42 	bl	80042a8 <xQueueGenericSend>
  xSemaphoreGive(semaforo2);
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <main+0xdc>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	f003 fe3b 	bl	80042a8 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <main+0xe0>)
 8000634:	1d3c      	adds	r4, r7, #4
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fc6a 	bl	8003f22 <osThreadCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0xe4>)
 8000652:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((void*) TrigSensor, "trigger", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 8000654:	2300      	movs	r3, #0
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	2301      	movs	r3, #1
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	4913      	ldr	r1, [pc, #76]	; (80006b0 <main+0xe8>)
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <main+0xec>)
 8000664:	f004 fa17 	bl	8004a96 <xTaskCreate>
  xTaskCreate((void*) FiltroDistancia, "filtro", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 8000668:	2300      	movs	r3, #0
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	4910      	ldr	r1, [pc, #64]	; (80006b8 <main+0xf0>)
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0xf4>)
 8000678:	f004 fa0d 	bl	8004a96 <xTaskCreate>
  xTaskCreate((void*) generacionPWM, "PWM", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+0, NULL);
 800067c:	2300      	movs	r3, #0
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	490d      	ldr	r1, [pc, #52]	; (80006c0 <main+0xf8>)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <main+0xfc>)
 800068c:	f004 fa03 	bl	8004a96 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f003 fc40 	bl	8003f14 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0xcc>
 8000696:	bf00      	nop
 8000698:	20000344 	.word	0x20000344
 800069c:	2000038c 	.word	0x2000038c
 80006a0:	2000041c 	.word	0x2000041c
 80006a4:	20000420 	.word	0x20000420
 80006a8:	08006cc8 	.word	0x08006cc8
 80006ac:	20000418 	.word	0x20000418
 80006b0:	08006cb4 	.word	0x08006cb4
 80006b4:	08000b85 	.word	0x08000b85
 80006b8:	08006cbc 	.word	0x08006cbc
 80006bc:	08000bb5 	.word	0x08000bb5
 80006c0:	08006cc4 	.word	0x08006cc4
 80006c4:	08000cd1 	.word	0x08000cd1

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 fe0a 	bl	80062f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f818 	bl	8001788 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 faff 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fa7a 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 fae9 	bl	8000d60 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_TIM2_Init+0xdc>)
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_TIM2_Init+0xdc>)
 80007d4:	2253      	movs	r2, #83	; 0x53
 80007d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_TIM2_Init+0xdc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_TIM2_Init+0xdc>)
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_TIM2_Init+0xdc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_TIM2_Init+0xdc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <MX_TIM2_Init+0xdc>)
 80007f4:	f001 fc92 	bl	800211c <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007fe:	f000 faaf 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	4619      	mov	r1, r3
 800080e:	481b      	ldr	r0, [pc, #108]	; (800087c <MX_TIM2_Init+0xdc>)
 8000810:	f002 fa10 	bl	8002c34 <HAL_TIM_ConfigClockSource>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800081a:	f000 faa1 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <MX_TIM2_Init+0xdc>)
 8000820:	f001 fe2e 	bl	8002480 <HAL_TIM_IC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800082a:	f000 fa99 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <MX_TIM2_Init+0xdc>)
 800083e:	f002 ff0d 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000848:	f000 fa8a 	bl	8000d60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_TIM2_Init+0xdc>)
 8000864:	f002 f888 	bl	8002978 <HAL_TIM_IC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800086e:	f000 fa77 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000344 	.word	0x20000344

08000880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_TIM3_Init+0xac>)
 80008a4:	4a22      	ldr	r2, [pc, #136]	; (8000930 <MX_TIM3_Init+0xb0>)
 80008a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_TIM3_Init+0xac>)
 80008aa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80008ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_TIM3_Init+0xac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_TIM3_Init+0xac>)
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_TIM3_Init+0xac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_TIM3_Init+0xac>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <MX_TIM3_Init+0xac>)
 80008ca:	f001 fcd9 	bl	8002280 <HAL_TIM_PWM_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 fa44 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4619      	mov	r1, r3
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <MX_TIM3_Init+0xac>)
 80008e8:	f002 feb8 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008f2:	f000 fa35 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f6:	2360      	movs	r3, #96	; 0x60
 80008f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80008fa:	2332      	movs	r3, #50	; 0x32
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_TIM3_Init+0xac>)
 800090e:	f002 f8cf 	bl	8002ab0 <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000918:	f000 fa22 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <MX_TIM3_Init+0xac>)
 800091e:	f000 fac1 	bl	8000ea4 <HAL_TIM_MspPostInit>

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000038c 	.word	0x2000038c
 8000930:	40000400 	.word	0x40000400

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f002 fef8 	bl	8003760 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f9f3 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200003d4 	.word	0x200003d4
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <MX_GPIO_Init+0xe0>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_GPIO_Init+0xe0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2121      	movs	r1, #33	; 0x21
 8000a12:	4816      	ldr	r0, [pc, #88]	; (8000a6c <MX_GPIO_Init+0xe4>)
 8000a14:	f000 fe6c 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_GPIO_Init+0xe8>)
 8000a30:	f000 fcda 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|LD2_Pin;
 8000a34:	2321      	movs	r3, #33	; 0x21
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_GPIO_Init+0xe4>)
 8000a4c:	f000 fccc 	bl	80013e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2105      	movs	r1, #5
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f000 fc9d 	bl	8001394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5a:	2028      	movs	r0, #40	; 0x28
 8000a5c:	f000 fcb6 	bl	80013cc <HAL_NVIC_EnableIRQ>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020800 	.word	0x40020800

08000a74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000a82:	f000 fe4e 	bl	8001722 <HAL_GPIO_TogglePin>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_TIM_IC_CaptureCallback>:
int velocidadSonido=343;

uint32_t uartBufferLen=0;
char uart_buf [50];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	if(flancoAscendenteCapturado==0){
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d11b      	bne.n	8000adc <HAL_TIM_IC_CaptureCallback+0x48>
		valorInicial=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f002 f98c 	bl	8002dc4 <HAL_TIM_ReadCapturedValue>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ab2:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=1;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a1a      	ldr	r2, [r3, #32]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 020a 	bic.w	r2, r2, #10
 8000ac8:	621a      	str	r2, [r3, #32]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6a1a      	ldr	r2, [r3, #32]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f042 0202 	orr.w	r2, r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
		else if (valorFinal <= valorInicial)
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorFinal+valorInicial;
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);

	}
}
 8000ada:	e042      	b.n	8000b62 <HAL_TIM_IC_CaptureCallback+0xce>
	else if(flancoAscendenteCapturado==1){
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d13e      	bne.n	8000b62 <HAL_TIM_IC_CaptureCallback+0xce>
		valorFinal=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f002 f96c 	bl	8002dc4 <HAL_TIM_ReadCapturedValue>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000af2:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=0;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6a1a      	ldr	r2, [r3, #32]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 020a 	bic.w	r2, r2, #10
 8000b08:	621a      	str	r2, [r3, #32]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6a12      	ldr	r2, [r2, #32]
 8000b14:	621a      	str	r2, [r3, #32]
		if(valorFinal>valorInicial)
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dd07      	ble.n	8000b32 <HAL_TIM_IC_CaptureCallback+0x9e>
			pulso=valorFinal-valorInicial;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e011      	b.n	8000b56 <HAL_TIM_IC_CaptureCallback+0xc2>
		else if (valorFinal <= valorInicial)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dc0b      	bgt.n	8000b56 <HAL_TIM_IC_CaptureCallback+0xc2>
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorFinal+valorInicial;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000b54:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fca1 	bl	80044a4 <xQueueGiveFromISR>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000424 	.word	0x20000424
 8000b70:	20000428 	.word	0x20000428
 8000b74:	2000042c 	.word	0x2000042c
 8000b78:	20000430 	.word	0x20000430
 8000b7c:	20000344 	.word	0x20000344
 8000b80:	2000041c 	.word	0x2000041c

08000b84 <TrigSensor>:


void TrigSensor(void const * argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <TrigSensor+0x2c>)
 8000b92:	f000 fdad 	bl	80016f0 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f004 f8ca 	bl	8004d30 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <TrigSensor+0x2c>)
 8000ba2:	f000 fda5 	bl	80016f0 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f004 f8c2 	bl	8004d30 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000bac:	e7ee      	b.n	8000b8c <TrigSensor+0x8>
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <FiltroDistancia>:

float muestras[TAM_FILTRO]={0};
int pos=0;
int distancia;
void FiltroDistancia(void const * argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	float suma;
	int i;
  /* Infinite loop */
  while(1)
  {
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000bbc:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <FiltroDistancia+0xe4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fcfb 	bl	80045c0 <xQueueSemaphoreTake>

	  muestras[pos]=(float) pulso*343*100/(2*1000000);
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <FiltroDistancia+0xe8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000ca0 <FiltroDistancia+0xec>
 8000bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bde:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000ca4 <FiltroDistancia+0xf0>
 8000be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000cac <FiltroDistancia+0xf8>
 8000bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <FiltroDistancia+0xfc>)
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	edc3 7a00 	vstr	s15, [r3]
	  pos++;
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a29      	ldr	r2, [pc, #164]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000c04:	6013      	str	r3, [r2, #0]
	  if(pos==TAM_FILTRO){
 8000c06:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	d1d6      	bne.n	8000bbc <FiltroDistancia+0x8>
		  pos=0;
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <FiltroDistancia+0xf4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
		  for(i = 0; i < TAM_FILTRO; i++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	e00e      	b.n	8000c38 <FiltroDistancia+0x84>
		      suma = suma + muestras[i];
 8000c1a:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <FiltroDistancia+0xfc>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	edd3 7a00 	vldr	s15, [r3]
 8000c26:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2e:	edc7 7a03 	vstr	s15, [r7, #12]
		  for(i = 0; i < TAM_FILTRO; i++)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	dded      	ble.n	8000c1a <FiltroDistancia+0x66>
		  distancia=(int) suma/TAM_FILTRO;
 8000c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c46:	ee17 1a90 	vmov	r1, s15
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <FiltroDistancia+0x100>)
 8000c4c:	fb83 2301 	smull	r2, r3, r3, r1
 8000c50:	105a      	asrs	r2, r3, #1
 8000c52:	17cb      	asrs	r3, r1, #31
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <FiltroDistancia+0x104>)
 8000c58:	6013      	str	r3, [r2, #0]
		  suma=0;
 8000c5a:	f04f 0300 	mov.w	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
		  uartBufferLen=sprintf(uart_buf,"%u Cm \r\n",distancia);
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <FiltroDistancia+0x104>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4915      	ldr	r1, [pc, #84]	; (8000cbc <FiltroDistancia+0x108>)
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <FiltroDistancia+0x10c>)
 8000c6a:	f005 fc57 	bl	800651c <siprintf>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <FiltroDistancia+0x110>)
 8000c74:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <FiltroDistancia+0x110>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	490f      	ldr	r1, [pc, #60]	; (8000cc0 <FiltroDistancia+0x10c>)
 8000c82:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <FiltroDistancia+0x114>)
 8000c84:	f002 fdb9 	bl	80037fa <HAL_UART_Transmit>
		  xSemaphoreGive(semaforo2);
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <FiltroDistancia+0x118>)
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	f003 fb09 	bl	80042a8 <xQueueGenericSend>
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000c96:	e791      	b.n	8000bbc <FiltroDistancia+0x8>
 8000c98:	2000041c 	.word	0x2000041c
 8000c9c:	20000430 	.word	0x20000430
 8000ca0:	43ab8000 	.word	0x43ab8000
 8000ca4:	42c80000 	.word	0x42c80000
 8000ca8:	20000480 	.word	0x20000480
 8000cac:	49f42400 	.word	0x49f42400
 8000cb0:	2000046c 	.word	0x2000046c
 8000cb4:	66666667 	.word	0x66666667
 8000cb8:	20000484 	.word	0x20000484
 8000cbc:	08006ce4 	.word	0x08006ce4
 8000cc0:	20000438 	.word	0x20000438
 8000cc4:	20000434 	.word	0x20000434
 8000cc8:	200003d4 	.word	0x200003d4
 8000ccc:	20000420 	.word	0x20000420

08000cd0 <generacionPWM>:

  }
  /* USER CODE END 5 */
}

void generacionPWM(void const * argument){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

	while(1){
		xSemaphoreTake(semaforo2,portMAX_DELAY);
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <generacionPWM+0x30>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fc6d 	bl	80045c0 <xQueueSemaphoreTake>
		TIM3->ARR=distancia;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <generacionPWM+0x34>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <generacionPWM+0x38>)
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->CCR1=distancia/2;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <generacionPWM+0x34>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	0fda      	lsrs	r2, r3, #31
 8000cf4:	4413      	add	r3, r2
 8000cf6:	105b      	asrs	r3, r3, #1
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <generacionPWM+0x38>)
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
		xSemaphoreTake(semaforo2,portMAX_DELAY);
 8000cfe:	e7eb      	b.n	8000cd8 <generacionPWM+0x8>
 8000d00:	20000420 	.word	0x20000420
 8000d04:	20000484 	.word	0x20000484
 8000d08:	40000400 	.word	0x40000400

08000d0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2101      	movs	r1, #1
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <StartDefaultTask+0x2c>)
 8000d1a:	f000 fce9 	bl	80016f0 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f004 f806 	bl	8004d30 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <StartDefaultTask+0x2c>)
 8000d2a:	f000 fce1 	bl	80016f0 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);
 8000d2e:	2028      	movs	r0, #40	; 0x28
 8000d30:	f003 fffe 	bl	8004d30 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000d34:	e7ee      	b.n	8000d14 <StartDefaultTask+0x8>
 8000d36:	bf00      	nop
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d4e:	f000 fa49 	bl	80011e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40010000 	.word	0x40010000

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_MspInit+0x54>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	210f      	movs	r1, #15
 8000dae:	f06f 0001 	mvn.w	r0, #1
 8000db2:	f000 faef 	bl	8001394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de4:	d134      	bne.n	8000e50 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_TIM_Base_MspInit+0x94>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <HAL_TIM_Base_MspInit+0x94>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_TIM_Base_MspInit+0x94>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_TIM_Base_MspInit+0x94>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <HAL_TIM_Base_MspInit+0x94>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_TIM_Base_MspInit+0x94>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e30:	2301      	movs	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <HAL_TIM_Base_MspInit+0x98>)
 8000e3c:	f000 fad4 	bl	80013e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2105      	movs	r1, #5
 8000e44:	201c      	movs	r0, #28
 8000e46:	f000 faa5 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e4a:	201c      	movs	r0, #28
 8000e4c:	f000 fabe 	bl	80013cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10d      	bne.n	8000e8e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <HAL_TIM_MspPostInit+0x68>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d11d      	bne.n	8000f02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <HAL_TIM_MspPostInit+0x70>)
 8000efe:	f000 fa73 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0x84>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12b      	bne.n	8000f92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f72:	230c      	movs	r3, #12
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f82:	2307      	movs	r3, #7
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_UART_MspInit+0x8c>)
 8000f8e:	f000 fa2b 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2019      	movs	r0, #25
 8000fbe:	f000 f9e9 	bl	8001394 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fc2:	2019      	movs	r0, #25
 8000fc4:	f000 fa02 	bl	80013cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_InitTick+0xa0>)
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	4a1d      	ldr	r2, [pc, #116]	; (8001048 <HAL_InitTick+0xa0>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_InitTick+0xa0>)
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe4:	f107 0210 	add.w	r2, r7, #16
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f862 	bl	80020b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ff4:	f001 f84c 	bl	8002090 <HAL_RCC_GetPCLK2Freq>
 8000ff8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_InitTick+0xa4>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9b      	lsrs	r3, r3, #18
 8001004:	3b01      	subs	r3, #1
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_InitTick+0xa8>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_InitTick+0xac>)
 800100c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_InitTick+0xa8>)
 8001010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001014:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_InitTick+0xa8>)
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_InitTick+0xa8>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_InitTick+0xa8>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_InitTick+0xa8>)
 800102a:	f001 f877 	bl	800211c <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d104      	bne.n	800103e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_InitTick+0xa8>)
 8001036:	f001 f8c1 	bl	80021bc <HAL_TIM_Base_Start_IT>
 800103a:	4603      	mov	r3, r0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	431bde83 	.word	0x431bde83
 8001050:	20000488 	.word	0x20000488
 8001054:	40010000 	.word	0x40010000

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800108a:	f001 fb6d 	bl	8002768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000488 	.word	0x20000488

08001098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM2_IRQHandler+0x10>)
 800109e:	f001 fb63 	bl	8002768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000344 	.word	0x20000344

080010ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b4:	f000 fb50 	bl	8001758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f005 f8c6 	bl	800627c <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20018000 	.word	0x20018000
 800111c:	00000400 	.word	0x00000400
 8001120:	200004d0 	.word	0x200004d0
 8001124:	20004240 	.word	0x20004240

08001128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001168:	4c0b      	ldr	r4, [pc, #44]	; (8001198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001176:	f7ff ffd7 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f005 f885 	bl	8006288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff fa23 	bl	80005c8 <main>
  bx  lr    
 8001182:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001184:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001190:	08006db4 	.word	0x08006db4
  ldr r2, =_sbss
 8001194:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001198:	2000423c 	.word	0x2000423c

0800119c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <HAL_Init+0x40>)
 80011aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_Init+0x40>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_Init+0x40>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f8d8 	bl	800137e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f7ff feea 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fdca 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	200004d4 	.word	0x200004d4

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200004d4 	.word	0x200004d4

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff4c 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a6:	f7ff ff61 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff ffb1 	bl	8001318 <NVIC_EncodePriority>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff80 	bl	80012c4 <__NVIC_SetPriority>
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff54 	bl	8001288 <__NVIC_EnableIRQ>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e159      	b.n	80016b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 8148 	bne.w	80016b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d005      	beq.n	800143a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	2b02      	cmp	r3, #2
 8001438:	d130      	bne.n	800149c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 0201 	and.w	r2, r3, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d017      	beq.n	80014d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d123      	bne.n	800152c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a2 	beq.w	80016b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <HAL_GPIO_Init+0x2e8>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <HAL_GPIO_Init+0x2e8>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <HAL_GPIO_Init+0x2e8>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158a:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <HAL_GPIO_Init+0x2ec>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a49      	ldr	r2, [pc, #292]	; (80016d8 <HAL_GPIO_Init+0x2f0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d019      	beq.n	80015ea <HAL_GPIO_Init+0x202>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a48      	ldr	r2, [pc, #288]	; (80016dc <HAL_GPIO_Init+0x2f4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0x1fe>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a47      	ldr	r2, [pc, #284]	; (80016e0 <HAL_GPIO_Init+0x2f8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00d      	beq.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a46      	ldr	r2, [pc, #280]	; (80016e4 <HAL_GPIO_Init+0x2fc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x1f6>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a45      	ldr	r2, [pc, #276]	; (80016e8 <HAL_GPIO_Init+0x300>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_GPIO_Init+0x1f2>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e008      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015da:	2307      	movs	r3, #7
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015de:	2303      	movs	r3, #3
 80015e0:	e004      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015ea:	2300      	movs	r3, #0
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	f002 0203 	and.w	r2, r2, #3
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	4093      	lsls	r3, r2
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fc:	4935      	ldr	r1, [pc, #212]	; (80016d4 <HAL_GPIO_Init+0x2ec>)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_GPIO_Init+0x304>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162e:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x304>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_GPIO_Init+0x304>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <HAL_GPIO_Init+0x304>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_GPIO_Init+0x304>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001682:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x304>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_GPIO_Init+0x304>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_GPIO_Init+0x304>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	f67f aea2 	bls.w	8001404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40013800 	.word	0x40013800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001734:	887a      	ldrh	r2, [r7, #2]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	041a      	lsls	r2, r3, #16
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43d9      	mvns	r1, r3
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	400b      	ands	r3, r1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f97c 	bl	8000a74 <HAL_GPIO_EXTI_Callback>
  }
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40013c00 	.word	0x40013c00

08001788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e267      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d075      	beq.n	8001892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d00c      	beq.n	80017cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b2:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d112      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b7e      	ldr	r3, [pc, #504]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d05b      	beq.n	8001890 <HAL_RCC_OscConfig+0x108>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d157      	bne.n	8001890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e242      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x74>
 80017ee:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a75      	ldr	r2, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6f      	ldr	r2, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6c      	ldr	r2, [pc, #432]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 8001820:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a68      	ldr	r2, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fce4 	bl	800120c <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fce0 	bl	800120c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e207      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xc0>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fcd0 	bl	800120c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fccc 	bl	800120c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1f3      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0xe8>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800189e:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c7      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4937      	ldr	r1, [pc, #220]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b34      	ldr	r3, [pc, #208]	; (80019cc <HAL_RCC_OscConfig+0x244>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff fc85 	bl	800120c <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fc81 	bl	800120c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1a8      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4925      	ldr	r1, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x244>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fc64 	bl	800120c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fc60 	bl	800120c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e187      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d036      	beq.n	80019e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d016      	beq.n	80019a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x248>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fc44 	bl	800120c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fc40 	bl	800120c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e167      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800199c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x200>
 80019a6:	e01b      	b.n	80019e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_OscConfig+0x248>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fc2d 	bl	800120c <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	e00e      	b.n	80019d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff fc29 	bl	800120c <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d907      	bls.n	80019d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e150      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
 80019c8:	40023800 	.word	0x40023800
 80019cc:	42470000 	.word	0x42470000
 80019d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ea      	bne.n	80019b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8097 	beq.w	8001b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a7c      	ldr	r2, [pc, #496]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b77      	ldr	r3, [pc, #476]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b74      	ldr	r3, [pc, #464]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fbe9 	bl	800120c <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fbe5 	bl	800120c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e10c      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2ea>
 8001a64:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x324>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x30c>
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a5e      	ldr	r2, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0x324>
 8001a94:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 0304 	bic.w	r3, r3, #4
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d015      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fbaa 	bl	800120c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fba6 	bl	800120c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0cb      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ee      	beq.n	8001abc <HAL_RCC_OscConfig+0x334>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fb94 	bl	800120c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fb90 	bl	800120c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0b5      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ee      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a1 	beq.w	8001c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d05c      	beq.n	8001bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d141      	bne.n	8001bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb64 	bl	800120c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fb60 	bl	800120c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e087      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	019b      	lsls	r3, r3, #6
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb39 	bl	800120c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fb35 	bl	800120c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e05c      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x416>
 8001bbc:	e054      	b.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fb22 	bl	800120c <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff fb1e 	bl	800120c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e045      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x444>
 8001bea:	e03d      	b.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e038      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_OscConfig+0x4ec>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d028      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d121      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d11a      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d111      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cc      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d90c      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d044      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e067      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7ff fa50 	bl	800120c <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff fa4c 	bl	800120c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e04f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d20c      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f821 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f8c2 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08006cf8 	.word	0x08006cf8
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e48:	b094      	sub	sp, #80	; 0x50
 8001e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e50:	2300      	movs	r3, #0
 8001e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e54:	2300      	movs	r3, #0
 8001e56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5c:	4b79      	ldr	r3, [pc, #484]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d00d      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x40>
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	f200 80e1 	bhi.w	8002030 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x34>
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e76:	e0db      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b73      	ldr	r3, [pc, #460]	; (8002048 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e7c:	e0db      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e7e:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_RCC_GetSysClockFreq+0x208>)
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e82:	e0d8      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d063      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ea4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	462b      	mov	r3, r5
 8001eba:	f04f 0000 	mov.w	r0, #0
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	0159      	lsls	r1, r3, #5
 8001ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec8:	0150      	lsls	r0, r2, #5
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4621      	mov	r1, r4
 8001ed0:	1a51      	subs	r1, r2, r1
 8001ed2:	6139      	str	r1, [r7, #16]
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ee8:	4659      	mov	r1, fp
 8001eea:	018b      	lsls	r3, r1, #6
 8001eec:	4651      	mov	r1, sl
 8001eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef2:	4651      	mov	r1, sl
 8001ef4:	018a      	lsls	r2, r1, #6
 8001ef6:	4651      	mov	r1, sl
 8001ef8:	ebb2 0801 	subs.w	r8, r2, r1
 8001efc:	4659      	mov	r1, fp
 8001efe:	eb63 0901 	sbc.w	r9, r3, r1
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	eb18 0303 	adds.w	r3, r8, r3
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	462b      	mov	r3, r5
 8001f24:	eb49 0303 	adc.w	r3, r9, r3
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f36:	4629      	mov	r1, r5
 8001f38:	024b      	lsls	r3, r1, #9
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f40:	4621      	mov	r1, r4
 8001f42:	024a      	lsls	r2, r1, #9
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f54:	f7fe f994 	bl	8000280 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f60:	e058      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	464b      	mov	r3, r9
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0159      	lsls	r1, r3, #5
 8001f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f8e:	0150      	lsls	r0, r2, #5
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4641      	mov	r1, r8
 8001f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	00eb      	lsls	r3, r5, #3
 8001fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fca:	00e2      	lsls	r2, r4, #3
 8001fcc:	4614      	mov	r4, r2
 8001fce:	461d      	mov	r5, r3
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	18e3      	adds	r3, r4, r3
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	eb45 0303 	adc.w	r3, r5, r3
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fea:	4629      	mov	r1, r5
 8001fec:	028b      	lsls	r3, r1, #10
 8001fee:	4621      	mov	r1, r4
 8001ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	028a      	lsls	r2, r1, #10
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffe:	2200      	movs	r2, #0
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	61fa      	str	r2, [r7, #28]
 8002004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002008:	f7fe f93a 	bl	8000280 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4613      	mov	r3, r2
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	3301      	adds	r3, #1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800202e:	e002      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetSysClockFreq+0x204>)
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002038:	4618      	mov	r0, r3
 800203a:	3750      	adds	r7, #80	; 0x50
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	00f42400 	.word	0x00f42400
 800204c:	007a1200 	.word	0x007a1200

08002050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_RCC_GetHCLKFreq+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000

08002068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800206c:	f7ff fff0 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0a9b      	lsrs	r3, r3, #10
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4903      	ldr	r1, [pc, #12]	; (800208c <HAL_RCC_GetPCLK1Freq+0x24>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	08006d08 	.word	0x08006d08

08002090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002094:	f7ff ffdc 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002098:	4602      	mov	r2, r0
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	0b5b      	lsrs	r3, r3, #13
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	08006d08 	.word	0x08006d08

080020b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	220f      	movs	r2, #15
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_GetClockConfig+0x60>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0207 	and.w	r2, r3, #7
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40023c00 	.word	0x40023c00

0800211c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e041      	b.n	80021b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fe3e 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f000 fe94 	bl	8002e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d001      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e044      	b.n	800225e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <HAL_TIM_Base_Start_IT+0xb0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d018      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fe:	d013      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_TIM_Base_Start_IT+0xb4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00e      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_TIM_Base_Start_IT+0xb8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_TIM_Base_Start_IT+0xbc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a16      	ldr	r2, [pc, #88]	; (800227c <HAL_TIM_Base_Start_IT+0xc0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d111      	bne.n	800224c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d010      	beq.n	800225c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224a:	e007      	b.n	800225c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40014000 	.word	0x40014000

08002280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e041      	b.n	8002316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fdda 	bl	8000e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f000 fde2 	bl	8002e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d109      	bne.n	8002344 <HAL_TIM_PWM_Start+0x24>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e022      	b.n	800238a <HAL_TIM_PWM_Start+0x6a>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b04      	cmp	r3, #4
 8002348:	d109      	bne.n	800235e <HAL_TIM_PWM_Start+0x3e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	bf14      	ite	ne
 8002356:	2301      	movne	r3, #1
 8002358:	2300      	moveq	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	e015      	b.n	800238a <HAL_TIM_PWM_Start+0x6a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d109      	bne.n	8002378 <HAL_TIM_PWM_Start+0x58>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e008      	b.n	800238a <HAL_TIM_PWM_Start+0x6a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e068      	b.n	8002464 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0x82>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a0:	e013      	b.n	80023ca <HAL_TIM_PWM_Start+0xaa>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_PWM_Start+0x92>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b0:	e00b      	b.n	80023ca <HAL_TIM_PWM_Start+0xaa>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d104      	bne.n	80023c2 <HAL_TIM_PWM_Start+0xa2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c0:	e003      	b.n	80023ca <HAL_TIM_PWM_Start+0xaa>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 f91c 	bl	8003610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a23      	ldr	r2, [pc, #140]	; (800246c <HAL_TIM_PWM_Start+0x14c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d107      	bne.n	80023f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_TIM_PWM_Start+0x14c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d018      	beq.n	800242e <HAL_TIM_PWM_Start+0x10e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002404:	d013      	beq.n	800242e <HAL_TIM_PWM_Start+0x10e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_TIM_PWM_Start+0x150>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_TIM_PWM_Start+0x10e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_TIM_PWM_Start+0x154>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_TIM_PWM_Start+0x10e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_TIM_PWM_Start+0x158>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_TIM_PWM_Start+0x10e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <HAL_TIM_PWM_Start+0x15c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d111      	bne.n	8002452 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b06      	cmp	r3, #6
 800243e:	d010      	beq.n	8002462 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002450:	e007      	b.n	8002462 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40010000 	.word	0x40010000
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800
 8002478:	40000c00 	.word	0x40000c00
 800247c:	40014000 	.word	0x40014000

08002480 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e041      	b.n	8002516 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f839 	bl	800251e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 fce2 	bl	8002e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <HAL_TIM_IC_Start_IT+0x1e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800254e:	b2db      	uxtb	r3, r3
 8002550:	e013      	b.n	800257a <HAL_TIM_IC_Start_IT+0x46>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d104      	bne.n	8002562 <HAL_TIM_IC_Start_IT+0x2e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e00b      	b.n	800257a <HAL_TIM_IC_Start_IT+0x46>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d104      	bne.n	8002572 <HAL_TIM_IC_Start_IT+0x3e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256e:	b2db      	uxtb	r3, r3
 8002570:	e003      	b.n	800257a <HAL_TIM_IC_Start_IT+0x46>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002578:	b2db      	uxtb	r3, r3
 800257a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <HAL_TIM_IC_Start_IT+0x58>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e013      	b.n	80025b4 <HAL_TIM_IC_Start_IT+0x80>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b04      	cmp	r3, #4
 8002590:	d104      	bne.n	800259c <HAL_TIM_IC_Start_IT+0x68>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e00b      	b.n	80025b4 <HAL_TIM_IC_Start_IT+0x80>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d104      	bne.n	80025ac <HAL_TIM_IC_Start_IT+0x78>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e003      	b.n	80025b4 <HAL_TIM_IC_Start_IT+0x80>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d102      	bne.n	80025c2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0c2      	b.n	800274c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d104      	bne.n	80025d6 <HAL_TIM_IC_Start_IT+0xa2>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d4:	e013      	b.n	80025fe <HAL_TIM_IC_Start_IT+0xca>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d104      	bne.n	80025e6 <HAL_TIM_IC_Start_IT+0xb2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e4:	e00b      	b.n	80025fe <HAL_TIM_IC_Start_IT+0xca>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d104      	bne.n	80025f6 <HAL_TIM_IC_Start_IT+0xc2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f4:	e003      	b.n	80025fe <HAL_TIM_IC_Start_IT+0xca>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <HAL_TIM_IC_Start_IT+0xda>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800260c:	e013      	b.n	8002636 <HAL_TIM_IC_Start_IT+0x102>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d104      	bne.n	800261e <HAL_TIM_IC_Start_IT+0xea>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800261c:	e00b      	b.n	8002636 <HAL_TIM_IC_Start_IT+0x102>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d104      	bne.n	800262e <HAL_TIM_IC_Start_IT+0xfa>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800262c:	e003      	b.n	8002636 <HAL_TIM_IC_Start_IT+0x102>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d841      	bhi.n	80026c0 <HAL_TIM_IC_Start_IT+0x18c>
 800263c:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <HAL_TIM_IC_Start_IT+0x110>)
 800263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002642:	bf00      	nop
 8002644:	08002679 	.word	0x08002679
 8002648:	080026c1 	.word	0x080026c1
 800264c:	080026c1 	.word	0x080026c1
 8002650:	080026c1 	.word	0x080026c1
 8002654:	0800268b 	.word	0x0800268b
 8002658:	080026c1 	.word	0x080026c1
 800265c:	080026c1 	.word	0x080026c1
 8002660:	080026c1 	.word	0x080026c1
 8002664:	0800269d 	.word	0x0800269d
 8002668:	080026c1 	.word	0x080026c1
 800266c:	080026c1 	.word	0x080026c1
 8002670:	080026c1 	.word	0x080026c1
 8002674:	080026af 	.word	0x080026af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0202 	orr.w	r2, r2, #2
 8002686:	60da      	str	r2, [r3, #12]
      break;
 8002688:	e01d      	b.n	80026c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0204 	orr.w	r2, r2, #4
 8002698:	60da      	str	r2, [r3, #12]
      break;
 800269a:	e014      	b.n	80026c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	60da      	str	r2, [r3, #12]
      break;
 80026ac:	e00b      	b.n	80026c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0210 	orr.w	r2, r2, #16
 80026bc:	60da      	str	r2, [r3, #12]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d13e      	bne.n	800274a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	6839      	ldr	r1, [r7, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 ff9b 	bl	8003610 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <HAL_TIM_IC_Start_IT+0x220>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d018      	beq.n	8002716 <HAL_TIM_IC_Start_IT+0x1e2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d013      	beq.n	8002716 <HAL_TIM_IC_Start_IT+0x1e2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_TIM_IC_Start_IT+0x224>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00e      	beq.n	8002716 <HAL_TIM_IC_Start_IT+0x1e2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a17      	ldr	r2, [pc, #92]	; (800275c <HAL_TIM_IC_Start_IT+0x228>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d009      	beq.n	8002716 <HAL_TIM_IC_Start_IT+0x1e2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_TIM_IC_Start_IT+0x22c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_TIM_IC_Start_IT+0x1e2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <HAL_TIM_IC_Start_IT+0x230>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d111      	bne.n	800273a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b06      	cmp	r3, #6
 8002726:	d010      	beq.n	800274a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002738:	e007      	b.n	800274a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40010000 	.word	0x40010000
 8002758:	40000400 	.word	0x40000400
 800275c:	40000800 	.word	0x40000800
 8002760:	40000c00 	.word	0x40000c00
 8002764:	40014000 	.word	0x40014000

08002768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0202 	mvn.w	r2, #2
 8002794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f972 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fb4a 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fb51 	bl	8002e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0204 	mvn.w	r2, #4
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe f948 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fb20 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fb27 	bl	8002e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b08      	cmp	r3, #8
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b08      	cmp	r3, #8
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0208 	mvn.w	r2, #8
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2204      	movs	r2, #4
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe f91e 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 faf6 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fafd 	bl	8002e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b10      	cmp	r3, #16
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b10      	cmp	r3, #16
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0210 	mvn.w	r2, #16
 8002890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2208      	movs	r2, #8
 8002896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe f8f4 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 facc 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fad3 	bl	8002e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0201 	mvn.w	r2, #1
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fa28 	bl	8000d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b80      	cmp	r3, #128	; 0x80
 80028f8:	d10e      	bne.n	8002918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d107      	bne.n	8002918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 ff1a 	bl	800374c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d10e      	bne.n	8002944 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d107      	bne.n	8002944 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa98 	bl	8002e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b20      	cmp	r3, #32
 8002950:	d10e      	bne.n	8002970 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b20      	cmp	r3, #32
 800295e:	d107      	bne.n	8002970 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0220 	mvn.w	r2, #32
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fee4 	bl	8003738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002992:	2302      	movs	r3, #2
 8002994:	e088      	b.n	8002aa8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f000 fc74 	bl	80032a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 020c 	bic.w	r2, r2, #12
 80029c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6999      	ldr	r1, [r3, #24]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	619a      	str	r2, [r3, #24]
 80029da:	e060      	b.n	8002a9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d11c      	bne.n	8002a1c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f000 fcec 	bl	80033ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a04:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6999      	ldr	r1, [r3, #24]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	021a      	lsls	r2, r3, #8
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	619a      	str	r2, [r3, #24]
 8002a1a:	e040      	b.n	8002a9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d11b      	bne.n	8002a5a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f000 fd39 	bl	80034a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 020c 	bic.w	r2, r2, #12
 8002a44:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69d9      	ldr	r1, [r3, #28]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	61da      	str	r2, [r3, #28]
 8002a58:	e021      	b.n	8002a9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b0c      	cmp	r3, #12
 8002a5e:	d11c      	bne.n	8002a9a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f000 fd56 	bl	8003520 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a82:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69d9      	ldr	r1, [r3, #28]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	021a      	lsls	r2, r3, #8
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	61da      	str	r2, [r3, #28]
 8002a98:	e001      	b.n	8002a9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e0ae      	b.n	8002c2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	f200 809f 	bhi.w	8002c1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002c1d 	.word	0x08002c1d
 8002aec:	08002c1d 	.word	0x08002c1d
 8002af0:	08002c1d 	.word	0x08002c1d
 8002af4:	08002b59 	.word	0x08002b59
 8002af8:	08002c1d 	.word	0x08002c1d
 8002afc:	08002c1d 	.word	0x08002c1d
 8002b00:	08002c1d 	.word	0x08002c1d
 8002b04:	08002b9b 	.word	0x08002b9b
 8002b08:	08002c1d 	.word	0x08002c1d
 8002b0c:	08002c1d 	.word	0x08002c1d
 8002b10:	08002c1d 	.word	0x08002c1d
 8002b14:	08002bdb 	.word	0x08002bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fa32 	bl	8002f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0204 	bic.w	r2, r2, #4
 8002b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6999      	ldr	r1, [r3, #24]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	619a      	str	r2, [r3, #24]
      break;
 8002b56:	e064      	b.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fa78 	bl	8003054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6999      	ldr	r1, [r3, #24]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	021a      	lsls	r2, r3, #8
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	619a      	str	r2, [r3, #24]
      break;
 8002b98:	e043      	b.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fac3 	bl	800312c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0208 	orr.w	r2, r2, #8
 8002bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0204 	bic.w	r2, r2, #4
 8002bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69d9      	ldr	r1, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	61da      	str	r2, [r3, #28]
      break;
 8002bd8:	e023      	b.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fb0d 	bl	8003200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69d9      	ldr	r1, [r3, #28]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	021a      	lsls	r2, r3, #8
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	61da      	str	r2, [r3, #28]
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIM_ConfigClockSource+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0b4      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x186>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c88:	d03e      	beq.n	8002d08 <HAL_TIM_ConfigClockSource+0xd4>
 8002c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8e:	f200 8087 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c96:	f000 8086 	beq.w	8002da6 <HAL_TIM_ConfigClockSource+0x172>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d87f      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d01a      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0xa6>
 8002ca4:	2b70      	cmp	r3, #112	; 0x70
 8002ca6:	d87b      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b60      	cmp	r3, #96	; 0x60
 8002caa:	d050      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x11a>
 8002cac:	2b60      	cmp	r3, #96	; 0x60
 8002cae:	d877      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b50      	cmp	r3, #80	; 0x50
 8002cb2:	d03c      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0xfa>
 8002cb4:	2b50      	cmp	r3, #80	; 0x50
 8002cb6:	d873      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d058      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x13a>
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d86f      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b30      	cmp	r3, #48	; 0x30
 8002cc2:	d064      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x15a>
 8002cc4:	2b30      	cmp	r3, #48	; 0x30
 8002cc6:	d86b      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d060      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d867      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05c      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x15a>
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d05a      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x15a>
 8002cd8:	e062      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f000 fc71 	bl	80035d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	609a      	str	r2, [r3, #8]
      break;
 8002d06:	e04f      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6899      	ldr	r1, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f000 fc5a 	bl	80035d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2a:	609a      	str	r2, [r3, #8]
      break;
 8002d2c:	e03c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 fb18 	bl	8003370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2150      	movs	r1, #80	; 0x50
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fc27 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e02c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f000 fb74 	bl	8003448 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2160      	movs	r1, #96	; 0x60
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fc17 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8002d6c:	e01c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f000 faf8 	bl	8003370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2140      	movs	r1, #64	; 0x40
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fc07 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8002d8c:	e00c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f000 fbfe 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8002d9e:	e003      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e000      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d831      	bhi.n	8002e3c <HAL_TIM_ReadCapturedValue+0x78>
 8002dd8:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	08002e15 	.word	0x08002e15
 8002de4:	08002e3d 	.word	0x08002e3d
 8002de8:	08002e3d 	.word	0x08002e3d
 8002dec:	08002e3d 	.word	0x08002e3d
 8002df0:	08002e1f 	.word	0x08002e1f
 8002df4:	08002e3d 	.word	0x08002e3d
 8002df8:	08002e3d 	.word	0x08002e3d
 8002dfc:	08002e3d 	.word	0x08002e3d
 8002e00:	08002e29 	.word	0x08002e29
 8002e04:	08002e3d 	.word	0x08002e3d
 8002e08:	08002e3d 	.word	0x08002e3d
 8002e0c:	08002e3d 	.word	0x08002e3d
 8002e10:	08002e33 	.word	0x08002e33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	60fb      	str	r3, [r7, #12]

      break;
 8002e1c:	e00f      	b.n	8002e3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	60fb      	str	r3, [r7, #12]

      break;
 8002e26:	e00a      	b.n	8002e3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	60fb      	str	r3, [r7, #12]

      break;
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	60fb      	str	r3, [r7, #12]

      break;
 8002e3a:	e000      	b.n	8002e3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e3c:	bf00      	nop
  }

  return tmpreg;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a34      	ldr	r2, [pc, #208]	; (8002f6c <TIM_Base_SetConfig+0xe4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00f      	beq.n	8002ec0 <TIM_Base_SetConfig+0x38>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_Base_SetConfig+0x38>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <TIM_Base_SetConfig+0xe8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d007      	beq.n	8002ec0 <TIM_Base_SetConfig+0x38>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <TIM_Base_SetConfig+0xec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x38>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <TIM_Base_SetConfig+0xf0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <TIM_Base_SetConfig+0xe4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01b      	beq.n	8002f12 <TIM_Base_SetConfig+0x8a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d017      	beq.n	8002f12 <TIM_Base_SetConfig+0x8a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <TIM_Base_SetConfig+0xe8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <TIM_Base_SetConfig+0x8a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <TIM_Base_SetConfig+0xec>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00f      	beq.n	8002f12 <TIM_Base_SetConfig+0x8a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <TIM_Base_SetConfig+0xf0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <TIM_Base_SetConfig+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <TIM_Base_SetConfig+0xf4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <TIM_Base_SetConfig+0xf8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <TIM_Base_SetConfig+0xfc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d108      	bne.n	8002f24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <TIM_Base_SetConfig+0xe4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d103      	bne.n	8002f58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	615a      	str	r2, [r3, #20]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40000c00 	.word	0x40000c00
 8002f7c:	40014000 	.word	0x40014000
 8002f80:	40014400 	.word	0x40014400
 8002f84:	40014800 	.word	0x40014800

08002f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0201 	bic.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f023 0302 	bic.w	r3, r3, #2
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <TIM_OC1_SetConfig+0xc8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10c      	bne.n	8002ffe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f023 0308 	bic.w	r3, r3, #8
 8002fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <TIM_OC1_SetConfig+0xc8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d111      	bne.n	800302a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800300c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	621a      	str	r2, [r3, #32]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40010000 	.word	0x40010000

08003054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0210 	bic.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0320 	bic.w	r3, r3, #32
 800309e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <TIM_OC2_SetConfig+0xd4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d10d      	bne.n	80030d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <TIM_OC2_SetConfig+0xd4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d113      	bne.n	8003100 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40010000 	.word	0x40010000

0800312c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0303 	bic.w	r3, r3, #3
 8003162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <TIM_OC3_SetConfig+0xd0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10d      	bne.n	80031a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a14      	ldr	r2, [pc, #80]	; (80031fc <TIM_OC3_SetConfig+0xd0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d113      	bne.n	80031d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	621a      	str	r2, [r3, #32]
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40010000 	.word	0x40010000

08003200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800324a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	031b      	lsls	r3, r3, #12
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <TIM_OC4_SetConfig+0x9c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d109      	bne.n	8003274 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40010000 	.word	0x40010000

080032a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0201 	bic.w	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a24      	ldr	r2, [pc, #144]	; (800335c <TIM_TI1_SetConfig+0xbc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <TIM_TI1_SetConfig+0x56>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d00f      	beq.n	80032f6 <TIM_TI1_SetConfig+0x56>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a21      	ldr	r2, [pc, #132]	; (8003360 <TIM_TI1_SetConfig+0xc0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <TIM_TI1_SetConfig+0x56>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a20      	ldr	r2, [pc, #128]	; (8003364 <TIM_TI1_SetConfig+0xc4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <TIM_TI1_SetConfig+0x56>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <TIM_TI1_SetConfig+0xc8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_TI1_SetConfig+0x56>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a1e      	ldr	r2, [pc, #120]	; (800336c <TIM_TI1_SetConfig+0xcc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <TIM_TI1_SetConfig+0x5a>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <TIM_TI1_SetConfig+0x5c>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e003      	b.n	800331a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	b2db      	uxtb	r3, r3
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f023 030a 	bic.w	r3, r3, #10
 8003334:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 030a 	and.w	r3, r3, #10
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40014000 	.word	0x40014000

08003370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800339a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 030a 	bic.w	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f023 0210 	bic.w	r2, r3, #16
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800340c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	031b      	lsls	r3, r3, #12
 8003412:	b29b      	uxth	r3, r3
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003420:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f023 0210 	bic.w	r2, r3, #16
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003472:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	031b      	lsls	r3, r3, #12
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003484:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	621a      	str	r2, [r3, #32]
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f023 0303 	bic.w	r3, r3, #3
 80034d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80034f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800355e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	031b      	lsls	r3, r3, #12
 8003564:	b29b      	uxth	r3, r3
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003572:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	031b      	lsls	r3, r3, #12
 8003578:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f043 0307 	orr.w	r3, r3, #7
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2201      	movs	r2, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	43db      	mvns	r3, r3
 8003632:	401a      	ands	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	431a      	orrs	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e050      	b.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d013      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a16      	ldr	r2, [pc, #88]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a13      	ldr	r2, [pc, #76]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10c      	bne.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40010000 	.word	0x40010000
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40014000 	.word	0x40014000

08003738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e03f      	b.n	80037f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd fbc6 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f929 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b08a      	sub	sp, #40	; 0x28
 80037fe:	af02      	add	r7, sp, #8
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	d17c      	bne.n	8003914 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_UART_Transmit+0x2c>
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e075      	b.n	8003916 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_UART_Transmit+0x3e>
 8003834:	2302      	movs	r3, #2
 8003836:	e06e      	b.n	8003916 <HAL_UART_Transmit+0x11c>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2221      	movs	r2, #33	; 0x21
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384e:	f7fd fcdd 	bl	800120c <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003868:	d108      	bne.n	800387c <HAL_UART_Transmit+0x82>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e003      	b.n	8003884 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800388c:	e02a      	b.n	80038e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f840 	bl	800391e <UART_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e036      	b.n	8003916 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	3302      	adds	r3, #2
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e007      	b.n	80038d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	3301      	adds	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1cf      	bne.n	800388e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2140      	movs	r1, #64	; 0x40
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f810 	bl	800391e <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e006      	b.n	8003916 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b090      	sub	sp, #64	; 0x40
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392e:	e050      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d04c      	beq.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <UART_WaitOnFlagUntilTimeout+0x30>
 800393e:	f7fd fc65 	bl	800120c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800394a:	429a      	cmp	r2, r3
 800394c:	d241      	bcs.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800396e:	637a      	str	r2, [r7, #52]	; 0x34
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e5      	bne.n	800394e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3314      	adds	r3, #20
 8003988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	613b      	str	r3, [r7, #16]
   return(result);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a2:	623a      	str	r2, [r7, #32]
 80039a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	69f9      	ldr	r1, [r7, #28]
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e5      	bne.n	8003982 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e00f      	b.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4013      	ands	r3, r2
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d09f      	beq.n	8003930 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3740      	adds	r7, #64	; 0x40
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a00:	b0c0      	sub	sp, #256	; 0x100
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	68d9      	ldr	r1, [r3, #12]
 8003a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	ea40 0301 	orr.w	r3, r0, r1
 8003a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a54:	f021 010c 	bic.w	r1, r1, #12
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a62:	430b      	orrs	r3, r1
 8003a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a76:	6999      	ldr	r1, [r3, #24]
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	ea40 0301 	orr.w	r3, r0, r1
 8003a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b8f      	ldr	r3, [pc, #572]	; (8003cc8 <UART_SetConfig+0x2cc>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d005      	beq.n	8003a9c <UART_SetConfig+0xa0>
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b8d      	ldr	r3, [pc, #564]	; (8003ccc <UART_SetConfig+0x2d0>)
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d104      	bne.n	8003aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7fe faf8 	bl	8002090 <HAL_RCC_GetPCLK2Freq>
 8003aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003aa4:	e003      	b.n	8003aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7fe fadf 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab8:	f040 810c 	bne.w	8003cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ace:	4622      	mov	r2, r4
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	1891      	adds	r1, r2, r2
 8003ad4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ad6:	415b      	adcs	r3, r3
 8003ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ade:	4621      	mov	r1, r4
 8003ae0:	eb12 0801 	adds.w	r8, r2, r1
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	eb43 0901 	adc.w	r9, r3, r1
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afe:	4690      	mov	r8, r2
 8003b00:	4699      	mov	r9, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	eb18 0303 	adds.w	r3, r8, r3
 8003b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	eb49 0303 	adc.w	r3, r9, r3
 8003b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	18db      	adds	r3, r3, r3
 8003b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b30:	4613      	mov	r3, r2
 8003b32:	eb42 0303 	adc.w	r3, r2, r3
 8003b36:	657b      	str	r3, [r7, #84]	; 0x54
 8003b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b40:	f7fc fb9e 	bl	8000280 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <UART_SetConfig+0x2d4>)
 8003b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	011c      	lsls	r4, r3, #4
 8003b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b74:	4641      	mov	r1, r8
 8003b76:	eb12 0a01 	adds.w	sl, r2, r1
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b94:	4692      	mov	sl, r2
 8003b96:	469b      	mov	fp, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	18db      	adds	r3, r3, r3
 8003bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	eb42 0303 	adc.w	r3, r2, r3
 8003bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bd6:	f7fc fb53 	bl	8000280 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <UART_SetConfig+0x2d4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	; 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bf6:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <UART_SetConfig+0x2d4>)
 8003bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c04:	441c      	add	r4, r3
 8003c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c18:	4642      	mov	r2, r8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c20:	415b      	adcs	r3, r3
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c28:	4641      	mov	r1, r8
 8003c2a:	1851      	adds	r1, r2, r1
 8003c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c2e:	4649      	mov	r1, r9
 8003c30:	414b      	adcs	r3, r1
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c40:	4659      	mov	r1, fp
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4642      	mov	r2, r8
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	460a      	mov	r2, r1
 8003c60:	eb42 0303 	adc.w	r3, r2, r3
 8003c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	18db      	adds	r3, r3, r3
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c82:	4613      	mov	r3, r2
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c92:	f7fc faf5 	bl	8000280 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <UART_SetConfig+0x2d4>)
 8003c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	2164      	movs	r1, #100	; 0x64
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	3332      	adds	r3, #50	; 0x32
 8003cae:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <UART_SetConfig+0x2d4>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	f003 0207 	and.w	r2, r3, #7
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4422      	add	r2, r4
 8003cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc4:	e105      	b.n	8003ed2 <UART_SetConfig+0x4d6>
 8003cc6:	bf00      	nop
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40011400 	.word	0x40011400
 8003cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ce6:	4642      	mov	r2, r8
 8003ce8:	464b      	mov	r3, r9
 8003cea:	1891      	adds	r1, r2, r2
 8003cec:	6239      	str	r1, [r7, #32]
 8003cee:	415b      	adcs	r3, r3
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	1854      	adds	r4, r2, r1
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	eb43 0501 	adc.w	r5, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	eb45 0303 	adc.w	r3, r5, r3
 8003d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d42:	4629      	mov	r1, r5
 8003d44:	008b      	lsls	r3, r1, #2
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	008a      	lsls	r2, r1, #2
 8003d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d54:	f7fc fa94 	bl	8000280 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b60      	ldr	r3, [pc, #384]	; (8003ee0 <UART_SetConfig+0x4e4>)
 8003d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	011c      	lsls	r4, r3, #4
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	61b9      	str	r1, [r7, #24]
 8003d80:	415b      	adcs	r3, r3
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6139      	str	r1, [r7, #16]
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003de0:	4649      	mov	r1, r9
 8003de2:	008b      	lsls	r3, r1, #2
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dea:	4641      	mov	r1, r8
 8003dec:	008a      	lsls	r2, r1, #2
 8003dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003df2:	f7fc fa45 	bl	8000280 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <UART_SetConfig+0x4e4>)
 8003dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	2164      	movs	r1, #100	; 0x64
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	3332      	adds	r3, #50	; 0x32
 8003e0e:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <UART_SetConfig+0x4e4>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1a:	441c      	add	r4, r3
 8003e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e20:	2200      	movs	r2, #0
 8003e22:	673b      	str	r3, [r7, #112]	; 0x70
 8003e24:	677a      	str	r2, [r7, #116]	; 0x74
 8003e26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e2a:	4642      	mov	r2, r8
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	1891      	adds	r1, r2, r2
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	415b      	adcs	r3, r3
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e3a:	4641      	mov	r1, r8
 8003e3c:	1851      	adds	r1, r2, r1
 8003e3e:	6039      	str	r1, [r7, #0]
 8003e40:	4649      	mov	r1, r9
 8003e42:	414b      	adcs	r3, r1
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e52:	4659      	mov	r1, fp
 8003e54:	00cb      	lsls	r3, r1, #3
 8003e56:	4651      	mov	r1, sl
 8003e58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5c:	4651      	mov	r1, sl
 8003e5e:	00ca      	lsls	r2, r1, #3
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	4603      	mov	r3, r0
 8003e66:	4642      	mov	r2, r8
 8003e68:	189b      	adds	r3, r3, r2
 8003e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	460a      	mov	r2, r1
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e80:	667a      	str	r2, [r7, #100]	; 0x64
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e8e:	4649      	mov	r1, r9
 8003e90:	008b      	lsls	r3, r1, #2
 8003e92:	4641      	mov	r1, r8
 8003e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e98:	4641      	mov	r1, r8
 8003e9a:	008a      	lsls	r2, r1, #2
 8003e9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ea0:	f7fc f9ee 	bl	8000280 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <UART_SetConfig+0x4e4>)
 8003eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2164      	movs	r1, #100	; 0x64
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	3332      	adds	r3, #50	; 0x32
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <UART_SetConfig+0x4e4>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4422      	add	r2, r4
 8003ed0:	609a      	str	r2, [r3, #8]
}
 8003ed2:	bf00      	nop
 8003ed4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	51eb851f 	.word	0x51eb851f

08003ee4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef6:	2b84      	cmp	r3, #132	; 0x84
 8003ef8:	d005      	beq.n	8003f06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003efa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	3303      	adds	r3, #3
 8003f04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f06:	68fb      	ldr	r3, [r7, #12]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f18:	f000 ff3e 	bl	8004d98 <vTaskStartScheduler>
  
  return osOK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f24:	b089      	sub	sp, #36	; 0x24
 8003f26:	af04      	add	r7, sp, #16
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <osThreadCreate+0x54>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01c      	beq.n	8003f76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685c      	ldr	r4, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681d      	ldr	r5, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691e      	ldr	r6, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ffc8 	bl	8003ee4 <makeFreeRtosPriority>
 8003f54:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f5e:	9202      	str	r2, [sp, #8]
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	9100      	str	r1, [sp, #0]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4632      	mov	r2, r6
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 fd36 	bl	80049dc <xTaskCreateStatic>
 8003f70:	4603      	mov	r3, r0
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e01c      	b.n	8003fb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685c      	ldr	r4, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f82:	b29e      	uxth	r6, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ffaa 	bl	8003ee4 <makeFreeRtosPriority>
 8003f90:	4602      	mov	r2, r0
 8003f92:	f107 030c 	add.w	r3, r7, #12
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	9200      	str	r2, [sp, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	4632      	mov	r2, r6
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f000 fd78 	bl	8004a96 <xTaskCreate>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f103 0208 	add.w	r2, r3, #8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f103 0208 	add.w	r2, r3, #8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f103 0208 	add.w	r2, r3, #8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d103      	bne.n	800407c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e00c      	b.n	8004096 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3308      	adds	r3, #8
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e002      	b.n	800408a <vListInsert+0x2e>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d2f6      	bcs.n	8004084 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	601a      	str	r2, [r3, #0]
}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6892      	ldr	r2, [r2, #8]
 80040e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6852      	ldr	r2, [r2, #4]
 80040ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d103      	bne.n	8004102 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	1e5a      	subs	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800414e:	f001 fd89 	bl	8005c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	441a      	add	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	3b01      	subs	r3, #1
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	22ff      	movs	r2, #255	; 0xff
 800419a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d114      	bne.n	80041ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01a      	beq.n	80041e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3310      	adds	r3, #16
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 f843 	bl	800523c <xTaskRemoveFromEventList>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d012      	beq.n	80041e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <xQueueGenericReset+0xcc>)
 80041be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	e009      	b.n	80041e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3310      	adds	r3, #16
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fef1 	bl	8003fba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff feec 	bl	8003fba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041e2:	f001 fd6f 	bl	8005cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041e6:	2301      	movs	r3, #1
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	613b      	str	r3, [r7, #16]
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	3348      	adds	r3, #72	; 0x48
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fe3b 	bl	8005ea8 <pvPortMalloc>
 8004232:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d011      	beq.n	800425e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	3348      	adds	r3, #72	; 0x48
 8004242:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800424c:	79fa      	ldrb	r2, [r7, #7]
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f805 	bl	8004268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800425e:	69bb      	ldr	r3, [r7, #24]
	}
 8004260:	4618      	mov	r0, r3
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e002      	b.n	800428a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004296:	2101      	movs	r1, #1
 8004298:	69b8      	ldr	r0, [r7, #24]
 800429a:	f7ff ff43 	bl	8004124 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08e      	sub	sp, #56	; 0x38
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042b6:	2300      	movs	r3, #0
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xQueueGenericSend+0x32>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d103      	bne.n	80042e8 <xQueueGenericSend+0x40>
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <xQueueGenericSend+0x44>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <xQueueGenericSend+0x46>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <xQueueGenericSend+0x60>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d103      	bne.n	8004316 <xQueueGenericSend+0x6e>
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <xQueueGenericSend+0x72>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <xQueueGenericSend+0x74>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xQueueGenericSend+0x8e>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	623b      	str	r3, [r7, #32]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004336:	f001 f943 	bl	80055c0 <xTaskGetSchedulerState>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <xQueueGenericSend+0x9e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <xQueueGenericSend+0xa2>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <xQueueGenericSend+0xa4>
 800434a:	2300      	movs	r3, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <xQueueGenericSend+0xbe>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	61fb      	str	r3, [r7, #28]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004366:	f001 fc7d 	bl	8005c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <xQueueGenericSend+0xd4>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d129      	bne.n	80043d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004382:	f000 fa41 	bl	8004808 <prvCopyDataToQueue>
 8004386:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	3324      	adds	r3, #36	; 0x24
 8004394:	4618      	mov	r0, r3
 8004396:	f000 ff51 	bl	800523c <xTaskRemoveFromEventList>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043a0:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <xQueueGenericSend+0x1f8>)
 80043a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	e00a      	b.n	80043c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043b8:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <xQueueGenericSend+0x1f8>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043c8:	f001 fc7c 	bl	8005cc4 <vPortExitCritical>
				return pdPASS;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e063      	b.n	8004498 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043d6:	f001 fc75 	bl	8005cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	e05c      	b.n	8004498 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 ff89 	bl	8005300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043ee:	2301      	movs	r3, #1
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043f2:	f001 fc67 	bl	8005cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043f6:	f000 fd39 	bl	8004e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043fa:	f001 fc33 	bl	8005c64 <vPortEnterCritical>
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004404:	b25b      	sxtb	r3, r3
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d103      	bne.n	8004414 <xQueueGenericSend+0x16c>
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800441a:	b25b      	sxtb	r3, r3
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d103      	bne.n	800442a <xQueueGenericSend+0x182>
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800442a:	f001 fc4b 	bl	8005cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800442e:	1d3a      	adds	r2, r7, #4
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4611      	mov	r1, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f000 ff78 	bl	800532c <xTaskCheckForTimeOut>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d124      	bne.n	800448c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004444:	f000 fab2 	bl	80049ac <prvIsQueueFull>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d018      	beq.n	8004480 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	3310      	adds	r3, #16
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fecc 	bl	80051f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800445c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800445e:	f000 fa3d 	bl	80048dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004462:	f000 fd11 	bl	8004e88 <xTaskResumeAll>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	f47f af7c 	bne.w	8004366 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <xQueueGenericSend+0x1f8>)
 8004470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	e772      	b.n	8004366 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004482:	f000 fa2b 	bl	80048dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004486:	f000 fcff 	bl	8004e88 <xTaskResumeAll>
 800448a:	e76c      	b.n	8004366 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800448c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800448e:	f000 fa25 	bl	80048dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004492:	f000 fcf9 	bl	8004e88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004496:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004498:	4618      	mov	r0, r3
 800449a:	3738      	adds	r7, #56	; 0x38
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08e      	sub	sp, #56	; 0x38
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <xQueueGiveFromISR+0x2a>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	623b      	str	r3, [r7, #32]
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <xQueueGiveFromISR+0x48>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	61fb      	str	r3, [r7, #28]
}
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <xQueueGiveFromISR+0x58>
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <xQueueGiveFromISR+0x5c>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <xQueueGiveFromISR+0x5e>
 8004500:	2300      	movs	r3, #0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	61bb      	str	r3, [r7, #24]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800451c:	f001 fc84 	bl	8005e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004520:	f3ef 8211 	mrs	r2, BASEPRI
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	617a      	str	r2, [r7, #20]
 8004536:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004538:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004548:	429a      	cmp	r2, r3
 800454a:	d22b      	bcs.n	80045a4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800455e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004566:	d112      	bne.n	800458e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b00      	cmp	r3, #0
 800456e:	d016      	beq.n	800459e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	3324      	adds	r3, #36	; 0x24
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fe61 	bl	800523c <xTaskRemoveFromEventList>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00e      	beq.n	800459e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e007      	b.n	800459e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800458e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004592:	3301      	adds	r3, #1
 8004594:	b2db      	uxtb	r3, r3
 8004596:	b25a      	sxtb	r2, r3
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800459e:	2301      	movs	r3, #1
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
 80045a2:	e001      	b.n	80045a8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045aa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3738      	adds	r7, #56	; 0x38
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08e      	sub	sp, #56	; 0x38
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80045d2:	2300      	movs	r3, #0
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	623b      	str	r3, [r7, #32]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	61fb      	str	r3, [r7, #28]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004610:	f000 ffd6 	bl	80055c0 <xTaskGetSchedulerState>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <xQueueSemaphoreTake+0x60>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <xQueueSemaphoreTake+0x64>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <xQueueSemaphoreTake+0x66>
 8004624:	2300      	movs	r3, #0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	61bb      	str	r3, [r7, #24]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004640:	f001 fb10 	bl	8005c64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d024      	beq.n	800469a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	1e5a      	subs	r2, r3, #1
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004660:	f001 f956 	bl	8005910 <pvTaskIncrementMutexHeldCount>
 8004664:	4602      	mov	r2, r0
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00f      	beq.n	8004692 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	3310      	adds	r3, #16
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fde0 	bl	800523c <xTaskRemoveFromEventList>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004682:	4b54      	ldr	r3, [pc, #336]	; (80047d4 <xQueueSemaphoreTake+0x214>)
 8004684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004692:	f001 fb17 	bl	8005cc4 <vPortExitCritical>
				return pdPASS;
 8004696:	2301      	movs	r3, #1
 8004698:	e097      	b.n	80047ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d111      	bne.n	80046c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	617b      	str	r3, [r7, #20]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80046bc:	f001 fb02 	bl	8005cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e082      	b.n	80047ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046ca:	f107 030c 	add.w	r3, r7, #12
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fe16 	bl	8005300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046d8:	f001 faf4 	bl	8005cc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046dc:	f000 fbc6 	bl	8004e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046e0:	f001 fac0 	bl	8005c64 <vPortEnterCritical>
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ea:	b25b      	sxtb	r3, r3
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d103      	bne.n	80046fa <xQueueSemaphoreTake+0x13a>
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004700:	b25b      	sxtb	r3, r3
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d103      	bne.n	8004710 <xQueueSemaphoreTake+0x150>
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004710:	f001 fad8 	bl	8005cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004714:	463a      	mov	r2, r7
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fe05 	bl	800532c <xTaskCheckForTimeOut>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d132      	bne.n	800478e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800472a:	f000 f929 	bl	8004980 <prvIsQueueEmpty>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d026      	beq.n	8004782 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800473c:	f001 fa92 	bl	8005c64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 ff59 	bl	80055fc <xTaskPriorityInherit>
 800474a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800474c:	f001 faba 	bl	8005cc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	3324      	adds	r3, #36	; 0x24
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fd4b 	bl	80051f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800475e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004760:	f000 f8bc 	bl	80048dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004764:	f000 fb90 	bl	8004e88 <xTaskResumeAll>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	f47f af68 	bne.w	8004640 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004770:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <xQueueSemaphoreTake+0x214>)
 8004772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	e75e      	b.n	8004640 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004784:	f000 f8aa 	bl	80048dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004788:	f000 fb7e 	bl	8004e88 <xTaskResumeAll>
 800478c:	e758      	b.n	8004640 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800478e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004790:	f000 f8a4 	bl	80048dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004794:	f000 fb78 	bl	8004e88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800479a:	f000 f8f1 	bl	8004980 <prvIsQueueEmpty>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f43f af4d 	beq.w	8004640 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00d      	beq.n	80047c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80047ac:	f001 fa5a 	bl	8005c64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80047b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047b2:	f000 f811 	bl	80047d8 <prvGetDisinheritPriorityAfterTimeout>
 80047b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 f818 	bl	80057f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80047c4:	f001 fa7e 	bl	8005cc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3738      	adds	r7, #56	; 0x38
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1c3 0307 	rsb	r3, r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e001      	b.n	80047fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80047fa:	68fb      	ldr	r3, [r7, #12]
	}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10d      	bne.n	8004842 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d14d      	bne.n	80048ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 ff58 	bl	80056e8 <xTaskPriorityDisinherit>
 8004838:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	e043      	b.n	80048ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d119      	bne.n	800487c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6858      	ldr	r0, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	461a      	mov	r2, r3
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	f001 fd3e 	bl	80062d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	441a      	add	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	d32b      	bcc.n	80048ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	e026      	b.n	80048ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68d8      	ldr	r0, [r3, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	461a      	mov	r2, r3
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	f001 fd24 	bl	80062d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	425b      	negs	r3, r3
 8004896:	441a      	add	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d207      	bcs.n	80048b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	425b      	negs	r3, r3
 80048b2:	441a      	add	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d105      	bne.n	80048ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048d2:	697b      	ldr	r3, [r7, #20]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048e4:	f001 f9be 	bl	8005c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048f0:	e011      	b.n	8004916 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d012      	beq.n	8004920 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3324      	adds	r3, #36	; 0x24
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fc9c 	bl	800523c <xTaskRemoveFromEventList>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800490a:	f000 fd71 	bl	80053f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	3b01      	subs	r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	dce9      	bgt.n	80048f2 <prvUnlockQueue+0x16>
 800491e:	e000      	b.n	8004922 <prvUnlockQueue+0x46>
					break;
 8004920:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800492a:	f001 f9cb 	bl	8005cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800492e:	f001 f999 	bl	8005c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004938:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800493a:	e011      	b.n	8004960 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3310      	adds	r3, #16
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fc77 	bl	800523c <xTaskRemoveFromEventList>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004954:	f000 fd4c 	bl	80053f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004958:	7bbb      	ldrb	r3, [r7, #14]
 800495a:	3b01      	subs	r3, #1
 800495c:	b2db      	uxtb	r3, r3
 800495e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004964:	2b00      	cmp	r3, #0
 8004966:	dce9      	bgt.n	800493c <prvUnlockQueue+0x60>
 8004968:	e000      	b.n	800496c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800496a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004974:	f001 f9a6 	bl	8005cc4 <vPortExitCritical>
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004988:	f001 f96c 	bl	8005c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004994:	2301      	movs	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e001      	b.n	800499e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800499e:	f001 f991 	bl	8005cc4 <vPortExitCritical>

	return xReturn;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049b4:	f001 f956 	bl	8005c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d102      	bne.n	80049ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049c4:	2301      	movs	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e001      	b.n	80049ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049ce:	f001 f979 	bl	8005cc4 <vPortExitCritical>

	return xReturn;
 80049d2:	68fb      	ldr	r3, [r7, #12]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	; 0x38
 80049e0:	af04      	add	r7, sp, #16
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xTaskCreateStatic+0x2a>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	623b      	str	r3, [r7, #32]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	61fb      	str	r3, [r7, #28]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a22:	23b4      	movs	r3, #180	; 0xb4
 8004a24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2bb4      	cmp	r3, #180	; 0xb4
 8004a2a:	d00a      	beq.n	8004a42 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	61bb      	str	r3, [r7, #24]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01e      	beq.n	8004a88 <xTaskCreateStatic+0xac>
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01b      	beq.n	8004a88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a62:	2300      	movs	r3, #0
 8004a64:	9303      	str	r3, [sp, #12]
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	9302      	str	r3, [sp, #8]
 8004a6a:	f107 0314 	add.w	r3, r7, #20
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f850 	bl	8004b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a82:	f000 f8eb 	bl	8004c5c <prvAddNewTaskToReadyList>
 8004a86:	e001      	b.n	8004a8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a8c:	697b      	ldr	r3, [r7, #20]
	}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b08c      	sub	sp, #48	; 0x30
 8004a9a:	af04      	add	r7, sp, #16
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f001 f9fc 	bl	8005ea8 <pvPortMalloc>
 8004ab0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ab8:	20b4      	movs	r0, #180	; 0xb4
 8004aba:	f001 f9f5 	bl	8005ea8 <pvPortMalloc>
 8004abe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
 8004acc:	e005      	b.n	8004ada <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f001 fab6 	bl	8006040 <vPortFree>
 8004ad4:	e001      	b.n	8004ada <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d017      	beq.n	8004b10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9303      	str	r3, [sp, #12]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	9302      	str	r3, [sp, #8]
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f80e 	bl	8004b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b04:	69f8      	ldr	r0, [r7, #28]
 8004b06:	f000 f8a9 	bl	8004c5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	e002      	b.n	8004b16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295
 8004b14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b16:	69bb      	ldr	r3, [r7, #24]
	}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f023 0307 	bic.w	r3, r3, #7
 8004b46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	617b      	str	r3, [r7, #20]
}
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01f      	beq.n	8004bae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e012      	b.n	8004b9a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	7819      	ldrb	r1, [r3, #0]
 8004b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	3334      	adds	r3, #52	; 0x34
 8004b84:	460a      	mov	r2, r1
 8004b86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d006      	beq.n	8004ba2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	2b0f      	cmp	r3, #15
 8004b9e:	d9e9      	bls.n	8004b74 <prvInitialiseNewTask+0x54>
 8004ba0:	e000      	b.n	8004ba4 <prvInitialiseNewTask+0x84>
			{
				break;
 8004ba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bac:	e003      	b.n	8004bb6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	2b06      	cmp	r3, #6
 8004bba:	d901      	bls.n	8004bc0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bbc:	2306      	movs	r3, #6
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	2200      	movs	r2, #0
 8004bd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fa0f 	bl	8003ffa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	3318      	adds	r3, #24
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fa0a 	bl	8003ffa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f1c3 0207 	rsb	r2, r3, #7
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	334c      	adds	r3, #76	; 0x4c
 8004c10:	2260      	movs	r2, #96	; 0x60
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 fb6b 	bl	80062f0 <memset>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	4a0c      	ldr	r2, [pc, #48]	; (8004c50 <prvInitialiseNewTask+0x130>)
 8004c1e:	651a      	str	r2, [r3, #80]	; 0x50
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	4a0c      	ldr	r2, [pc, #48]	; (8004c54 <prvInitialiseNewTask+0x134>)
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	4a0b      	ldr	r2, [pc, #44]	; (8004c58 <prvInitialiseNewTask+0x138>)
 8004c2a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	69b8      	ldr	r0, [r7, #24]
 8004c32:	f000 fee7 	bl	8005a04 <pxPortInitialiseStack>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c48:	bf00      	nop
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	08006d30 	.word	0x08006d30
 8004c54:	08006d50 	.word	0x08006d50
 8004c58:	08006d10 	.word	0x08006d10

08004c5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c64:	f000 fffe 	bl	8005c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c68:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <prvAddNewTaskToReadyList+0xb8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	4a29      	ldr	r2, [pc, #164]	; (8004d14 <prvAddNewTaskToReadyList+0xb8>)
 8004c70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c7a:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c80:	4b24      	ldr	r3, [pc, #144]	; (8004d14 <prvAddNewTaskToReadyList+0xb8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d110      	bne.n	8004caa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c88:	f000 fbd8 	bl	800543c <prvInitialiseTaskLists>
 8004c8c:	e00d      	b.n	8004caa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <prvAddNewTaskToReadyList+0xc0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c96:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d802      	bhi.n	8004caa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004caa:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <prvAddNewTaskToReadyList+0xc4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <prvAddNewTaskToReadyList+0xc4>)
 8004cb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	2201      	movs	r2, #1
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <prvAddNewTaskToReadyList+0xc8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <prvAddNewTaskToReadyList+0xc8>)
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <prvAddNewTaskToReadyList+0xcc>)
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f7ff f999 	bl	8004014 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ce2:	f000 ffef 	bl	8005cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <prvAddNewTaskToReadyList+0xc0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00e      	beq.n	8004d0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d207      	bcs.n	8004d0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <prvAddNewTaskToReadyList+0xd0>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	200005d8 	.word	0x200005d8
 8004d18:	200004d8 	.word	0x200004d8
 8004d1c:	200005e4 	.word	0x200005e4
 8004d20:	200005f4 	.word	0x200005f4
 8004d24:	200005e0 	.word	0x200005e0
 8004d28:	200004dc 	.word	0x200004dc
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d42:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <vTaskDelay+0x60>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <vTaskDelay+0x30>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	60bb      	str	r3, [r7, #8]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d60:	f000 f884 	bl	8004e6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d64:	2100      	movs	r1, #0
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fde6 	bl	8005938 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d6c:	f000 f88c 	bl	8004e88 <xTaskResumeAll>
 8004d70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <vTaskDelay+0x64>)
 8004d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000600 	.word	0x20000600
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004da6:	463a      	mov	r2, r7
 8004da8:	1d39      	adds	r1, r7, #4
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fb fbf0 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	9202      	str	r2, [sp, #8]
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	460a      	mov	r2, r1
 8004dc6:	4921      	ldr	r1, [pc, #132]	; (8004e4c <vTaskStartScheduler+0xb4>)
 8004dc8:	4821      	ldr	r0, [pc, #132]	; (8004e50 <vTaskStartScheduler+0xb8>)
 8004dca:	f7ff fe07 	bl	80049dc <xTaskCreateStatic>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4a20      	ldr	r2, [pc, #128]	; (8004e54 <vTaskStartScheduler+0xbc>)
 8004dd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <vTaskStartScheduler+0xbc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e001      	b.n	8004de6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d11b      	bne.n	8004e24 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	613b      	str	r3, [r7, #16]
}
 8004dfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e00:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <vTaskStartScheduler+0xc0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	334c      	adds	r3, #76	; 0x4c
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <vTaskStartScheduler+0xc4>)
 8004e08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <vTaskStartScheduler+0xc8>)
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <vTaskStartScheduler+0xcc>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <vTaskStartScheduler+0xd0>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e1e:	f000 fe7f 	bl	8005b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e22:	e00e      	b.n	8004e42 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d10a      	bne.n	8004e42 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <vTaskStartScheduler+0xa8>
}
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08006cf0 	.word	0x08006cf0
 8004e50:	08005409 	.word	0x08005409
 8004e54:	200005fc 	.word	0x200005fc
 8004e58:	200004d8 	.word	0x200004d8
 8004e5c:	20000010 	.word	0x20000010
 8004e60:	200005f8 	.word	0x200005f8
 8004e64:	200005e4 	.word	0x200005e4
 8004e68:	200005dc 	.word	0x200005dc

08004e6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <vTaskSuspendAll+0x18>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	4a03      	ldr	r2, [pc, #12]	; (8004e84 <vTaskSuspendAll+0x18>)
 8004e78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e7a:	bf00      	nop
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	20000600 	.word	0x20000600

08004e88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e96:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <xTaskResumeAll+0x114>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	603b      	str	r3, [r7, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004eb4:	f000 fed6 	bl	8005c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eb8:	4b38      	ldr	r3, [pc, #224]	; (8004f9c <xTaskResumeAll+0x114>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	4a37      	ldr	r2, [pc, #220]	; (8004f9c <xTaskResumeAll+0x114>)
 8004ec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec2:	4b36      	ldr	r3, [pc, #216]	; (8004f9c <xTaskResumeAll+0x114>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d161      	bne.n	8004f8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eca:	4b35      	ldr	r3, [pc, #212]	; (8004fa0 <xTaskResumeAll+0x118>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d05d      	beq.n	8004f8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ed2:	e02e      	b.n	8004f32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <xTaskResumeAll+0x11c>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3318      	adds	r3, #24
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff f8f4 	bl	80040ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f8ef 	bl	80040ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <xTaskResumeAll+0x120>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	4a2a      	ldr	r2, [pc, #168]	; (8004fa8 <xTaskResumeAll+0x120>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4a27      	ldr	r2, [pc, #156]	; (8004fac <xTaskResumeAll+0x124>)
 8004f10:	441a      	add	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7ff f87b 	bl	8004014 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	4b23      	ldr	r3, [pc, #140]	; (8004fb0 <xTaskResumeAll+0x128>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <xTaskResumeAll+0x12c>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f32:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <xTaskResumeAll+0x11c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1cc      	bne.n	8004ed4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f40:	f000 fb1e 	bl	8005580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f44:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <xTaskResumeAll+0x130>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d010      	beq.n	8004f72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f50:	f000 f836 	bl	8004fc0 <xTaskIncrementTick>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f5a:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <xTaskResumeAll+0x12c>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f1      	bne.n	8004f50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004f6c:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <xTaskResumeAll+0x130>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <xTaskResumeAll+0x12c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <xTaskResumeAll+0x134>)
 8004f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f8e:	f000 fe99 	bl	8005cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8004f92:	68bb      	ldr	r3, [r7, #8]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000600 	.word	0x20000600
 8004fa0:	200005d8 	.word	0x200005d8
 8004fa4:	20000598 	.word	0x20000598
 8004fa8:	200005e0 	.word	0x200005e0
 8004fac:	200004dc 	.word	0x200004dc
 8004fb0:	200004d8 	.word	0x200004d8
 8004fb4:	200005ec 	.word	0x200005ec
 8004fb8:	200005e8 	.word	0x200005e8
 8004fbc:	e000ed04 	.word	0xe000ed04

08004fc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fca:	4b4e      	ldr	r3, [pc, #312]	; (8005104 <xTaskIncrementTick+0x144>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 808e 	bne.w	80050f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fd4:	4b4c      	ldr	r3, [pc, #304]	; (8005108 <xTaskIncrementTick+0x148>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fdc:	4a4a      	ldr	r2, [pc, #296]	; (8005108 <xTaskIncrementTick+0x148>)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d120      	bne.n	800502a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fe8:	4b48      	ldr	r3, [pc, #288]	; (800510c <xTaskIncrementTick+0x14c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	603b      	str	r3, [r7, #0]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xTaskIncrementTick+0x46>
 8005008:	4b40      	ldr	r3, [pc, #256]	; (800510c <xTaskIncrementTick+0x14c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4b40      	ldr	r3, [pc, #256]	; (8005110 <xTaskIncrementTick+0x150>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a3e      	ldr	r2, [pc, #248]	; (800510c <xTaskIncrementTick+0x14c>)
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4a3e      	ldr	r2, [pc, #248]	; (8005110 <xTaskIncrementTick+0x150>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	4b3d      	ldr	r3, [pc, #244]	; (8005114 <xTaskIncrementTick+0x154>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	4a3c      	ldr	r2, [pc, #240]	; (8005114 <xTaskIncrementTick+0x154>)
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	f000 faab 	bl	8005580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800502a:	4b3b      	ldr	r3, [pc, #236]	; (8005118 <xTaskIncrementTick+0x158>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d348      	bcc.n	80050c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005034:	4b35      	ldr	r3, [pc, #212]	; (800510c <xTaskIncrementTick+0x14c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800503e:	4b36      	ldr	r3, [pc, #216]	; (8005118 <xTaskIncrementTick+0x158>)
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	601a      	str	r2, [r3, #0]
					break;
 8005046:	e03e      	b.n	80050c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005048:	4b30      	ldr	r3, [pc, #192]	; (800510c <xTaskIncrementTick+0x14c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d203      	bcs.n	8005068 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005060:	4a2d      	ldr	r2, [pc, #180]	; (8005118 <xTaskIncrementTick+0x158>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005066:	e02e      	b.n	80050c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	3304      	adds	r3, #4
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff f82e 	bl	80040ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	3318      	adds	r3, #24
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff f825 	bl	80040ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	2201      	movs	r2, #1
 800508a:	409a      	lsls	r2, r3
 800508c:	4b23      	ldr	r3, [pc, #140]	; (800511c <xTaskIncrementTick+0x15c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4313      	orrs	r3, r2
 8005092:	4a22      	ldr	r2, [pc, #136]	; (800511c <xTaskIncrementTick+0x15c>)
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <xTaskIncrementTick+0x160>)
 80050a4:	441a      	add	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f7fe ffb1 	bl	8004014 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b6:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <xTaskIncrementTick+0x164>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3b9      	bcc.n	8005034 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050c4:	e7b6      	b.n	8005034 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050c6:	4b17      	ldr	r3, [pc, #92]	; (8005124 <xTaskIncrementTick+0x164>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	4914      	ldr	r1, [pc, #80]	; (8005120 <xTaskIncrementTick+0x160>)
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d901      	bls.n	80050e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80050de:	2301      	movs	r3, #1
 80050e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050e2:	4b11      	ldr	r3, [pc, #68]	; (8005128 <xTaskIncrementTick+0x168>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80050ea:	2301      	movs	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e004      	b.n	80050fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050f0:	4b0e      	ldr	r3, [pc, #56]	; (800512c <xTaskIncrementTick+0x16c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	4a0d      	ldr	r2, [pc, #52]	; (800512c <xTaskIncrementTick+0x16c>)
 80050f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050fa:	697b      	ldr	r3, [r7, #20]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000600 	.word	0x20000600
 8005108:	200005dc 	.word	0x200005dc
 800510c:	20000590 	.word	0x20000590
 8005110:	20000594 	.word	0x20000594
 8005114:	200005f0 	.word	0x200005f0
 8005118:	200005f8 	.word	0x200005f8
 800511c:	200005e0 	.word	0x200005e0
 8005120:	200004dc 	.word	0x200004dc
 8005124:	200004d8 	.word	0x200004d8
 8005128:	200005ec 	.word	0x200005ec
 800512c:	200005e8 	.word	0x200005e8

08005130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005136:	4b29      	ldr	r3, [pc, #164]	; (80051dc <vTaskSwitchContext+0xac>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800513e:	4b28      	ldr	r3, [pc, #160]	; (80051e0 <vTaskSwitchContext+0xb0>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005144:	e044      	b.n	80051d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005146:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <vTaskSwitchContext+0xb0>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <vTaskSwitchContext+0xb4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	fab3 f383 	clz	r3, r3
 8005158:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800515a:	7afb      	ldrb	r3, [r7, #11]
 800515c:	f1c3 031f 	rsb	r3, r3, #31
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	4921      	ldr	r1, [pc, #132]	; (80051e8 <vTaskSwitchContext+0xb8>)
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	607b      	str	r3, [r7, #4]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <vTaskSwitchContext+0x5a>
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <vTaskSwitchContext+0xb8>)
 8005198:	4413      	add	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	3308      	adds	r3, #8
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d104      	bne.n	80051bc <vTaskSwitchContext+0x8c>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <vTaskSwitchContext+0xbc>)
 80051c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <vTaskSwitchContext+0xbc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	334c      	adds	r3, #76	; 0x4c
 80051cc:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <vTaskSwitchContext+0xc0>)
 80051ce:	6013      	str	r3, [r2, #0]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000600 	.word	0x20000600
 80051e0:	200005ec 	.word	0x200005ec
 80051e4:	200005e0 	.word	0x200005e0
 80051e8:	200004dc 	.word	0x200004dc
 80051ec:	200004d8 	.word	0x200004d8
 80051f0:	20000010 	.word	0x20000010

080051f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <vTaskPlaceOnEventList+0x44>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3318      	adds	r3, #24
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fe ff1a 	bl	800405c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005228:	2101      	movs	r1, #1
 800522a:	6838      	ldr	r0, [r7, #0]
 800522c:	f000 fb84 	bl	8005938 <prvAddCurrentTaskToDelayedList>
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	200004d8 	.word	0x200004d8

0800523c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	60fb      	str	r3, [r7, #12]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	3318      	adds	r3, #24
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe ff2e 	bl	80040ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <xTaskRemoveFromEventList+0xac>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d11c      	bne.n	80052b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe ff25 	bl	80040ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	2201      	movs	r2, #1
 800528a:	409a      	lsls	r2, r3
 800528c:	4b17      	ldr	r3, [pc, #92]	; (80052ec <xTaskRemoveFromEventList+0xb0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4313      	orrs	r3, r2
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <xTaskRemoveFromEventList+0xb0>)
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <xTaskRemoveFromEventList+0xb4>)
 80052a4:	441a      	add	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7fe feb1 	bl	8004014 <vListInsertEnd>
 80052b2:	e005      	b.n	80052c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3318      	adds	r3, #24
 80052b8:	4619      	mov	r1, r3
 80052ba:	480e      	ldr	r0, [pc, #56]	; (80052f4 <xTaskRemoveFromEventList+0xb8>)
 80052bc:	f7fe feaa 	bl	8004014 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <xTaskRemoveFromEventList+0xbc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d905      	bls.n	80052da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052ce:	2301      	movs	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <xTaskRemoveFromEventList+0xc0>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e001      	b.n	80052de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052de:	697b      	ldr	r3, [r7, #20]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000600 	.word	0x20000600
 80052ec:	200005e0 	.word	0x200005e0
 80052f0:	200004dc 	.word	0x200004dc
 80052f4:	20000598 	.word	0x20000598
 80052f8:	200004d8 	.word	0x200004d8
 80052fc:	200005ec 	.word	0x200005ec

08005300 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <vTaskInternalSetTimeOutState+0x24>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <vTaskInternalSetTimeOutState+0x28>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	605a      	str	r2, [r3, #4]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	200005f0 	.word	0x200005f0
 8005328:	200005dc 	.word	0x200005dc

0800532c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	613b      	str	r3, [r7, #16]
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60fb      	str	r3, [r7, #12]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800536e:	f000 fc79 	bl	8005c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005372:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <xTaskCheckForTimeOut+0xbc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538a:	d102      	bne.n	8005392 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	e023      	b.n	80053da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <xTaskCheckForTimeOut+0xc0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d007      	beq.n	80053ae <xTaskCheckForTimeOut+0x82>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d302      	bcc.n	80053ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053a8:	2301      	movs	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e015      	b.n	80053da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d20b      	bcs.n	80053d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff ff9b 	bl	8005300 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	e004      	b.n	80053da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053d6:	2301      	movs	r3, #1
 80053d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053da:	f000 fc73 	bl	8005cc4 <vPortExitCritical>

	return xReturn;
 80053de:	69fb      	ldr	r3, [r7, #28]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	200005dc 	.word	0x200005dc
 80053ec:	200005f0 	.word	0x200005f0

080053f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053f4:	4b03      	ldr	r3, [pc, #12]	; (8005404 <vTaskMissedYield+0x14>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
}
 80053fa:	bf00      	nop
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	200005ec 	.word	0x200005ec

08005408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005410:	f000 f854 	bl	80054bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <prvIdleTask+0x2c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d907      	bls.n	800542c <prvIdleTask+0x24>
			{
				taskYIELD();
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <prvIdleTask+0x30>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800542c:	f7fb f8aa 	bl	8000584 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005430:	e7ee      	b.n	8005410 <prvIdleTask+0x8>
 8005432:	bf00      	nop
 8005434:	200004dc 	.word	0x200004dc
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	e00c      	b.n	8005462 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4a12      	ldr	r2, [pc, #72]	; (800549c <prvInitialiseTaskLists+0x60>)
 8005454:	4413      	add	r3, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe fdaf 	bl	8003fba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3301      	adds	r3, #1
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b06      	cmp	r3, #6
 8005466:	d9ef      	bls.n	8005448 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005468:	480d      	ldr	r0, [pc, #52]	; (80054a0 <prvInitialiseTaskLists+0x64>)
 800546a:	f7fe fda6 	bl	8003fba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800546e:	480d      	ldr	r0, [pc, #52]	; (80054a4 <prvInitialiseTaskLists+0x68>)
 8005470:	f7fe fda3 	bl	8003fba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005474:	480c      	ldr	r0, [pc, #48]	; (80054a8 <prvInitialiseTaskLists+0x6c>)
 8005476:	f7fe fda0 	bl	8003fba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800547a:	480c      	ldr	r0, [pc, #48]	; (80054ac <prvInitialiseTaskLists+0x70>)
 800547c:	f7fe fd9d 	bl	8003fba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005480:	480b      	ldr	r0, [pc, #44]	; (80054b0 <prvInitialiseTaskLists+0x74>)
 8005482:	f7fe fd9a 	bl	8003fba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <prvInitialiseTaskLists+0x78>)
 8005488:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <prvInitialiseTaskLists+0x64>)
 800548a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <prvInitialiseTaskLists+0x7c>)
 800548e:	4a05      	ldr	r2, [pc, #20]	; (80054a4 <prvInitialiseTaskLists+0x68>)
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200004dc 	.word	0x200004dc
 80054a0:	20000568 	.word	0x20000568
 80054a4:	2000057c 	.word	0x2000057c
 80054a8:	20000598 	.word	0x20000598
 80054ac:	200005ac 	.word	0x200005ac
 80054b0:	200005c4 	.word	0x200005c4
 80054b4:	20000590 	.word	0x20000590
 80054b8:	20000594 	.word	0x20000594

080054bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054c2:	e019      	b.n	80054f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054c4:	f000 fbce 	bl	8005c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <prvCheckTasksWaitingTermination+0x50>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fdfa 	bl	80040ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <prvCheckTasksWaitingTermination+0x54>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3b01      	subs	r3, #1
 80054e0:	4a0b      	ldr	r2, [pc, #44]	; (8005510 <prvCheckTasksWaitingTermination+0x54>)
 80054e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <prvCheckTasksWaitingTermination+0x58>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <prvCheckTasksWaitingTermination+0x58>)
 80054ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054ee:	f000 fbe9 	bl	8005cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f810 	bl	8005518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <prvCheckTasksWaitingTermination+0x58>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e1      	bne.n	80054c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	200005ac 	.word	0x200005ac
 8005510:	200005d8 	.word	0x200005d8
 8005514:	200005c0 	.word	0x200005c0

08005518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	334c      	adds	r3, #76	; 0x4c
 8005524:	4618      	mov	r0, r3
 8005526:	f000 ff8d 	bl	8006444 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d108      	bne.n	8005546 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fd81 	bl	8006040 <vPortFree>
				vPortFree( pxTCB );
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fd7e 	bl	8006040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005544:	e018      	b.n	8005578 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d103      	bne.n	8005558 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fd75 	bl	8006040 <vPortFree>
	}
 8005556:	e00f      	b.n	8005578 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800555e:	2b02      	cmp	r3, #2
 8005560:	d00a      	beq.n	8005578 <prvDeleteTCB+0x60>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	60fb      	str	r3, [r7, #12]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <prvDeleteTCB+0x5e>
	}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <prvResetNextTaskUnblockTime+0x38>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <prvResetNextTaskUnblockTime+0x3c>)
 8005592:	f04f 32ff 	mov.w	r2, #4294967295
 8005596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005598:	e008      	b.n	80055ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <prvResetNextTaskUnblockTime+0x38>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <prvResetNextTaskUnblockTime+0x3c>)
 80055aa:	6013      	str	r3, [r2, #0]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	20000590 	.word	0x20000590
 80055bc:	200005f8 	.word	0x200005f8

080055c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <xTaskGetSchedulerState+0x34>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055ce:	2301      	movs	r3, #1
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	e008      	b.n	80055e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055d4:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <xTaskGetSchedulerState+0x38>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055dc:	2302      	movs	r3, #2
 80055de:	607b      	str	r3, [r7, #4]
 80055e0:	e001      	b.n	80055e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055e2:	2300      	movs	r3, #0
 80055e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055e6:	687b      	ldr	r3, [r7, #4]
	}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	200005e4 	.word	0x200005e4
 80055f8:	20000600 	.word	0x20000600

080055fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d05e      	beq.n	80056d0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005616:	4b31      	ldr	r3, [pc, #196]	; (80056dc <xTaskPriorityInherit+0xe0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	429a      	cmp	r2, r3
 800561e:	d24e      	bcs.n	80056be <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	db06      	blt.n	8005636 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005628:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <xTaskPriorityInherit+0xe0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	f1c3 0207 	rsb	r2, r3, #7
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6959      	ldr	r1, [r3, #20]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4a26      	ldr	r2, [pc, #152]	; (80056e0 <xTaskPriorityInherit+0xe4>)
 8005648:	4413      	add	r3, r2
 800564a:	4299      	cmp	r1, r3
 800564c:	d12f      	bne.n	80056ae <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3304      	adds	r3, #4
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fd3b 	bl	80040ce <uxListRemove>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	2201      	movs	r2, #1
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	43da      	mvns	r2, r3
 800566a:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <xTaskPriorityInherit+0xe8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4013      	ands	r3, r2
 8005670:	4a1c      	ldr	r2, [pc, #112]	; (80056e4 <xTaskPriorityInherit+0xe8>)
 8005672:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005674:	4b19      	ldr	r3, [pc, #100]	; (80056dc <xTaskPriorityInherit+0xe0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	2201      	movs	r2, #1
 8005684:	409a      	lsls	r2, r3
 8005686:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <xTaskPriorityInherit+0xe8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4313      	orrs	r3, r2
 800568c:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <xTaskPriorityInherit+0xe8>)
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <xTaskPriorityInherit+0xe4>)
 800569e:	441a      	add	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7fe fcb4 	bl	8004014 <vListInsertEnd>
 80056ac:	e004      	b.n	80056b8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <xTaskPriorityInherit+0xe0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e008      	b.n	80056d0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <xTaskPriorityInherit+0xe0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d201      	bcs.n	80056d0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056d0:	68fb      	ldr	r3, [r7, #12]
	}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200004d8 	.word	0x200004d8
 80056e0:	200004dc 	.word	0x200004dc
 80056e4:	200005e0 	.word	0x200005e0

080056e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d06e      	beq.n	80057dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056fe:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <xTaskPriorityDisinherit+0x100>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	429a      	cmp	r2, r3
 8005706:	d00a      	beq.n	800571e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60bb      	str	r3, [r7, #8]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005740:	1e5a      	subs	r2, r3, #1
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	429a      	cmp	r2, r3
 8005750:	d044      	beq.n	80057dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005756:	2b00      	cmp	r3, #0
 8005758:	d140      	bne.n	80057dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3304      	adds	r3, #4
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fcb5 	bl	80040ce <uxListRemove>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d115      	bne.n	8005796 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576e:	491f      	ldr	r1, [pc, #124]	; (80057ec <xTaskPriorityDisinherit+0x104>)
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xTaskPriorityDisinherit+0xae>
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	2201      	movs	r2, #1
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43da      	mvns	r2, r3
 800578c:	4b18      	ldr	r3, [pc, #96]	; (80057f0 <xTaskPriorityDisinherit+0x108>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4013      	ands	r3, r2
 8005792:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <xTaskPriorityDisinherit+0x108>)
 8005794:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	f1c3 0207 	rsb	r2, r3, #7
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	2201      	movs	r2, #1
 80057b0:	409a      	lsls	r2, r3
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <xTaskPriorityDisinherit+0x108>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	4a0d      	ldr	r2, [pc, #52]	; (80057f0 <xTaskPriorityDisinherit+0x108>)
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4a08      	ldr	r2, [pc, #32]	; (80057ec <xTaskPriorityDisinherit+0x104>)
 80057ca:	441a      	add	r2, r3
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f7fe fc1e 	bl	8004014 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057dc:	697b      	ldr	r3, [r7, #20]
	}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	200004d8 	.word	0x200004d8
 80057ec:	200004dc 	.word	0x200004dc
 80057f0:	200005e0 	.word	0x200005e0

080057f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005802:	2301      	movs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d077      	beq.n	80058fc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	60fb      	str	r3, [r7, #12]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d902      	bls.n	800583a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	e002      	b.n	8005840 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	429a      	cmp	r2, r3
 8005848:	d058      	beq.n	80058fc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	429a      	cmp	r2, r3
 8005852:	d153      	bne.n	80058fc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005854:	4b2b      	ldr	r3, [pc, #172]	; (8005904 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	429a      	cmp	r2, r3
 800585c:	d10a      	bne.n	8005874 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	60bb      	str	r3, [r7, #8]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	db04      	blt.n	8005892 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f1c3 0207 	rsb	r2, r3, #7
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	6959      	ldr	r1, [r3, #20]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4a19      	ldr	r2, [pc, #100]	; (8005908 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80058a2:	4413      	add	r3, r2
 80058a4:	4299      	cmp	r1, r3
 80058a6:	d129      	bne.n	80058fc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe fc0e 	bl	80040ce <uxListRemove>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	2201      	movs	r2, #1
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43da      	mvns	r2, r3
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4013      	ands	r3, r2
 80058ca:	4a10      	ldr	r2, [pc, #64]	; (800590c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80058cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	2201      	movs	r2, #1
 80058d4:	409a      	lsls	r2, r3
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	4a0b      	ldr	r2, [pc, #44]	; (800590c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4a06      	ldr	r2, [pc, #24]	; (8005908 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80058ee:	441a      	add	r2, r3
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f7fe fb8c 	bl	8004014 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058fc:	bf00      	nop
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	200004d8 	.word	0x200004d8
 8005908:	200004dc 	.word	0x200004dc
 800590c:	200005e0 	.word	0x200005e0

08005910 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <pvTaskIncrementMutexHeldCount+0x24>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <pvTaskIncrementMutexHeldCount+0x24>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005922:	3201      	adds	r2, #1
 8005924:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005926:	4b03      	ldr	r3, [pc, #12]	; (8005934 <pvTaskIncrementMutexHeldCount+0x24>)
 8005928:	681b      	ldr	r3, [r3, #0]
	}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	200004d8 	.word	0x200004d8

08005938 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005942:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005948:	4b28      	ldr	r3, [pc, #160]	; (80059ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3304      	adds	r3, #4
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fbbd 	bl	80040ce <uxListRemove>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	2201      	movs	r2, #1
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43da      	mvns	r2, r3
 8005968:	4b21      	ldr	r3, [pc, #132]	; (80059f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4013      	ands	r3, r2
 800596e:	4a20      	ldr	r2, [pc, #128]	; (80059f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005970:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d10a      	bne.n	8005990 <prvAddCurrentTaskToDelayedList+0x58>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3304      	adds	r3, #4
 8005986:	4619      	mov	r1, r3
 8005988:	481a      	ldr	r0, [pc, #104]	; (80059f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800598a:	f7fe fb43 	bl	8004014 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800598e:	e026      	b.n	80059de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005998:	4b14      	ldr	r3, [pc, #80]	; (80059ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d209      	bcs.n	80059bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe fb51 	bl	800405c <vListInsert>
}
 80059ba:	e010      	b.n	80059de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059bc:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f7fe fb47 	bl	800405c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059ce:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d202      	bcs.n	80059de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059d8:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6013      	str	r3, [r2, #0]
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200005dc 	.word	0x200005dc
 80059ec:	200004d8 	.word	0x200004d8
 80059f0:	200005e0 	.word	0x200005e0
 80059f4:	200005c4 	.word	0x200005c4
 80059f8:	20000594 	.word	0x20000594
 80059fc:	20000590 	.word	0x20000590
 8005a00:	200005f8 	.word	0x200005f8

08005a04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3b04      	subs	r3, #4
 8005a14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3b04      	subs	r3, #4
 8005a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a34:	4a0c      	ldr	r2, [pc, #48]	; (8005a68 <pxPortInitialiseStack+0x64>)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3b14      	subs	r3, #20
 8005a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b04      	subs	r3, #4
 8005a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f06f 0202 	mvn.w	r2, #2
 8005a52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3b20      	subs	r3, #32
 8005a58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	08005a6d 	.word	0x08005a6d

08005a6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <prvTaskExitError+0x54>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d00a      	beq.n	8005a96 <prvTaskExitError+0x2a>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60fb      	str	r3, [r7, #12]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <prvTaskExitError+0x28>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	60bb      	str	r3, [r7, #8]
}
 8005aa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005aaa:	bf00      	nop
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0fc      	beq.n	8005aac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	2000000c 	.word	0x2000000c
	...

08005ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <pxCurrentTCBConst2>)
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	6808      	ldr	r0, [r1, #0]
 8005ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f380 8809 	msr	PSP, r0
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8811 	msr	BASEPRI, r0
 8005aea:	4770      	bx	lr
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst2>:
 8005af0:	200004d8 	.word	0x200004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005af8:	4808      	ldr	r0, [pc, #32]	; (8005b1c <prvPortStartFirstTask+0x24>)
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f380 8808 	msr	MSP, r0
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8814 	msr	CONTROL, r0
 8005b0a:	b662      	cpsie	i
 8005b0c:	b661      	cpsie	f
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	df00      	svc	0
 8005b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b1a:	bf00      	nop
 8005b1c:	e000ed08 	.word	0xe000ed08

08005b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b26:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <xPortStartScheduler+0x120>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a46      	ldr	r2, [pc, #280]	; (8005c44 <xPortStartScheduler+0x124>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10a      	bne.n	8005b46 <xPortStartScheduler+0x26>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b46:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <xPortStartScheduler+0x120>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a3f      	ldr	r2, [pc, #252]	; (8005c48 <xPortStartScheduler+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10a      	bne.n	8005b66 <xPortStartScheduler+0x46>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	60fb      	str	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <xPortStartScheduler+0x12c>)
 8005b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <xPortStartScheduler+0x130>)
 8005b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b94:	e009      	b.n	8005baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b96:	4b2f      	ldr	r3, [pc, #188]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	4a2d      	ldr	r2, [pc, #180]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb2:	2b80      	cmp	r3, #128	; 0x80
 8005bb4:	d0ef      	beq.n	8005b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bb6:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1c3 0307 	rsb	r3, r3, #7
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d00a      	beq.n	8005bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60bb      	str	r3, [r7, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <xPortStartScheduler+0x134>)
 8005be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005be2:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <xPortStartScheduler+0x134>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bea:	4a1a      	ldr	r2, [pc, #104]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bf6:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <xPortStartScheduler+0x138>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <xPortStartScheduler+0x138>)
 8005bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <xPortStartScheduler+0x138>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <xPortStartScheduler+0x138>)
 8005c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c0e:	f000 f8dd 	bl	8005dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <xPortStartScheduler+0x13c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c18:	f000 f8fc 	bl	8005e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c1c:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <xPortStartScheduler+0x140>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <xPortStartScheduler+0x140>)
 8005c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c28:	f7ff ff66 	bl	8005af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c2c:	f7ff fa80 	bl	8005130 <vTaskSwitchContext>
	prvTaskExitError();
 8005c30:	f7ff ff1c 	bl	8005a6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	e000ed00 	.word	0xe000ed00
 8005c44:	410fc271 	.word	0x410fc271
 8005c48:	410fc270 	.word	0x410fc270
 8005c4c:	e000e400 	.word	0xe000e400
 8005c50:	20000604 	.word	0x20000604
 8005c54:	20000608 	.word	0x20000608
 8005c58:	e000ed20 	.word	0xe000ed20
 8005c5c:	2000000c 	.word	0x2000000c
 8005c60:	e000ef34 	.word	0xe000ef34

08005c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	607b      	str	r3, [r7, #4]
}
 8005c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c88:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10f      	bne.n	8005cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortEnterCritical+0x5c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	603b      	str	r3, [r7, #0]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <vPortEnterCritical+0x4a>
	}
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	2000000c 	.word	0x2000000c
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <vPortExitCritical+0x50>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <vPortExitCritical+0x24>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	607b      	str	r3, [r7, #4]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <vPortExitCritical+0x50>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <vPortExitCritical+0x50>)
 8005cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cf2:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <vPortExitCritical+0x50>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d105      	bne.n	8005d06 <vPortExitCritical+0x42>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	f383 8811 	msr	BASEPRI, r3
}
 8005d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	2000000c 	.word	0x2000000c
	...

08005d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d20:	f3ef 8009 	mrs	r0, PSP
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <pxCurrentTCBConst>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	f01e 0f10 	tst.w	lr, #16
 8005d30:	bf08      	it	eq
 8005d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	6010      	str	r0, [r2, #0]
 8005d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d44:	f380 8811 	msr	BASEPRI, r0
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f7ff f9ee 	bl	8005130 <vTaskSwitchContext>
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f380 8811 	msr	BASEPRI, r0
 8005d5c:	bc09      	pop	{r0, r3}
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	6808      	ldr	r0, [r1, #0]
 8005d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d66:	f01e 0f10 	tst.w	lr, #16
 8005d6a:	bf08      	it	eq
 8005d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d70:	f380 8809 	msr	PSP, r0
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst>:
 8005d80:	200004d8 	.word	0x200004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005da2:	f7ff f90d 	bl	8004fc0 <xTaskIncrementTick>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <SysTick_Handler+0x40>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <vPortSetupTimerInterrupt+0x38>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <vPortSetupTimerInterrupt+0x3c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <vPortSetupTimerInterrupt+0x40>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <vPortSetupTimerInterrupt+0x44>)
 8005dea:	3b01      	subs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dee:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005df0:	2207      	movs	r2, #7
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000e010 	.word	0xe000e010
 8005e04:	e000e018 	.word	0xe000e018
 8005e08:	20000000 	.word	0x20000000
 8005e0c:	10624dd3 	.word	0x10624dd3
 8005e10:	e000e014 	.word	0xe000e014

08005e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e24 <vPortEnableVFP+0x10>
 8005e18:	6801      	ldr	r1, [r0, #0]
 8005e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e1e:	6001      	str	r1, [r0, #0]
 8005e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e22:	bf00      	nop
 8005e24:	e000ed88 	.word	0xe000ed88

08005e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e2e:	f3ef 8305 	mrs	r3, IPSR
 8005e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b0f      	cmp	r3, #15
 8005e38:	d914      	bls.n	8005e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e3a:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <vPortValidateInterruptPriority+0x70>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e44:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <vPortValidateInterruptPriority+0x74>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	7afa      	ldrb	r2, [r7, #11]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d20a      	bcs.n	8005e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <vPortValidateInterruptPriority+0x78>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <vPortValidateInterruptPriority+0x7c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d90a      	bls.n	8005e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	603b      	str	r3, [r7, #0]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <vPortValidateInterruptPriority+0x60>
	}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	e000e3f0 	.word	0xe000e3f0
 8005e9c:	20000604 	.word	0x20000604
 8005ea0:	e000ed0c 	.word	0xe000ed0c
 8005ea4:	20000608 	.word	0x20000608

08005ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005eb4:	f7fe ffda 	bl	8004e6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005eb8:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <pvPortMalloc+0x180>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ec0:	f000 f920 	bl	8006104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ec4:	4b59      	ldr	r3, [pc, #356]	; (800602c <pvPortMalloc+0x184>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 8093 	bne.w	8005ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01d      	beq.n	8005f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ed8:	2208      	movs	r2, #8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f023 0307 	bic.w	r3, r3, #7
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <pvPortMalloc+0x6c>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	617b      	str	r3, [r7, #20]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d06e      	beq.n	8005ff8 <pvPortMalloc+0x150>
 8005f1a:	4b45      	ldr	r3, [pc, #276]	; (8006030 <pvPortMalloc+0x188>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d869      	bhi.n	8005ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f24:	4b43      	ldr	r3, [pc, #268]	; (8006034 <pvPortMalloc+0x18c>)
 8005f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f28:	4b42      	ldr	r3, [pc, #264]	; (8006034 <pvPortMalloc+0x18c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f2e:	e004      	b.n	8005f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <pvPortMalloc+0xa4>
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f1      	bne.n	8005f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f4c:	4b36      	ldr	r3, [pc, #216]	; (8006028 <pvPortMalloc+0x180>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d050      	beq.n	8005ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	4413      	add	r3, r2
 8005f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	2308      	movs	r3, #8
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d91f      	bls.n	8005fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	613b      	str	r3, [r7, #16]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fb2:	69b8      	ldr	r0, [r7, #24]
 8005fb4:	f000 f908 	bl	80061c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fb8:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <pvPortMalloc+0x188>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <pvPortMalloc+0x188>)
 8005fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fc6:	4b1a      	ldr	r3, [pc, #104]	; (8006030 <pvPortMalloc+0x188>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <pvPortMalloc+0x190>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d203      	bcs.n	8005fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fd2:	4b17      	ldr	r3, [pc, #92]	; (8006030 <pvPortMalloc+0x188>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a18      	ldr	r2, [pc, #96]	; (8006038 <pvPortMalloc+0x190>)
 8005fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <pvPortMalloc+0x184>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <pvPortMalloc+0x194>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	4a11      	ldr	r2, [pc, #68]	; (800603c <pvPortMalloc+0x194>)
 8005ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ff8:	f7fe ff46 	bl	8004e88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <pvPortMalloc+0x174>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60fb      	str	r3, [r7, #12]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <pvPortMalloc+0x172>
	return pvReturn;
 800601c:	69fb      	ldr	r3, [r7, #28]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3728      	adds	r7, #40	; 0x28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20004214 	.word	0x20004214
 800602c:	20004228 	.word	0x20004228
 8006030:	20004218 	.word	0x20004218
 8006034:	2000420c 	.word	0x2000420c
 8006038:	2000421c 	.word	0x2000421c
 800603c:	20004220 	.word	0x20004220

08006040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d04d      	beq.n	80060ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006052:	2308      	movs	r3, #8
 8006054:	425b      	negs	r3, r3
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4413      	add	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <vPortFree+0xb8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4013      	ands	r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <vPortFree+0x44>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	60fb      	str	r3, [r7, #12]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <vPortFree+0x62>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60bb      	str	r3, [r7, #8]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <vPortFree+0xb8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01e      	beq.n	80060ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d11a      	bne.n	80060ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <vPortFree+0xb8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	43db      	mvns	r3, r3
 80060c2:	401a      	ands	r2, r3
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060c8:	f7fe fed0 	bl	8004e6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <vPortFree+0xbc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4413      	add	r3, r2
 80060d6:	4a09      	ldr	r2, [pc, #36]	; (80060fc <vPortFree+0xbc>)
 80060d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060da:	6938      	ldr	r0, [r7, #16]
 80060dc:	f000 f874 	bl	80061c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <vPortFree+0xc0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3301      	adds	r3, #1
 80060e6:	4a06      	ldr	r2, [pc, #24]	; (8006100 <vPortFree+0xc0>)
 80060e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060ea:	f7fe fecd 	bl	8004e88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20004228 	.word	0x20004228
 80060fc:	20004218 	.word	0x20004218
 8006100:	20004224 	.word	0x20004224

08006104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800610a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800610e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006110:	4b27      	ldr	r3, [pc, #156]	; (80061b0 <prvHeapInit+0xac>)
 8006112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00c      	beq.n	8006138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3307      	adds	r3, #7
 8006122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	4a1f      	ldr	r2, [pc, #124]	; (80061b0 <prvHeapInit+0xac>)
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800613c:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <prvHeapInit+0xb0>)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <prvHeapInit+0xb0>)
 8006144:	2200      	movs	r2, #0
 8006146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4413      	add	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006150:	2208      	movs	r2, #8
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <prvHeapInit+0xb4>)
 8006164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <prvHeapInit+0xb4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2200      	movs	r2, #0
 800616c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <prvHeapInit+0xb4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <prvHeapInit+0xb4>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <prvHeapInit+0xb8>)
 8006192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <prvHeapInit+0xbc>)
 800619a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <prvHeapInit+0xc0>)
 800619e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	2000060c 	.word	0x2000060c
 80061b4:	2000420c 	.word	0x2000420c
 80061b8:	20004214 	.word	0x20004214
 80061bc:	2000421c 	.word	0x2000421c
 80061c0:	20004218 	.word	0x20004218
 80061c4:	20004228 	.word	0x20004228

080061c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061d0:	4b28      	ldr	r3, [pc, #160]	; (8006274 <prvInsertBlockIntoFreeList+0xac>)
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e002      	b.n	80061dc <prvInsertBlockIntoFreeList+0x14>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d8f7      	bhi.n	80061d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4413      	add	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d108      	bne.n	800620a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	441a      	add	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	441a      	add	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d118      	bne.n	8006250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4b15      	ldr	r3, [pc, #84]	; (8006278 <prvInsertBlockIntoFreeList+0xb0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d00d      	beq.n	8006246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	441a      	add	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e008      	b.n	8006258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <prvInsertBlockIntoFreeList+0xb0>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e003      	b.n	8006258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d002      	beq.n	8006266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	2000420c 	.word	0x2000420c
 8006278:	20004214 	.word	0x20004214

0800627c <__errno>:
 800627c:	4b01      	ldr	r3, [pc, #4]	; (8006284 <__errno+0x8>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000010 	.word	0x20000010

08006288 <__libc_init_array>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	4d0d      	ldr	r5, [pc, #52]	; (80062c0 <__libc_init_array+0x38>)
 800628c:	4c0d      	ldr	r4, [pc, #52]	; (80062c4 <__libc_init_array+0x3c>)
 800628e:	1b64      	subs	r4, r4, r5
 8006290:	10a4      	asrs	r4, r4, #2
 8006292:	2600      	movs	r6, #0
 8006294:	42a6      	cmp	r6, r4
 8006296:	d109      	bne.n	80062ac <__libc_init_array+0x24>
 8006298:	4d0b      	ldr	r5, [pc, #44]	; (80062c8 <__libc_init_array+0x40>)
 800629a:	4c0c      	ldr	r4, [pc, #48]	; (80062cc <__libc_init_array+0x44>)
 800629c:	f000 fcf8 	bl	8006c90 <_init>
 80062a0:	1b64      	subs	r4, r4, r5
 80062a2:	10a4      	asrs	r4, r4, #2
 80062a4:	2600      	movs	r6, #0
 80062a6:	42a6      	cmp	r6, r4
 80062a8:	d105      	bne.n	80062b6 <__libc_init_array+0x2e>
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b0:	4798      	blx	r3
 80062b2:	3601      	adds	r6, #1
 80062b4:	e7ee      	b.n	8006294 <__libc_init_array+0xc>
 80062b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ba:	4798      	blx	r3
 80062bc:	3601      	adds	r6, #1
 80062be:	e7f2      	b.n	80062a6 <__libc_init_array+0x1e>
 80062c0:	08006dac 	.word	0x08006dac
 80062c4:	08006dac 	.word	0x08006dac
 80062c8:	08006dac 	.word	0x08006dac
 80062cc:	08006db0 	.word	0x08006db0

080062d0 <__retarget_lock_acquire_recursive>:
 80062d0:	4770      	bx	lr

080062d2 <__retarget_lock_release_recursive>:
 80062d2:	4770      	bx	lr

080062d4 <memcpy>:
 80062d4:	440a      	add	r2, r1
 80062d6:	4291      	cmp	r1, r2
 80062d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062dc:	d100      	bne.n	80062e0 <memcpy+0xc>
 80062de:	4770      	bx	lr
 80062e0:	b510      	push	{r4, lr}
 80062e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ea:	4291      	cmp	r1, r2
 80062ec:	d1f9      	bne.n	80062e2 <memcpy+0xe>
 80062ee:	bd10      	pop	{r4, pc}

080062f0 <memset>:
 80062f0:	4402      	add	r2, r0
 80062f2:	4603      	mov	r3, r0
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d100      	bne.n	80062fa <memset+0xa>
 80062f8:	4770      	bx	lr
 80062fa:	f803 1b01 	strb.w	r1, [r3], #1
 80062fe:	e7f9      	b.n	80062f4 <memset+0x4>

08006300 <sbrk_aligned>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4e0e      	ldr	r6, [pc, #56]	; (800633c <sbrk_aligned+0x3c>)
 8006304:	460c      	mov	r4, r1
 8006306:	6831      	ldr	r1, [r6, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	b911      	cbnz	r1, 8006312 <sbrk_aligned+0x12>
 800630c:	f000 f8f6 	bl	80064fc <_sbrk_r>
 8006310:	6030      	str	r0, [r6, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f000 f8f1 	bl	80064fc <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d00a      	beq.n	8006334 <sbrk_aligned+0x34>
 800631e:	1cc4      	adds	r4, r0, #3
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d007      	beq.n	8006338 <sbrk_aligned+0x38>
 8006328:	1a21      	subs	r1, r4, r0
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f8e6 	bl	80064fc <_sbrk_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d101      	bne.n	8006338 <sbrk_aligned+0x38>
 8006334:	f04f 34ff 	mov.w	r4, #4294967295
 8006338:	4620      	mov	r0, r4
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	20004234 	.word	0x20004234

08006340 <_malloc_r>:
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	1ccd      	adds	r5, r1, #3
 8006346:	f025 0503 	bic.w	r5, r5, #3
 800634a:	3508      	adds	r5, #8
 800634c:	2d0c      	cmp	r5, #12
 800634e:	bf38      	it	cc
 8006350:	250c      	movcc	r5, #12
 8006352:	2d00      	cmp	r5, #0
 8006354:	4607      	mov	r7, r0
 8006356:	db01      	blt.n	800635c <_malloc_r+0x1c>
 8006358:	42a9      	cmp	r1, r5
 800635a:	d905      	bls.n	8006368 <_malloc_r+0x28>
 800635c:	230c      	movs	r3, #12
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	2600      	movs	r6, #0
 8006362:	4630      	mov	r0, r6
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	4e2e      	ldr	r6, [pc, #184]	; (8006424 <_malloc_r+0xe4>)
 800636a:	f000 f8f7 	bl	800655c <__malloc_lock>
 800636e:	6833      	ldr	r3, [r6, #0]
 8006370:	461c      	mov	r4, r3
 8006372:	bb34      	cbnz	r4, 80063c2 <_malloc_r+0x82>
 8006374:	4629      	mov	r1, r5
 8006376:	4638      	mov	r0, r7
 8006378:	f7ff ffc2 	bl	8006300 <sbrk_aligned>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	4604      	mov	r4, r0
 8006380:	d14d      	bne.n	800641e <_malloc_r+0xde>
 8006382:	6834      	ldr	r4, [r6, #0]
 8006384:	4626      	mov	r6, r4
 8006386:	2e00      	cmp	r6, #0
 8006388:	d140      	bne.n	800640c <_malloc_r+0xcc>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	4631      	mov	r1, r6
 800638e:	4638      	mov	r0, r7
 8006390:	eb04 0803 	add.w	r8, r4, r3
 8006394:	f000 f8b2 	bl	80064fc <_sbrk_r>
 8006398:	4580      	cmp	r8, r0
 800639a:	d13a      	bne.n	8006412 <_malloc_r+0xd2>
 800639c:	6821      	ldr	r1, [r4, #0]
 800639e:	3503      	adds	r5, #3
 80063a0:	1a6d      	subs	r5, r5, r1
 80063a2:	f025 0503 	bic.w	r5, r5, #3
 80063a6:	3508      	adds	r5, #8
 80063a8:	2d0c      	cmp	r5, #12
 80063aa:	bf38      	it	cc
 80063ac:	250c      	movcc	r5, #12
 80063ae:	4629      	mov	r1, r5
 80063b0:	4638      	mov	r0, r7
 80063b2:	f7ff ffa5 	bl	8006300 <sbrk_aligned>
 80063b6:	3001      	adds	r0, #1
 80063b8:	d02b      	beq.n	8006412 <_malloc_r+0xd2>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	442b      	add	r3, r5
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	e00e      	b.n	80063e0 <_malloc_r+0xa0>
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	1b52      	subs	r2, r2, r5
 80063c6:	d41e      	bmi.n	8006406 <_malloc_r+0xc6>
 80063c8:	2a0b      	cmp	r2, #11
 80063ca:	d916      	bls.n	80063fa <_malloc_r+0xba>
 80063cc:	1961      	adds	r1, r4, r5
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	6025      	str	r5, [r4, #0]
 80063d2:	bf18      	it	ne
 80063d4:	6059      	strne	r1, [r3, #4]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	bf08      	it	eq
 80063da:	6031      	streq	r1, [r6, #0]
 80063dc:	5162      	str	r2, [r4, r5]
 80063de:	604b      	str	r3, [r1, #4]
 80063e0:	4638      	mov	r0, r7
 80063e2:	f104 060b 	add.w	r6, r4, #11
 80063e6:	f000 f8bf 	bl	8006568 <__malloc_unlock>
 80063ea:	f026 0607 	bic.w	r6, r6, #7
 80063ee:	1d23      	adds	r3, r4, #4
 80063f0:	1af2      	subs	r2, r6, r3
 80063f2:	d0b6      	beq.n	8006362 <_malloc_r+0x22>
 80063f4:	1b9b      	subs	r3, r3, r6
 80063f6:	50a3      	str	r3, [r4, r2]
 80063f8:	e7b3      	b.n	8006362 <_malloc_r+0x22>
 80063fa:	6862      	ldr	r2, [r4, #4]
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	bf0c      	ite	eq
 8006400:	6032      	streq	r2, [r6, #0]
 8006402:	605a      	strne	r2, [r3, #4]
 8006404:	e7ec      	b.n	80063e0 <_malloc_r+0xa0>
 8006406:	4623      	mov	r3, r4
 8006408:	6864      	ldr	r4, [r4, #4]
 800640a:	e7b2      	b.n	8006372 <_malloc_r+0x32>
 800640c:	4634      	mov	r4, r6
 800640e:	6876      	ldr	r6, [r6, #4]
 8006410:	e7b9      	b.n	8006386 <_malloc_r+0x46>
 8006412:	230c      	movs	r3, #12
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4638      	mov	r0, r7
 8006418:	f000 f8a6 	bl	8006568 <__malloc_unlock>
 800641c:	e7a1      	b.n	8006362 <_malloc_r+0x22>
 800641e:	6025      	str	r5, [r4, #0]
 8006420:	e7de      	b.n	80063e0 <_malloc_r+0xa0>
 8006422:	bf00      	nop
 8006424:	20004230 	.word	0x20004230

08006428 <cleanup_glue>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	460c      	mov	r4, r1
 800642c:	6809      	ldr	r1, [r1, #0]
 800642e:	4605      	mov	r5, r0
 8006430:	b109      	cbz	r1, 8006436 <cleanup_glue+0xe>
 8006432:	f7ff fff9 	bl	8006428 <cleanup_glue>
 8006436:	4621      	mov	r1, r4
 8006438:	4628      	mov	r0, r5
 800643a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800643e:	f000 b899 	b.w	8006574 <_free_r>
	...

08006444 <_reclaim_reent>:
 8006444:	4b2c      	ldr	r3, [pc, #176]	; (80064f8 <_reclaim_reent+0xb4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4283      	cmp	r3, r0
 800644a:	b570      	push	{r4, r5, r6, lr}
 800644c:	4604      	mov	r4, r0
 800644e:	d051      	beq.n	80064f4 <_reclaim_reent+0xb0>
 8006450:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006452:	b143      	cbz	r3, 8006466 <_reclaim_reent+0x22>
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d14a      	bne.n	80064f0 <_reclaim_reent+0xac>
 800645a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800645c:	6819      	ldr	r1, [r3, #0]
 800645e:	b111      	cbz	r1, 8006466 <_reclaim_reent+0x22>
 8006460:	4620      	mov	r0, r4
 8006462:	f000 f887 	bl	8006574 <_free_r>
 8006466:	6961      	ldr	r1, [r4, #20]
 8006468:	b111      	cbz	r1, 8006470 <_reclaim_reent+0x2c>
 800646a:	4620      	mov	r0, r4
 800646c:	f000 f882 	bl	8006574 <_free_r>
 8006470:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006472:	b111      	cbz	r1, 800647a <_reclaim_reent+0x36>
 8006474:	4620      	mov	r0, r4
 8006476:	f000 f87d 	bl	8006574 <_free_r>
 800647a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800647c:	b111      	cbz	r1, 8006484 <_reclaim_reent+0x40>
 800647e:	4620      	mov	r0, r4
 8006480:	f000 f878 	bl	8006574 <_free_r>
 8006484:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006486:	b111      	cbz	r1, 800648e <_reclaim_reent+0x4a>
 8006488:	4620      	mov	r0, r4
 800648a:	f000 f873 	bl	8006574 <_free_r>
 800648e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006490:	b111      	cbz	r1, 8006498 <_reclaim_reent+0x54>
 8006492:	4620      	mov	r0, r4
 8006494:	f000 f86e 	bl	8006574 <_free_r>
 8006498:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800649a:	b111      	cbz	r1, 80064a2 <_reclaim_reent+0x5e>
 800649c:	4620      	mov	r0, r4
 800649e:	f000 f869 	bl	8006574 <_free_r>
 80064a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80064a4:	b111      	cbz	r1, 80064ac <_reclaim_reent+0x68>
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 f864 	bl	8006574 <_free_r>
 80064ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ae:	b111      	cbz	r1, 80064b6 <_reclaim_reent+0x72>
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f85f 	bl	8006574 <_free_r>
 80064b6:	69a3      	ldr	r3, [r4, #24]
 80064b8:	b1e3      	cbz	r3, 80064f4 <_reclaim_reent+0xb0>
 80064ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064bc:	4620      	mov	r0, r4
 80064be:	4798      	blx	r3
 80064c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064c2:	b1b9      	cbz	r1, 80064f4 <_reclaim_reent+0xb0>
 80064c4:	4620      	mov	r0, r4
 80064c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064ca:	f7ff bfad 	b.w	8006428 <cleanup_glue>
 80064ce:	5949      	ldr	r1, [r1, r5]
 80064d0:	b941      	cbnz	r1, 80064e4 <_reclaim_reent+0xa0>
 80064d2:	3504      	adds	r5, #4
 80064d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d6:	2d80      	cmp	r5, #128	; 0x80
 80064d8:	68d9      	ldr	r1, [r3, #12]
 80064da:	d1f8      	bne.n	80064ce <_reclaim_reent+0x8a>
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 f849 	bl	8006574 <_free_r>
 80064e2:	e7ba      	b.n	800645a <_reclaim_reent+0x16>
 80064e4:	680e      	ldr	r6, [r1, #0]
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 f844 	bl	8006574 <_free_r>
 80064ec:	4631      	mov	r1, r6
 80064ee:	e7ef      	b.n	80064d0 <_reclaim_reent+0x8c>
 80064f0:	2500      	movs	r5, #0
 80064f2:	e7ef      	b.n	80064d4 <_reclaim_reent+0x90>
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	bf00      	nop
 80064f8:	20000010 	.word	0x20000010

080064fc <_sbrk_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d06      	ldr	r5, [pc, #24]	; (8006518 <_sbrk_r+0x1c>)
 8006500:	2300      	movs	r3, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fa fdd8 	bl	80010bc <_sbrk>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_sbrk_r+0x1a>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_sbrk_r+0x1a>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	20004238 	.word	0x20004238

0800651c <siprintf>:
 800651c:	b40e      	push	{r1, r2, r3}
 800651e:	b500      	push	{lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	ab1d      	add	r3, sp, #116	; 0x74
 8006524:	9002      	str	r0, [sp, #8]
 8006526:	9006      	str	r0, [sp, #24]
 8006528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800652c:	4809      	ldr	r0, [pc, #36]	; (8006554 <siprintf+0x38>)
 800652e:	9107      	str	r1, [sp, #28]
 8006530:	9104      	str	r1, [sp, #16]
 8006532:	4909      	ldr	r1, [pc, #36]	; (8006558 <siprintf+0x3c>)
 8006534:	f853 2b04 	ldr.w	r2, [r3], #4
 8006538:	9105      	str	r1, [sp, #20]
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	a902      	add	r1, sp, #8
 8006540:	f000 f8c0 	bl	80066c4 <_svfiprintf_r>
 8006544:	9b02      	ldr	r3, [sp, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	b01c      	add	sp, #112	; 0x70
 800654c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006550:	b003      	add	sp, #12
 8006552:	4770      	bx	lr
 8006554:	20000010 	.word	0x20000010
 8006558:	ffff0208 	.word	0xffff0208

0800655c <__malloc_lock>:
 800655c:	4801      	ldr	r0, [pc, #4]	; (8006564 <__malloc_lock+0x8>)
 800655e:	f7ff beb7 	b.w	80062d0 <__retarget_lock_acquire_recursive>
 8006562:	bf00      	nop
 8006564:	2000422c 	.word	0x2000422c

08006568 <__malloc_unlock>:
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <__malloc_unlock+0x8>)
 800656a:	f7ff beb2 	b.w	80062d2 <__retarget_lock_release_recursive>
 800656e:	bf00      	nop
 8006570:	2000422c 	.word	0x2000422c

08006574 <_free_r>:
 8006574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006576:	2900      	cmp	r1, #0
 8006578:	d044      	beq.n	8006604 <_free_r+0x90>
 800657a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657e:	9001      	str	r0, [sp, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f1a1 0404 	sub.w	r4, r1, #4
 8006586:	bfb8      	it	lt
 8006588:	18e4      	addlt	r4, r4, r3
 800658a:	f7ff ffe7 	bl	800655c <__malloc_lock>
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <_free_r+0x94>)
 8006590:	9801      	ldr	r0, [sp, #4]
 8006592:	6813      	ldr	r3, [r2, #0]
 8006594:	b933      	cbnz	r3, 80065a4 <_free_r+0x30>
 8006596:	6063      	str	r3, [r4, #4]
 8006598:	6014      	str	r4, [r2, #0]
 800659a:	b003      	add	sp, #12
 800659c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065a0:	f7ff bfe2 	b.w	8006568 <__malloc_unlock>
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	d908      	bls.n	80065ba <_free_r+0x46>
 80065a8:	6825      	ldr	r5, [r4, #0]
 80065aa:	1961      	adds	r1, r4, r5
 80065ac:	428b      	cmp	r3, r1
 80065ae:	bf01      	itttt	eq
 80065b0:	6819      	ldreq	r1, [r3, #0]
 80065b2:	685b      	ldreq	r3, [r3, #4]
 80065b4:	1949      	addeq	r1, r1, r5
 80065b6:	6021      	streq	r1, [r4, #0]
 80065b8:	e7ed      	b.n	8006596 <_free_r+0x22>
 80065ba:	461a      	mov	r2, r3
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	b10b      	cbz	r3, 80065c4 <_free_r+0x50>
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	d9fa      	bls.n	80065ba <_free_r+0x46>
 80065c4:	6811      	ldr	r1, [r2, #0]
 80065c6:	1855      	adds	r5, r2, r1
 80065c8:	42a5      	cmp	r5, r4
 80065ca:	d10b      	bne.n	80065e4 <_free_r+0x70>
 80065cc:	6824      	ldr	r4, [r4, #0]
 80065ce:	4421      	add	r1, r4
 80065d0:	1854      	adds	r4, r2, r1
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	6011      	str	r1, [r2, #0]
 80065d6:	d1e0      	bne.n	800659a <_free_r+0x26>
 80065d8:	681c      	ldr	r4, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	6053      	str	r3, [r2, #4]
 80065de:	4421      	add	r1, r4
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	e7da      	b.n	800659a <_free_r+0x26>
 80065e4:	d902      	bls.n	80065ec <_free_r+0x78>
 80065e6:	230c      	movs	r3, #12
 80065e8:	6003      	str	r3, [r0, #0]
 80065ea:	e7d6      	b.n	800659a <_free_r+0x26>
 80065ec:	6825      	ldr	r5, [r4, #0]
 80065ee:	1961      	adds	r1, r4, r5
 80065f0:	428b      	cmp	r3, r1
 80065f2:	bf04      	itt	eq
 80065f4:	6819      	ldreq	r1, [r3, #0]
 80065f6:	685b      	ldreq	r3, [r3, #4]
 80065f8:	6063      	str	r3, [r4, #4]
 80065fa:	bf04      	itt	eq
 80065fc:	1949      	addeq	r1, r1, r5
 80065fe:	6021      	streq	r1, [r4, #0]
 8006600:	6054      	str	r4, [r2, #4]
 8006602:	e7ca      	b.n	800659a <_free_r+0x26>
 8006604:	b003      	add	sp, #12
 8006606:	bd30      	pop	{r4, r5, pc}
 8006608:	20004230 	.word	0x20004230

0800660c <__ssputs_r>:
 800660c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006610:	688e      	ldr	r6, [r1, #8]
 8006612:	429e      	cmp	r6, r3
 8006614:	4682      	mov	sl, r0
 8006616:	460c      	mov	r4, r1
 8006618:	4690      	mov	r8, r2
 800661a:	461f      	mov	r7, r3
 800661c:	d838      	bhi.n	8006690 <__ssputs_r+0x84>
 800661e:	898a      	ldrh	r2, [r1, #12]
 8006620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006624:	d032      	beq.n	800668c <__ssputs_r+0x80>
 8006626:	6825      	ldr	r5, [r4, #0]
 8006628:	6909      	ldr	r1, [r1, #16]
 800662a:	eba5 0901 	sub.w	r9, r5, r1
 800662e:	6965      	ldr	r5, [r4, #20]
 8006630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006638:	3301      	adds	r3, #1
 800663a:	444b      	add	r3, r9
 800663c:	106d      	asrs	r5, r5, #1
 800663e:	429d      	cmp	r5, r3
 8006640:	bf38      	it	cc
 8006642:	461d      	movcc	r5, r3
 8006644:	0553      	lsls	r3, r2, #21
 8006646:	d531      	bpl.n	80066ac <__ssputs_r+0xa0>
 8006648:	4629      	mov	r1, r5
 800664a:	f7ff fe79 	bl	8006340 <_malloc_r>
 800664e:	4606      	mov	r6, r0
 8006650:	b950      	cbnz	r0, 8006668 <__ssputs_r+0x5c>
 8006652:	230c      	movs	r3, #12
 8006654:	f8ca 3000 	str.w	r3, [sl]
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	6921      	ldr	r1, [r4, #16]
 800666a:	464a      	mov	r2, r9
 800666c:	f7ff fe32 	bl	80062d4 <memcpy>
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	6126      	str	r6, [r4, #16]
 800667e:	6165      	str	r5, [r4, #20]
 8006680:	444e      	add	r6, r9
 8006682:	eba5 0509 	sub.w	r5, r5, r9
 8006686:	6026      	str	r6, [r4, #0]
 8006688:	60a5      	str	r5, [r4, #8]
 800668a:	463e      	mov	r6, r7
 800668c:	42be      	cmp	r6, r7
 800668e:	d900      	bls.n	8006692 <__ssputs_r+0x86>
 8006690:	463e      	mov	r6, r7
 8006692:	6820      	ldr	r0, [r4, #0]
 8006694:	4632      	mov	r2, r6
 8006696:	4641      	mov	r1, r8
 8006698:	f000 faa8 	bl	8006bec <memmove>
 800669c:	68a3      	ldr	r3, [r4, #8]
 800669e:	1b9b      	subs	r3, r3, r6
 80066a0:	60a3      	str	r3, [r4, #8]
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	4433      	add	r3, r6
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	2000      	movs	r0, #0
 80066aa:	e7db      	b.n	8006664 <__ssputs_r+0x58>
 80066ac:	462a      	mov	r2, r5
 80066ae:	f000 fab7 	bl	8006c20 <_realloc_r>
 80066b2:	4606      	mov	r6, r0
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1e1      	bne.n	800667c <__ssputs_r+0x70>
 80066b8:	6921      	ldr	r1, [r4, #16]
 80066ba:	4650      	mov	r0, sl
 80066bc:	f7ff ff5a 	bl	8006574 <_free_r>
 80066c0:	e7c7      	b.n	8006652 <__ssputs_r+0x46>
	...

080066c4 <_svfiprintf_r>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	4698      	mov	r8, r3
 80066ca:	898b      	ldrh	r3, [r1, #12]
 80066cc:	061b      	lsls	r3, r3, #24
 80066ce:	b09d      	sub	sp, #116	; 0x74
 80066d0:	4607      	mov	r7, r0
 80066d2:	460d      	mov	r5, r1
 80066d4:	4614      	mov	r4, r2
 80066d6:	d50e      	bpl.n	80066f6 <_svfiprintf_r+0x32>
 80066d8:	690b      	ldr	r3, [r1, #16]
 80066da:	b963      	cbnz	r3, 80066f6 <_svfiprintf_r+0x32>
 80066dc:	2140      	movs	r1, #64	; 0x40
 80066de:	f7ff fe2f 	bl	8006340 <_malloc_r>
 80066e2:	6028      	str	r0, [r5, #0]
 80066e4:	6128      	str	r0, [r5, #16]
 80066e6:	b920      	cbnz	r0, 80066f2 <_svfiprintf_r+0x2e>
 80066e8:	230c      	movs	r3, #12
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	e0d1      	b.n	8006896 <_svfiprintf_r+0x1d2>
 80066f2:	2340      	movs	r3, #64	; 0x40
 80066f4:	616b      	str	r3, [r5, #20]
 80066f6:	2300      	movs	r3, #0
 80066f8:	9309      	str	r3, [sp, #36]	; 0x24
 80066fa:	2320      	movs	r3, #32
 80066fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006700:	f8cd 800c 	str.w	r8, [sp, #12]
 8006704:	2330      	movs	r3, #48	; 0x30
 8006706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068b0 <_svfiprintf_r+0x1ec>
 800670a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800670e:	f04f 0901 	mov.w	r9, #1
 8006712:	4623      	mov	r3, r4
 8006714:	469a      	mov	sl, r3
 8006716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800671a:	b10a      	cbz	r2, 8006720 <_svfiprintf_r+0x5c>
 800671c:	2a25      	cmp	r2, #37	; 0x25
 800671e:	d1f9      	bne.n	8006714 <_svfiprintf_r+0x50>
 8006720:	ebba 0b04 	subs.w	fp, sl, r4
 8006724:	d00b      	beq.n	800673e <_svfiprintf_r+0x7a>
 8006726:	465b      	mov	r3, fp
 8006728:	4622      	mov	r2, r4
 800672a:	4629      	mov	r1, r5
 800672c:	4638      	mov	r0, r7
 800672e:	f7ff ff6d 	bl	800660c <__ssputs_r>
 8006732:	3001      	adds	r0, #1
 8006734:	f000 80aa 	beq.w	800688c <_svfiprintf_r+0x1c8>
 8006738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800673a:	445a      	add	r2, fp
 800673c:	9209      	str	r2, [sp, #36]	; 0x24
 800673e:	f89a 3000 	ldrb.w	r3, [sl]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 80a2 	beq.w	800688c <_svfiprintf_r+0x1c8>
 8006748:	2300      	movs	r3, #0
 800674a:	f04f 32ff 	mov.w	r2, #4294967295
 800674e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006752:	f10a 0a01 	add.w	sl, sl, #1
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	9307      	str	r3, [sp, #28]
 800675a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800675e:	931a      	str	r3, [sp, #104]	; 0x68
 8006760:	4654      	mov	r4, sl
 8006762:	2205      	movs	r2, #5
 8006764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006768:	4851      	ldr	r0, [pc, #324]	; (80068b0 <_svfiprintf_r+0x1ec>)
 800676a:	f7f9 fd39 	bl	80001e0 <memchr>
 800676e:	9a04      	ldr	r2, [sp, #16]
 8006770:	b9d8      	cbnz	r0, 80067aa <_svfiprintf_r+0xe6>
 8006772:	06d0      	lsls	r0, r2, #27
 8006774:	bf44      	itt	mi
 8006776:	2320      	movmi	r3, #32
 8006778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800677c:	0711      	lsls	r1, r2, #28
 800677e:	bf44      	itt	mi
 8006780:	232b      	movmi	r3, #43	; 0x2b
 8006782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006786:	f89a 3000 	ldrb.w	r3, [sl]
 800678a:	2b2a      	cmp	r3, #42	; 0x2a
 800678c:	d015      	beq.n	80067ba <_svfiprintf_r+0xf6>
 800678e:	9a07      	ldr	r2, [sp, #28]
 8006790:	4654      	mov	r4, sl
 8006792:	2000      	movs	r0, #0
 8006794:	f04f 0c0a 	mov.w	ip, #10
 8006798:	4621      	mov	r1, r4
 800679a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679e:	3b30      	subs	r3, #48	; 0x30
 80067a0:	2b09      	cmp	r3, #9
 80067a2:	d94e      	bls.n	8006842 <_svfiprintf_r+0x17e>
 80067a4:	b1b0      	cbz	r0, 80067d4 <_svfiprintf_r+0x110>
 80067a6:	9207      	str	r2, [sp, #28]
 80067a8:	e014      	b.n	80067d4 <_svfiprintf_r+0x110>
 80067aa:	eba0 0308 	sub.w	r3, r0, r8
 80067ae:	fa09 f303 	lsl.w	r3, r9, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	46a2      	mov	sl, r4
 80067b8:	e7d2      	b.n	8006760 <_svfiprintf_r+0x9c>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	1d19      	adds	r1, r3, #4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	9103      	str	r1, [sp, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bfbb      	ittet	lt
 80067c6:	425b      	neglt	r3, r3
 80067c8:	f042 0202 	orrlt.w	r2, r2, #2
 80067cc:	9307      	strge	r3, [sp, #28]
 80067ce:	9307      	strlt	r3, [sp, #28]
 80067d0:	bfb8      	it	lt
 80067d2:	9204      	strlt	r2, [sp, #16]
 80067d4:	7823      	ldrb	r3, [r4, #0]
 80067d6:	2b2e      	cmp	r3, #46	; 0x2e
 80067d8:	d10c      	bne.n	80067f4 <_svfiprintf_r+0x130>
 80067da:	7863      	ldrb	r3, [r4, #1]
 80067dc:	2b2a      	cmp	r3, #42	; 0x2a
 80067de:	d135      	bne.n	800684c <_svfiprintf_r+0x188>
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	9203      	str	r2, [sp, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bfb8      	it	lt
 80067ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80067f0:	3402      	adds	r4, #2
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068c0 <_svfiprintf_r+0x1fc>
 80067f8:	7821      	ldrb	r1, [r4, #0]
 80067fa:	2203      	movs	r2, #3
 80067fc:	4650      	mov	r0, sl
 80067fe:	f7f9 fcef 	bl	80001e0 <memchr>
 8006802:	b140      	cbz	r0, 8006816 <_svfiprintf_r+0x152>
 8006804:	2340      	movs	r3, #64	; 0x40
 8006806:	eba0 000a 	sub.w	r0, r0, sl
 800680a:	fa03 f000 	lsl.w	r0, r3, r0
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	4303      	orrs	r3, r0
 8006812:	3401      	adds	r4, #1
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800681a:	4826      	ldr	r0, [pc, #152]	; (80068b4 <_svfiprintf_r+0x1f0>)
 800681c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006820:	2206      	movs	r2, #6
 8006822:	f7f9 fcdd 	bl	80001e0 <memchr>
 8006826:	2800      	cmp	r0, #0
 8006828:	d038      	beq.n	800689c <_svfiprintf_r+0x1d8>
 800682a:	4b23      	ldr	r3, [pc, #140]	; (80068b8 <_svfiprintf_r+0x1f4>)
 800682c:	bb1b      	cbnz	r3, 8006876 <_svfiprintf_r+0x1b2>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	3307      	adds	r3, #7
 8006832:	f023 0307 	bic.w	r3, r3, #7
 8006836:	3308      	adds	r3, #8
 8006838:	9303      	str	r3, [sp, #12]
 800683a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683c:	4433      	add	r3, r6
 800683e:	9309      	str	r3, [sp, #36]	; 0x24
 8006840:	e767      	b.n	8006712 <_svfiprintf_r+0x4e>
 8006842:	fb0c 3202 	mla	r2, ip, r2, r3
 8006846:	460c      	mov	r4, r1
 8006848:	2001      	movs	r0, #1
 800684a:	e7a5      	b.n	8006798 <_svfiprintf_r+0xd4>
 800684c:	2300      	movs	r3, #0
 800684e:	3401      	adds	r4, #1
 8006850:	9305      	str	r3, [sp, #20]
 8006852:	4619      	mov	r1, r3
 8006854:	f04f 0c0a 	mov.w	ip, #10
 8006858:	4620      	mov	r0, r4
 800685a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800685e:	3a30      	subs	r2, #48	; 0x30
 8006860:	2a09      	cmp	r2, #9
 8006862:	d903      	bls.n	800686c <_svfiprintf_r+0x1a8>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0c5      	beq.n	80067f4 <_svfiprintf_r+0x130>
 8006868:	9105      	str	r1, [sp, #20]
 800686a:	e7c3      	b.n	80067f4 <_svfiprintf_r+0x130>
 800686c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006870:	4604      	mov	r4, r0
 8006872:	2301      	movs	r3, #1
 8006874:	e7f0      	b.n	8006858 <_svfiprintf_r+0x194>
 8006876:	ab03      	add	r3, sp, #12
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	462a      	mov	r2, r5
 800687c:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <_svfiprintf_r+0x1f8>)
 800687e:	a904      	add	r1, sp, #16
 8006880:	4638      	mov	r0, r7
 8006882:	f3af 8000 	nop.w
 8006886:	1c42      	adds	r2, r0, #1
 8006888:	4606      	mov	r6, r0
 800688a:	d1d6      	bne.n	800683a <_svfiprintf_r+0x176>
 800688c:	89ab      	ldrh	r3, [r5, #12]
 800688e:	065b      	lsls	r3, r3, #25
 8006890:	f53f af2c 	bmi.w	80066ec <_svfiprintf_r+0x28>
 8006894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006896:	b01d      	add	sp, #116	; 0x74
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	ab03      	add	r3, sp, #12
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	462a      	mov	r2, r5
 80068a2:	4b06      	ldr	r3, [pc, #24]	; (80068bc <_svfiprintf_r+0x1f8>)
 80068a4:	a904      	add	r1, sp, #16
 80068a6:	4638      	mov	r0, r7
 80068a8:	f000 f87a 	bl	80069a0 <_printf_i>
 80068ac:	e7eb      	b.n	8006886 <_svfiprintf_r+0x1c2>
 80068ae:	bf00      	nop
 80068b0:	08006d70 	.word	0x08006d70
 80068b4:	08006d7a 	.word	0x08006d7a
 80068b8:	00000000 	.word	0x00000000
 80068bc:	0800660d 	.word	0x0800660d
 80068c0:	08006d76 	.word	0x08006d76

080068c4 <_printf_common>:
 80068c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c8:	4616      	mov	r6, r2
 80068ca:	4699      	mov	r9, r3
 80068cc:	688a      	ldr	r2, [r1, #8]
 80068ce:	690b      	ldr	r3, [r1, #16]
 80068d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	bfb8      	it	lt
 80068d8:	4613      	movlt	r3, r2
 80068da:	6033      	str	r3, [r6, #0]
 80068dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068e0:	4607      	mov	r7, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	b10a      	cbz	r2, 80068ea <_printf_common+0x26>
 80068e6:	3301      	adds	r3, #1
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	0699      	lsls	r1, r3, #26
 80068ee:	bf42      	ittt	mi
 80068f0:	6833      	ldrmi	r3, [r6, #0]
 80068f2:	3302      	addmi	r3, #2
 80068f4:	6033      	strmi	r3, [r6, #0]
 80068f6:	6825      	ldr	r5, [r4, #0]
 80068f8:	f015 0506 	ands.w	r5, r5, #6
 80068fc:	d106      	bne.n	800690c <_printf_common+0x48>
 80068fe:	f104 0a19 	add.w	sl, r4, #25
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	6832      	ldr	r2, [r6, #0]
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	42ab      	cmp	r3, r5
 800690a:	dc26      	bgt.n	800695a <_printf_common+0x96>
 800690c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006910:	1e13      	subs	r3, r2, #0
 8006912:	6822      	ldr	r2, [r4, #0]
 8006914:	bf18      	it	ne
 8006916:	2301      	movne	r3, #1
 8006918:	0692      	lsls	r2, r2, #26
 800691a:	d42b      	bmi.n	8006974 <_printf_common+0xb0>
 800691c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006920:	4649      	mov	r1, r9
 8006922:	4638      	mov	r0, r7
 8006924:	47c0      	blx	r8
 8006926:	3001      	adds	r0, #1
 8006928:	d01e      	beq.n	8006968 <_printf_common+0xa4>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	68e5      	ldr	r5, [r4, #12]
 800692e:	6832      	ldr	r2, [r6, #0]
 8006930:	f003 0306 	and.w	r3, r3, #6
 8006934:	2b04      	cmp	r3, #4
 8006936:	bf08      	it	eq
 8006938:	1aad      	subeq	r5, r5, r2
 800693a:	68a3      	ldr	r3, [r4, #8]
 800693c:	6922      	ldr	r2, [r4, #16]
 800693e:	bf0c      	ite	eq
 8006940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006944:	2500      	movne	r5, #0
 8006946:	4293      	cmp	r3, r2
 8006948:	bfc4      	itt	gt
 800694a:	1a9b      	subgt	r3, r3, r2
 800694c:	18ed      	addgt	r5, r5, r3
 800694e:	2600      	movs	r6, #0
 8006950:	341a      	adds	r4, #26
 8006952:	42b5      	cmp	r5, r6
 8006954:	d11a      	bne.n	800698c <_printf_common+0xc8>
 8006956:	2000      	movs	r0, #0
 8006958:	e008      	b.n	800696c <_printf_common+0xa8>
 800695a:	2301      	movs	r3, #1
 800695c:	4652      	mov	r2, sl
 800695e:	4649      	mov	r1, r9
 8006960:	4638      	mov	r0, r7
 8006962:	47c0      	blx	r8
 8006964:	3001      	adds	r0, #1
 8006966:	d103      	bne.n	8006970 <_printf_common+0xac>
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006970:	3501      	adds	r5, #1
 8006972:	e7c6      	b.n	8006902 <_printf_common+0x3e>
 8006974:	18e1      	adds	r1, r4, r3
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	2030      	movs	r0, #48	; 0x30
 800697a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800697e:	4422      	add	r2, r4
 8006980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006988:	3302      	adds	r3, #2
 800698a:	e7c7      	b.n	800691c <_printf_common+0x58>
 800698c:	2301      	movs	r3, #1
 800698e:	4622      	mov	r2, r4
 8006990:	4649      	mov	r1, r9
 8006992:	4638      	mov	r0, r7
 8006994:	47c0      	blx	r8
 8006996:	3001      	adds	r0, #1
 8006998:	d0e6      	beq.n	8006968 <_printf_common+0xa4>
 800699a:	3601      	adds	r6, #1
 800699c:	e7d9      	b.n	8006952 <_printf_common+0x8e>
	...

080069a0 <_printf_i>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	7e0f      	ldrb	r7, [r1, #24]
 80069a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069a8:	2f78      	cmp	r7, #120	; 0x78
 80069aa:	4691      	mov	r9, r2
 80069ac:	4680      	mov	r8, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	469a      	mov	sl, r3
 80069b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069b6:	d807      	bhi.n	80069c8 <_printf_i+0x28>
 80069b8:	2f62      	cmp	r7, #98	; 0x62
 80069ba:	d80a      	bhi.n	80069d2 <_printf_i+0x32>
 80069bc:	2f00      	cmp	r7, #0
 80069be:	f000 80d8 	beq.w	8006b72 <_printf_i+0x1d2>
 80069c2:	2f58      	cmp	r7, #88	; 0x58
 80069c4:	f000 80a3 	beq.w	8006b0e <_printf_i+0x16e>
 80069c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069d0:	e03a      	b.n	8006a48 <_printf_i+0xa8>
 80069d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069d6:	2b15      	cmp	r3, #21
 80069d8:	d8f6      	bhi.n	80069c8 <_printf_i+0x28>
 80069da:	a101      	add	r1, pc, #4	; (adr r1, 80069e0 <_printf_i+0x40>)
 80069dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	080069c9 	.word	0x080069c9
 80069ec:	080069c9 	.word	0x080069c9
 80069f0:	080069c9 	.word	0x080069c9
 80069f4:	080069c9 	.word	0x080069c9
 80069f8:	08006a4d 	.word	0x08006a4d
 80069fc:	080069c9 	.word	0x080069c9
 8006a00:	080069c9 	.word	0x080069c9
 8006a04:	080069c9 	.word	0x080069c9
 8006a08:	080069c9 	.word	0x080069c9
 8006a0c:	08006b59 	.word	0x08006b59
 8006a10:	08006a7d 	.word	0x08006a7d
 8006a14:	08006b3b 	.word	0x08006b3b
 8006a18:	080069c9 	.word	0x080069c9
 8006a1c:	080069c9 	.word	0x080069c9
 8006a20:	08006b7b 	.word	0x08006b7b
 8006a24:	080069c9 	.word	0x080069c9
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	080069c9 	.word	0x080069c9
 8006a30:	080069c9 	.word	0x080069c9
 8006a34:	08006b43 	.word	0x08006b43
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	1d1a      	adds	r2, r3, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	602a      	str	r2, [r5, #0]
 8006a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0a3      	b.n	8006b94 <_printf_i+0x1f4>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	6829      	ldr	r1, [r5, #0]
 8006a50:	0606      	lsls	r6, r0, #24
 8006a52:	f101 0304 	add.w	r3, r1, #4
 8006a56:	d50a      	bpl.n	8006a6e <_printf_i+0xce>
 8006a58:	680e      	ldr	r6, [r1, #0]
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	2e00      	cmp	r6, #0
 8006a5e:	da03      	bge.n	8006a68 <_printf_i+0xc8>
 8006a60:	232d      	movs	r3, #45	; 0x2d
 8006a62:	4276      	negs	r6, r6
 8006a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a68:	485e      	ldr	r0, [pc, #376]	; (8006be4 <_printf_i+0x244>)
 8006a6a:	230a      	movs	r3, #10
 8006a6c:	e019      	b.n	8006aa2 <_printf_i+0x102>
 8006a6e:	680e      	ldr	r6, [r1, #0]
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a76:	bf18      	it	ne
 8006a78:	b236      	sxthne	r6, r6
 8006a7a:	e7ef      	b.n	8006a5c <_printf_i+0xbc>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	6820      	ldr	r0, [r4, #0]
 8006a80:	1d19      	adds	r1, r3, #4
 8006a82:	6029      	str	r1, [r5, #0]
 8006a84:	0601      	lsls	r1, r0, #24
 8006a86:	d501      	bpl.n	8006a8c <_printf_i+0xec>
 8006a88:	681e      	ldr	r6, [r3, #0]
 8006a8a:	e002      	b.n	8006a92 <_printf_i+0xf2>
 8006a8c:	0646      	lsls	r6, r0, #25
 8006a8e:	d5fb      	bpl.n	8006a88 <_printf_i+0xe8>
 8006a90:	881e      	ldrh	r6, [r3, #0]
 8006a92:	4854      	ldr	r0, [pc, #336]	; (8006be4 <_printf_i+0x244>)
 8006a94:	2f6f      	cmp	r7, #111	; 0x6f
 8006a96:	bf0c      	ite	eq
 8006a98:	2308      	moveq	r3, #8
 8006a9a:	230a      	movne	r3, #10
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aa2:	6865      	ldr	r5, [r4, #4]
 8006aa4:	60a5      	str	r5, [r4, #8]
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	bfa2      	ittt	ge
 8006aaa:	6821      	ldrge	r1, [r4, #0]
 8006aac:	f021 0104 	bicge.w	r1, r1, #4
 8006ab0:	6021      	strge	r1, [r4, #0]
 8006ab2:	b90e      	cbnz	r6, 8006ab8 <_printf_i+0x118>
 8006ab4:	2d00      	cmp	r5, #0
 8006ab6:	d04d      	beq.n	8006b54 <_printf_i+0x1b4>
 8006ab8:	4615      	mov	r5, r2
 8006aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8006abe:	fb03 6711 	mls	r7, r3, r1, r6
 8006ac2:	5dc7      	ldrb	r7, [r0, r7]
 8006ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ac8:	4637      	mov	r7, r6
 8006aca:	42bb      	cmp	r3, r7
 8006acc:	460e      	mov	r6, r1
 8006ace:	d9f4      	bls.n	8006aba <_printf_i+0x11a>
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d10b      	bne.n	8006aec <_printf_i+0x14c>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	07de      	lsls	r6, r3, #31
 8006ad8:	d508      	bpl.n	8006aec <_printf_i+0x14c>
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	6861      	ldr	r1, [r4, #4]
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	bfde      	ittt	le
 8006ae2:	2330      	movle	r3, #48	; 0x30
 8006ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aec:	1b52      	subs	r2, r2, r5
 8006aee:	6122      	str	r2, [r4, #16]
 8006af0:	f8cd a000 	str.w	sl, [sp]
 8006af4:	464b      	mov	r3, r9
 8006af6:	aa03      	add	r2, sp, #12
 8006af8:	4621      	mov	r1, r4
 8006afa:	4640      	mov	r0, r8
 8006afc:	f7ff fee2 	bl	80068c4 <_printf_common>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d14c      	bne.n	8006b9e <_printf_i+0x1fe>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	b004      	add	sp, #16
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	4835      	ldr	r0, [pc, #212]	; (8006be4 <_printf_i+0x244>)
 8006b10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b14:	6829      	ldr	r1, [r5, #0]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b1c:	6029      	str	r1, [r5, #0]
 8006b1e:	061d      	lsls	r5, r3, #24
 8006b20:	d514      	bpl.n	8006b4c <_printf_i+0x1ac>
 8006b22:	07df      	lsls	r7, r3, #31
 8006b24:	bf44      	itt	mi
 8006b26:	f043 0320 	orrmi.w	r3, r3, #32
 8006b2a:	6023      	strmi	r3, [r4, #0]
 8006b2c:	b91e      	cbnz	r6, 8006b36 <_printf_i+0x196>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	f023 0320 	bic.w	r3, r3, #32
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	2310      	movs	r3, #16
 8006b38:	e7b0      	b.n	8006a9c <_printf_i+0xfc>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	f043 0320 	orr.w	r3, r3, #32
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	2378      	movs	r3, #120	; 0x78
 8006b44:	4828      	ldr	r0, [pc, #160]	; (8006be8 <_printf_i+0x248>)
 8006b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b4a:	e7e3      	b.n	8006b14 <_printf_i+0x174>
 8006b4c:	0659      	lsls	r1, r3, #25
 8006b4e:	bf48      	it	mi
 8006b50:	b2b6      	uxthmi	r6, r6
 8006b52:	e7e6      	b.n	8006b22 <_printf_i+0x182>
 8006b54:	4615      	mov	r5, r2
 8006b56:	e7bb      	b.n	8006ad0 <_printf_i+0x130>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	6826      	ldr	r6, [r4, #0]
 8006b5c:	6961      	ldr	r1, [r4, #20]
 8006b5e:	1d18      	adds	r0, r3, #4
 8006b60:	6028      	str	r0, [r5, #0]
 8006b62:	0635      	lsls	r5, r6, #24
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	d501      	bpl.n	8006b6c <_printf_i+0x1cc>
 8006b68:	6019      	str	r1, [r3, #0]
 8006b6a:	e002      	b.n	8006b72 <_printf_i+0x1d2>
 8006b6c:	0670      	lsls	r0, r6, #25
 8006b6e:	d5fb      	bpl.n	8006b68 <_printf_i+0x1c8>
 8006b70:	8019      	strh	r1, [r3, #0]
 8006b72:	2300      	movs	r3, #0
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	4615      	mov	r5, r2
 8006b78:	e7ba      	b.n	8006af0 <_printf_i+0x150>
 8006b7a:	682b      	ldr	r3, [r5, #0]
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	602a      	str	r2, [r5, #0]
 8006b80:	681d      	ldr	r5, [r3, #0]
 8006b82:	6862      	ldr	r2, [r4, #4]
 8006b84:	2100      	movs	r1, #0
 8006b86:	4628      	mov	r0, r5
 8006b88:	f7f9 fb2a 	bl	80001e0 <memchr>
 8006b8c:	b108      	cbz	r0, 8006b92 <_printf_i+0x1f2>
 8006b8e:	1b40      	subs	r0, r0, r5
 8006b90:	6060      	str	r0, [r4, #4]
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	2300      	movs	r3, #0
 8006b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b9c:	e7a8      	b.n	8006af0 <_printf_i+0x150>
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	47d0      	blx	sl
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d0ab      	beq.n	8006b04 <_printf_i+0x164>
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	079b      	lsls	r3, r3, #30
 8006bb0:	d413      	bmi.n	8006bda <_printf_i+0x23a>
 8006bb2:	68e0      	ldr	r0, [r4, #12]
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	4298      	cmp	r0, r3
 8006bb8:	bfb8      	it	lt
 8006bba:	4618      	movlt	r0, r3
 8006bbc:	e7a4      	b.n	8006b08 <_printf_i+0x168>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	47d0      	blx	sl
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d09b      	beq.n	8006b04 <_printf_i+0x164>
 8006bcc:	3501      	adds	r5, #1
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	9903      	ldr	r1, [sp, #12]
 8006bd2:	1a5b      	subs	r3, r3, r1
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dcf2      	bgt.n	8006bbe <_printf_i+0x21e>
 8006bd8:	e7eb      	b.n	8006bb2 <_printf_i+0x212>
 8006bda:	2500      	movs	r5, #0
 8006bdc:	f104 0619 	add.w	r6, r4, #25
 8006be0:	e7f5      	b.n	8006bce <_printf_i+0x22e>
 8006be2:	bf00      	nop
 8006be4:	08006d81 	.word	0x08006d81
 8006be8:	08006d92 	.word	0x08006d92

08006bec <memmove>:
 8006bec:	4288      	cmp	r0, r1
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	eb01 0402 	add.w	r4, r1, r2
 8006bf4:	d902      	bls.n	8006bfc <memmove+0x10>
 8006bf6:	4284      	cmp	r4, r0
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	d807      	bhi.n	8006c0c <memmove+0x20>
 8006bfc:	1e43      	subs	r3, r0, #1
 8006bfe:	42a1      	cmp	r1, r4
 8006c00:	d008      	beq.n	8006c14 <memmove+0x28>
 8006c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c0a:	e7f8      	b.n	8006bfe <memmove+0x12>
 8006c0c:	4402      	add	r2, r0
 8006c0e:	4601      	mov	r1, r0
 8006c10:	428a      	cmp	r2, r1
 8006c12:	d100      	bne.n	8006c16 <memmove+0x2a>
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c1e:	e7f7      	b.n	8006c10 <memmove+0x24>

08006c20 <_realloc_r>:
 8006c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c24:	4680      	mov	r8, r0
 8006c26:	4614      	mov	r4, r2
 8006c28:	460e      	mov	r6, r1
 8006c2a:	b921      	cbnz	r1, 8006c36 <_realloc_r+0x16>
 8006c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c30:	4611      	mov	r1, r2
 8006c32:	f7ff bb85 	b.w	8006340 <_malloc_r>
 8006c36:	b92a      	cbnz	r2, 8006c44 <_realloc_r+0x24>
 8006c38:	f7ff fc9c 	bl	8006574 <_free_r>
 8006c3c:	4625      	mov	r5, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c44:	f000 f81b 	bl	8006c7e <_malloc_usable_size_r>
 8006c48:	4284      	cmp	r4, r0
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	d802      	bhi.n	8006c54 <_realloc_r+0x34>
 8006c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c52:	d812      	bhi.n	8006c7a <_realloc_r+0x5a>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4640      	mov	r0, r8
 8006c58:	f7ff fb72 	bl	8006340 <_malloc_r>
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d0ed      	beq.n	8006c3e <_realloc_r+0x1e>
 8006c62:	42bc      	cmp	r4, r7
 8006c64:	4622      	mov	r2, r4
 8006c66:	4631      	mov	r1, r6
 8006c68:	bf28      	it	cs
 8006c6a:	463a      	movcs	r2, r7
 8006c6c:	f7ff fb32 	bl	80062d4 <memcpy>
 8006c70:	4631      	mov	r1, r6
 8006c72:	4640      	mov	r0, r8
 8006c74:	f7ff fc7e 	bl	8006574 <_free_r>
 8006c78:	e7e1      	b.n	8006c3e <_realloc_r+0x1e>
 8006c7a:	4635      	mov	r5, r6
 8006c7c:	e7df      	b.n	8006c3e <_realloc_r+0x1e>

08006c7e <_malloc_usable_size_r>:
 8006c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c82:	1f18      	subs	r0, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bfbc      	itt	lt
 8006c88:	580b      	ldrlt	r3, [r1, r0]
 8006c8a:	18c0      	addlt	r0, r0, r3
 8006c8c:	4770      	bx	lr
	...

08006c90 <_init>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr

08006c9c <_fini>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	bf00      	nop
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr
