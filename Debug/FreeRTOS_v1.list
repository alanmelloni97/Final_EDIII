
FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006538  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006794  08006794  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800679c  0800679c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041a4  20000074  08006818  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004218  08006818  00024218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162e1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0e  00000000  00000000  00036385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00039298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fe4  00000000  00000000  0003b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c8c  00000000  00000000  00053514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096701  00000000  00000000  000681a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000fe8a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  000fe964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001167  00000000  00000000  00103724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066c0 	.word	0x080066c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080066c0 	.word	0x080066c0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
	...

080004f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <vApplicationGetIdleTaskMemory+0x2c>)
 8000504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <vApplicationGetIdleTaskMemory+0x30>)
 800050a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000090 	.word	0x20000090
 8000524:	20000144 	.word	0x20000144

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fdf7 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f879 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f9d7 	bl	80008e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053a:	f000 f9ab 	bl	8000894 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800053e:	f000 f8df 	bl	8000700 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000542:	f000 f94d 	bl	80007e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Timer que captura el ECHO del sensor
 8000546:	2100      	movs	r1, #0
 8000548:	482b      	ldr	r0, [pc, #172]	; (80005f8 <main+0xd0>)
 800054a:	f001 ffb3 	bl	80024b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		//Timer que genera la señal sonora
 800054e:	2100      	movs	r1, #0
 8000550:	482a      	ldr	r0, [pc, #168]	; (80005fc <main+0xd4>)
 8000552:	f001 fea5 	bl	80022a0 <HAL_TIM_PWM_Start>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  semaforo1=xSemaphoreCreateBinary();
 8000556:	2203      	movs	r2, #3
 8000558:	2100      	movs	r1, #0
 800055a:	2001      	movs	r0, #1
 800055c:	f003 fd0a 	bl	8003f74 <xQueueGenericCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a27      	ldr	r2, [pc, #156]	; (8000600 <main+0xd8>)
 8000564:	6013      	str	r3, [r2, #0]
  semaforo2=xSemaphoreCreateBinary();
 8000566:	2203      	movs	r2, #3
 8000568:	2100      	movs	r1, #0
 800056a:	2001      	movs	r0, #1
 800056c:	f003 fd02 	bl	8003f74 <xQueueGenericCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a24      	ldr	r2, [pc, #144]	; (8000604 <main+0xdc>)
 8000574:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(semaforo1);
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <main+0xd8>)
 8000578:	6818      	ldr	r0, [r3, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	f003 fd52 	bl	8004028 <xQueueGenericSend>
  xSemaphoreGive(semaforo2);
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <main+0xdc>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	f003 fd4b 	bl	8004028 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <main+0xe0>)
 8000594:	1d3c      	adds	r4, r7, #4
 8000596:	461d      	mov	r5, r3
 8000598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fb7a 	bl	8003ca2 <osThreadCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a16      	ldr	r2, [pc, #88]	; (800060c <main+0xe4>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((void*) TrigSensor, "trigger", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 80005b4:	2300      	movs	r3, #0
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	4913      	ldr	r1, [pc, #76]	; (8000610 <main+0xe8>)
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <main+0xec>)
 80005c4:	f004 f927 	bl	8004816 <xTaskCreate>
  xTaskCreate((void*) FiltroDistancia, "filtro", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, NULL);
 80005c8:	2300      	movs	r3, #0
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2303      	movs	r3, #3
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	4910      	ldr	r1, [pc, #64]	; (8000618 <main+0xf0>)
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <main+0xf4>)
 80005d8:	f004 f91d 	bl	8004816 <xTaskCreate>
  xTaskCreate((void*) generacionPWM, "PWM", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 80005dc:	2300      	movs	r3, #0
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	490d      	ldr	r1, [pc, #52]	; (8000620 <main+0xf8>)
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0xfc>)
 80005ec:	f004 f913 	bl	8004816 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f003 fb50 	bl	8003c94 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0xcc>
 80005f6:	bf00      	nop
 80005f8:	20000344 	.word	0x20000344
 80005fc:	2000038c 	.word	0x2000038c
 8000600:	2000041c 	.word	0x2000041c
 8000604:	20000420 	.word	0x20000420
 8000608:	080066f8 	.word	0x080066f8
 800060c:	20000418 	.word	0x20000418
 8000610:	080066e4 	.word	0x080066e4
 8000614:	08000ae5 	.word	0x08000ae5
 8000618:	080066ec 	.word	0x080066ec
 800061c:	08000b15 	.word	0x08000b15
 8000620:	080066f4 	.word	0x080066f4
 8000624:	08000c11 	.word	0x08000c11

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 ff78 	bl	800652c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <SystemClock_Config+0xd0>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd4>)
 8000676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f828 	bl	8001708 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006be:	f000 fb45 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fa8a 	bl	8001bf8 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ea:	f000 fb2f 	bl	8000d4c <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <MX_TIM2_Init+0xdc>)
 800072c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000734:	2253      	movs	r2, #83	; 0x53
 8000736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_TIM2_Init+0xdc>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_TIM2_Init+0xdc>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000752:	4822      	ldr	r0, [pc, #136]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000754:	f001 fca2 	bl	800209c <HAL_TIM_Base_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800075e:	f000 faf5 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000768:	f107 0318 	add.w	r3, r7, #24
 800076c:	4619      	mov	r1, r3
 800076e:	481b      	ldr	r0, [pc, #108]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000770:	f002 fa20 	bl	8002bb4 <HAL_TIM_ConfigClockSource>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800077a:	f000 fae7 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800077e:	4817      	ldr	r0, [pc, #92]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000780:	f001 fe3e 	bl	8002400 <HAL_TIM_IC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800078a:	f000 fadf 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	4619      	mov	r1, r3
 800079c:	480f      	ldr	r0, [pc, #60]	; (80007dc <MX_TIM2_Init+0xdc>)
 800079e:	f002 ff1d 	bl	80035dc <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007a8:	f000 fad0 	bl	8000d4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007b0:	2301      	movs	r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_TIM2_Init+0xdc>)
 80007c4:	f002 f898 	bl	80028f8 <HAL_TIM_IC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80007ce:	f000 fabd 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000344 	.word	0x20000344

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_TIM3_Init+0xac>)
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <MX_TIM3_Init+0xb0>)
 8000806:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_TIM3_Init+0xac>)
 800080a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800080e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_TIM3_Init+0xac>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_TIM3_Init+0xac>)
 8000818:	2264      	movs	r2, #100	; 0x64
 800081a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_TIM3_Init+0xac>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_TIM3_Init+0xac>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000828:	4818      	ldr	r0, [pc, #96]	; (800088c <MX_TIM3_Init+0xac>)
 800082a:	f001 fce9 	bl	8002200 <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000834:	f000 fa8a 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_TIM3_Init+0xac>)
 8000848:	f002 fec8 	bl	80035dc <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000852:	f000 fa7b 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	; 0x60
 8000858:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800085a:	2332      	movs	r3, #50	; 0x32
 800085c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM3_Init+0xac>)
 800086e:	f002 f8df 	bl	8002a30 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000878:	f000 fa68 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM3_Init+0xac>)
 800087e:	f000 fb07 	bl	8000e90 <HAL_TIM_MspPostInit>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000038c 	.word	0x2000038c
 8000890:	40000400 	.word	0x40000400

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f002 ff08 	bl	80036e0 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 fa39 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200003d4 	.word	0x200003d4
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a30      	ldr	r2, [pc, #192]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_GPIO_Init+0xe0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <MX_GPIO_Init+0xe0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_GPIO_Init+0xe0>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_GPIO_Init+0xe0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|LD2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2121      	movs	r1, #33	; 0x21
 8000972:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_GPIO_Init+0xe4>)
 8000974:	f000 fe7c 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4810      	ldr	r0, [pc, #64]	; (80009d0 <MX_GPIO_Init+0xe8>)
 8000990:	f000 fcea 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|LD2_Pin;
 8000994:	2321      	movs	r3, #33	; 0x21
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4808      	ldr	r0, [pc, #32]	; (80009cc <MX_GPIO_Init+0xe4>)
 80009ac:	f000 fcdc 	bl	8001368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2105      	movs	r1, #5
 80009b4:	2028      	movs	r0, #40	; 0x28
 80009b6:	f000 fcad 	bl	8001314 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ba:	2028      	movs	r0, #40	; 0x28
 80009bc:	f000 fcc6 	bl	800134c <HAL_NVIC_EnableIRQ>

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020800 	.word	0x40020800

080009d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009de:	2120      	movs	r1, #32
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80009e2:	f000 fe5e 	bl	80016a2 <HAL_GPIO_TogglePin>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40020000 	.word	0x40020000

080009f4 <HAL_TIM_IC_CaptureCallback>:
uint32_t uartBufferLen=0;
char uart_buf [50];



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

	// Calculo el ancho del pulso que triguereó la interrupción
	if(flancoAscendenteCapturado==0){
 80009fc:	4b33      	ldr	r3, [pc, #204]	; (8000acc <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d11b      	bne.n	8000a3c <HAL_TIM_IC_CaptureCallback+0x48>
		valorInicial=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000a04:	2100      	movs	r1, #0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f002 f99c 	bl	8002d44 <HAL_TIM_ReadCapturedValue>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a12:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=1;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6a1a      	ldr	r2, [r3, #32]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 020a 	bic.w	r2, r2, #10
 8000a28:	621a      	str	r2, [r3, #32]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6a1a      	ldr	r2, [r3, #32]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f042 0202 	orr.w	r2, r2, #2
 8000a38:	621a      	str	r2, [r3, #32]
		else if (valorFinal <= valorInicial)
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorInicial+valorFinal;
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);

	}
}
 8000a3a:	e042      	b.n	8000ac2 <HAL_TIM_IC_CaptureCallback+0xce>
	else if(flancoAscendenteCapturado==1){
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d13e      	bne.n	8000ac2 <HAL_TIM_IC_CaptureCallback+0xce>
		valorFinal=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000a44:	2100      	movs	r1, #0
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f002 f97c 	bl	8002d44 <HAL_TIM_ReadCapturedValue>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a52:	601a      	str	r2, [r3, #0]
		flancoAscendenteCapturado=0;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6a1a      	ldr	r2, [r3, #32]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 020a 	bic.w	r2, r2, #10
 8000a68:	621a      	str	r2, [r3, #32]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6a12      	ldr	r2, [r2, #32]
 8000a74:	621a      	str	r2, [r3, #32]
		if(valorFinal>valorInicial)
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dd07      	ble.n	8000a92 <HAL_TIM_IC_CaptureCallback+0x9e>
			pulso=valorFinal-valorInicial;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	e011      	b.n	8000ab6 <HAL_TIM_IC_CaptureCallback+0xc2>
		else if (valorFinal <= valorInicial)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	dc0b      	bgt.n	8000ab6 <HAL_TIM_IC_CaptureCallback+0xc2>
			pulso=__HAL_TIM_GET_AUTORELOAD(&htim2)-valorInicial+valorFinal;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000aa6:	6812      	ldr	r2, [r2, #0]
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000ab4:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(semaforo1,pdTRUE);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2101      	movs	r1, #1
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fbb1 	bl	8004224 <xQueueGiveFromISR>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000424 	.word	0x20000424
 8000ad0:	20000428 	.word	0x20000428
 8000ad4:	2000042c 	.word	0x2000042c
 8000ad8:	20000430 	.word	0x20000430
 8000adc:	20000344 	.word	0x20000344
 8000ae0:	2000041c 	.word	0x2000041c

08000ae4 <TrigSensor>:


void TrigSensor(void const * argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2101      	movs	r1, #1
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <TrigSensor+0x2c>)
 8000af2:	f000 fdbd 	bl	8001670 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);		// Delay de 1 ms
 8000af6:	2001      	movs	r0, #1
 8000af8:	f003 ffda 	bl	8004ab0 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <TrigSensor+0x2c>)
 8000b02:	f000 fdb5 	bl	8001670 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);		//Delay de 40 ms (output máximo del sensor: 38 ms)
 8000b06:	2028      	movs	r0, #40	; 0x28
 8000b08:	f003 ffd2 	bl	8004ab0 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000b0c:	e7ee      	b.n	8000aec <TrigSensor+0x8>
 8000b0e:	bf00      	nop
 8000b10:	40020000 	.word	0x40020000

08000b14 <FiltroDistancia>:
arm_fir_instance_f32 filtro_fir;



void FiltroDistancia(void const * argument)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	int i;

  /* Infinite loop */
  while(1)
  {
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <FiltroDistancia+0xcc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 fc0b 	bl	8004340 <xQueueSemaphoreTake>

	  //agrego muestra a muestras[], cuando tengo 5 doy el semaforo 2 para generar el nuevo pulso
	  muestras[pos]=(float) pulso*343*100/(2*1000000);
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <FiltroDistancia+0xd0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	ee07 3a90 	vmov	s15, r3
 8000b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b36:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000be8 <FiltroDistancia+0xd4>
 8000b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000bec <FiltroDistancia+0xd8>
 8000b42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <FiltroDistancia+0xdc>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000bf4 <FiltroDistancia+0xe0>
 8000b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b52:	4a29      	ldr	r2, [pc, #164]	; (8000bf8 <FiltroDistancia+0xe4>)
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	edc3 7a00 	vstr	s15, [r3]
	  pos++;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <FiltroDistancia+0xdc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <FiltroDistancia+0xdc>)
 8000b64:	6013      	str	r3, [r2, #0]
	  if(pos==TAM_FILTRO){
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <FiltroDistancia+0xdc>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	d1d6      	bne.n	8000b1c <FiltroDistancia+0x8>
		  pos=0;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <FiltroDistancia+0xdc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
		  arm_fir_f32(&filtro_fir, muestras, salida,BLOCK_SIZE_FLOAT);
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <FiltroDistancia+0xe8>)
 8000b7a:	491f      	ldr	r1, [pc, #124]	; (8000bf8 <FiltroDistancia+0xe4>)
 8000b7c:	4820      	ldr	r0, [pc, #128]	; (8000c00 <FiltroDistancia+0xec>)
 8000b7e:	f005 fa3d 	bl	8005ffc <arm_fir_f32>
//		  		  float32_t * pState,
//		  		  BLOCK_SIZE_FLOAT);



		  for(i = 0; i < TAM_FILTRO; i++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	e00e      	b.n	8000ba6 <FiltroDistancia+0x92>
		      suma = suma + muestras[i];
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <FiltroDistancia+0xe4>)
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9c:	edc7 7a03 	vstr	s15, [r7, #12]
		  for(i = 0; i < TAM_FILTRO; i++)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	dded      	ble.n	8000b88 <FiltroDistancia+0x74>
		  distancia=(int) suma/TAM_FILTRO;
 8000bac:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bb4:	ee17 1a90 	vmov	r1, s15
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <FiltroDistancia+0xf0>)
 8000bba:	fb83 2301 	smull	r2, r3, r3, r1
 8000bbe:	105a      	asrs	r2, r3, #1
 8000bc0:	17cb      	asrs	r3, r1, #31
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <FiltroDistancia+0xf4>)
 8000bc6:	6013      	str	r3, [r2, #0]
		  suma=0;
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
		  //debug con uart
//		  uartBufferLen=sprintf(uart_buf,"%u Cm \r\n",distancia);
//		  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);
		  xSemaphoreGive(semaforo2);
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <FiltroDistancia+0xf8>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f003 fa26 	bl	8004028 <xQueueGenericSend>
	  xSemaphoreTake(semaforo1,portMAX_DELAY);
 8000bdc:	e79e      	b.n	8000b1c <FiltroDistancia+0x8>
 8000bde:	bf00      	nop
 8000be0:	2000041c 	.word	0x2000041c
 8000be4:	20000430 	.word	0x20000430
 8000be8:	43ab8000 	.word	0x43ab8000
 8000bec:	42c80000 	.word	0x42c80000
 8000bf0:	2000045c 	.word	0x2000045c
 8000bf4:	49f42400 	.word	0x49f42400
 8000bf8:	20000434 	.word	0x20000434
 8000bfc:	20000448 	.word	0x20000448
 8000c00:	20000464 	.word	0x20000464
 8000c04:	66666667 	.word	0x66666667
 8000c08:	20000460 	.word	0x20000460
 8000c0c:	20000420 	.word	0x20000420

08000c10 <generacionPWM>:

  }
  /* USER CODE END 5 */
}

void generacionPWM(void const * argument){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	int pwm;
	int pwm_ant=0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
	while(1){
		xSemaphoreTake(semaforo2,portMAX_DELAY);
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <generacionPWM+0xd8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fb8b 	bl	8004340 <xQueueSemaphoreTake>

		if(distancia>600)	//si el sensor indica que no recibió el pulso, seteo la distancia máxima que puede medir
 8000c2a:	4b30      	ldr	r3, [pc, #192]	; (8000cec <generacionPWM+0xdc>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000c32:	dd02      	ble.n	8000c3a <generacionPWM+0x2a>
			pwm = 600;
 8000c34:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c38:	60fb      	str	r3, [r7, #12]

		// redondeo los períodos posibles a multiplos de 5
		if(distancia % 10 < 5)
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <generacionPWM+0xdc>)
 8000c3c:	6819      	ldr	r1, [r3, #0]
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <generacionPWM+0xe0>)
 8000c40:	fb83 2301 	smull	r2, r3, r3, r1
 8000c44:	109a      	asrs	r2, r3, #2
 8000c46:	17cb      	asrs	r3, r1, #31
 8000c48:	1ad2      	subs	r2, r2, r3
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	2a04      	cmp	r2, #4
 8000c56:	dc11      	bgt.n	8000c7c <generacionPWM+0x6c>
			pwm = distancia - distancia % 10;
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <generacionPWM+0xdc>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <generacionPWM+0xdc>)
 8000c5e:	6819      	ldr	r1, [r3, #0]
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <generacionPWM+0xe0>)
 8000c62:	fb83 2301 	smull	r2, r3, r3, r1
 8000c66:	109a      	asrs	r2, r3, #2
 8000c68:	17cb      	asrs	r3, r1, #31
 8000c6a:	1ad2      	subs	r2, r2, r3
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	1aca      	subs	r2, r1, r3
 8000c76:	1a83      	subs	r3, r0, r2
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e021      	b.n	8000cc0 <generacionPWM+0xb0>
		else if(distancia % 10 >=5)
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <generacionPWM+0xdc>)
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <generacionPWM+0xe0>)
 8000c82:	fb83 2301 	smull	r2, r3, r3, r1
 8000c86:	109a      	asrs	r2, r3, #2
 8000c88:	17cb      	asrs	r3, r1, #31
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	1aca      	subs	r2, r1, r3
 8000c96:	2a04      	cmp	r2, #4
 8000c98:	dd12      	ble.n	8000cc0 <generacionPWM+0xb0>
			pwm = distancia + 10 -distancia % 10;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <generacionPWM+0xdc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f103 000a 	add.w	r0, r3, #10
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <generacionPWM+0xdc>)
 8000ca4:	6819      	ldr	r1, [r3, #0]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <generacionPWM+0xe0>)
 8000ca8:	fb83 2301 	smull	r2, r3, r3, r1
 8000cac:	109a      	asrs	r2, r3, #2
 8000cae:	17cb      	asrs	r3, r1, #31
 8000cb0:	1ad2      	subs	r2, r2, r3
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	1aca      	subs	r2, r1, r3
 8000cbc:	1a83      	subs	r3, r0, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

		//uart debug
//		uartBufferLen=sprintf(uart_buf,"%u pwm \r\n",pwm);
//		HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uartBufferLen,HAL_MAX_DELAY);

		if(pwm!=pwm_ant){
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d0a9      	beq.n	8000c1c <generacionPWM+0xc>
			TIM3->ARR = pwm;	//seteo período del pulso
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <generacionPWM+0xe4>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR1 = pwm/2;	//seteo tiempo que el pulso está en HIGH (la mitad para tener duty cicle=50%)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	0fda      	lsrs	r2, r3, #31
 8000cd2:	4413      	add	r3, r2
 8000cd4:	105b      	asrs	r3, r3, #1
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <generacionPWM+0xe4>)
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CNT=0;		//reseteo cuenta para evitar cambiar ARR a un valor más chico que la cuenta y que el timer siga de largo
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <generacionPWM+0xe4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
			pwm_ant=pwm;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
		xSemaphoreTake(semaforo2,portMAX_DELAY);
 8000ce6:	e799      	b.n	8000c1c <generacionPWM+0xc>
 8000ce8:	20000420 	.word	0x20000420
 8000cec:	20000460 	.word	0x20000460
 8000cf0:	66666667 	.word	0x66666667
 8000cf4:	40000400 	.word	0x40000400

08000cf8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <StartDefaultTask+0x2c>)
 8000d06:	f000 fcb3 	bl	8001670 <HAL_GPIO_WritePin>
	vTaskDelay(1/portTICK_PERIOD_MS);		// Delay de 1 ms
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f003 fed0 	bl	8004ab0 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <StartDefaultTask+0x2c>)
 8000d16:	f000 fcab 	bl	8001670 <HAL_GPIO_WritePin>
	vTaskDelay(40/portTICK_PERIOD_MS);		//Delay de 40 ms (output máximo del sensor: 38 ms)
 8000d1a:	2028      	movs	r0, #40	; 0x28
 8000d1c:	f003 fec8 	bl	8004ab0 <vTaskDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000d20:	e7ee      	b.n	8000d00 <StartDefaultTask+0x8>
 8000d22:	bf00      	nop
 8000d24:	40020000 	.word	0x40020000

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3a:	f000 fa13 	bl	8001164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010000 	.word	0x40010000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_MspInit+0x54>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <HAL_MspInit+0x54>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_MspInit+0x54>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_MspInit+0x54>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_MspInit+0x54>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_MspInit+0x54>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	210f      	movs	r1, #15
 8000d9a:	f06f 0001 	mvn.w	r0, #1
 8000d9e:	f000 fab9 	bl	8001314 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd0:	d134      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_TIM_Base_MspInit+0x94>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a1a      	ldr	r2, [pc, #104]	; (8000e44 <HAL_TIM_Base_MspInit+0x94>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_TIM_Base_MspInit+0x94>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_TIM_Base_MspInit+0x94>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_TIM_Base_MspInit+0x94>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_TIM_Base_MspInit+0x94>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <HAL_TIM_Base_MspInit+0x98>)
 8000e28:	f000 fa9e 	bl	8001368 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2105      	movs	r1, #5
 8000e30:	201c      	movs	r0, #28
 8000e32:	f000 fa6f 	bl	8001314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e36:	201c      	movs	r0, #28
 8000e38:	f000 fa88 	bl	800134c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_TIM_PWM_MspInit+0x40>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_TIM_PWM_MspInit+0x40>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <HAL_TIM_PWM_MspInit+0x40>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40000400 	.word	0x40000400
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d11d      	bne.n	8000eee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_TIM_MspPostInit+0x6c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_TIM_MspPostInit+0x6c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_TIM_MspPostInit+0x6c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_TIM_MspPostInit+0x70>)
 8000eea:	f000 fa3d 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40000400 	.word	0x40000400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_UART_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12b      	bne.n	8000f7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f5e:	230c      	movs	r3, #12
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <HAL_UART_MspInit+0x8c>)
 8000f7a:	f000 f9f5 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f000 f9b3 	bl	8001314 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fae:	2019      	movs	r0, #25
 8000fb0:	f000 f9cc 	bl	800134c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_InitTick+0xa0>)
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_InitTick+0xa0>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_InitTick+0xa0>)
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd0:	f107 0210 	add.w	r2, r7, #16
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 f82c 	bl	8002038 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fe0:	f001 f816 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8000fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <HAL_InitTick+0xa4>)
 8000fea:	fba2 2303 	umull	r2, r3, r2, r3
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_InitTick+0xa8>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <HAL_InitTick+0xac>)
 8000ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_InitTick+0xa8>)
 8000ffc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001000:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_InitTick+0xa8>)
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001006:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_InitTick+0xa8>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_InitTick+0xa8>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <HAL_InitTick+0xa8>)
 8001016:	f001 f841 	bl	800209c <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d104      	bne.n	800102a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <HAL_InitTick+0xa8>)
 8001022:	f001 f88b 	bl	800213c <HAL_TIM_Base_Start_IT>
 8001026:	4603      	mov	r3, r0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	431bde83 	.word	0x431bde83
 800103c:	20000470 	.word	0x20000470
 8001040:	40010000 	.word	0x40010000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001076:	f001 fb37 	bl	80026e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000470 	.word	0x20000470

08001084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <TIM2_IRQHandler+0x10>)
 800108a:	f001 fb2d 	bl	80026e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000344 	.word	0x20000344

08001098 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800109c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010a0:	f000 fb1a 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e8:	4c0b      	ldr	r4, [pc, #44]	; (8001118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f6:	f7ff ffd7 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f005 f9e3 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fa13 	bl	8000528 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001104:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001110:	080067a4 	.word	0x080067a4
  ldr r2, =_sbss
 8001114:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001118:	20004218 	.word	0x20004218

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f8d8 	bl	80012fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	200f      	movs	r0, #15
 8001150:	f7ff ff20 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fe00 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	200004b8 	.word	0x200004b8

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200004b8 	.word	0x200004b8

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0b      	blt.n	8001232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 021f 	and.w	r2, r3, #31
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <__NVIC_EnableIRQ+0x38>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff4c 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001326:	f7ff ff61 	bl	80011ec <__NVIC_GetPriorityGrouping>
 800132a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	6978      	ldr	r0, [r7, #20]
 8001332:	f7ff ffb1 	bl	8001298 <NVIC_EncodePriority>
 8001336:	4602      	mov	r2, r0
 8001338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff80 	bl	8001244 <__NVIC_SetPriority>
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff54 	bl	8001208 <__NVIC_EnableIRQ>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e159      	b.n	8001638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8148 	bne.w	8001632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a2 	beq.w	8001632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b57      	ldr	r3, [pc, #348]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a56      	ldr	r2, [pc, #344]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b54      	ldr	r3, [pc, #336]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a52      	ldr	r2, [pc, #328]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a49      	ldr	r2, [pc, #292]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x202>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_GPIO_Init+0x2f4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x1fe>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a47      	ldr	r2, [pc, #284]	; (8001660 <HAL_GPIO_Init+0x2f8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a46      	ldr	r2, [pc, #280]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x1f6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x1f2>
 8001556:	2304      	movs	r3, #4
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x204>
 800155a:	2307      	movs	r3, #7
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x204>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x204>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x204>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x204>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_GPIO_Init+0x304>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a2f      	ldr	r2, [pc, #188]	; (800166c <HAL_GPIO_Init+0x304>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_GPIO_Init+0x304>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <HAL_GPIO_Init+0x304>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_GPIO_Init+0x304>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_GPIO_Init+0x304>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_GPIO_Init+0x304>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_GPIO_Init+0x304>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f aea2 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016b4:	887a      	ldrh	r2, [r7, #2]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4013      	ands	r3, r2
 80016ba:	041a      	lsls	r2, r3, #16
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43d9      	mvns	r1, r3
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	400b      	ands	r3, r1
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f96c 	bl	80009d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40013c00 	.word	0x40013c00

08001708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e267      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d075      	beq.n	8001812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001726:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b04      	cmp	r3, #4
 8001730:	d00c      	beq.n	800174c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b85      	ldr	r3, [pc, #532]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173a:	2b08      	cmp	r3, #8
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	4b82      	ldr	r3, [pc, #520]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b7e      	ldr	r3, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x108>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e242      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x74>
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a75      	ldr	r2, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b70      	ldr	r3, [pc, #448]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6f      	ldr	r2, [pc, #444]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6c      	ldr	r2, [pc, #432]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 80017a0:	4b69      	ldr	r3, [pc, #420]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a68      	ldr	r2, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fce4 	bl	800118c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fce0 	bl	800118c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e207      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xc0>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fcd0 	bl	800118c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fccc 	bl	800118c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1f3      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b51      	ldr	r3, [pc, #324]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0xe8>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d063      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001832:	2b08      	cmp	r3, #8
 8001834:	d11c      	bne.n	8001870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x152>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1c7      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4937      	ldr	r1, [pc, #220]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	e03a      	b.n	80018e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_OscConfig+0x244>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fc85 	bl	800118c <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fc81 	bl	800118c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1a8      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4925      	ldr	r1, [pc, #148]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_OscConfig+0x244>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fc64 	bl	800118c <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff fc60 	bl	800118c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e187      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d036      	beq.n	8001960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_RCC_OscConfig+0x248>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fc44 	bl	800118c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fc40 	bl	800118c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e167      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x200>
 8001926:	e01b      	b.n	8001960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x248>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff fc2d 	bl	800118c <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	e00e      	b.n	8001954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff fc29 	bl	800118c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d907      	bls.n	8001954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e150      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
 8001948:	40023800 	.word	0x40023800
 800194c:	42470000 	.word	0x42470000
 8001950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ea      	bne.n	8001936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8097 	beq.w	8001a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10f      	bne.n	800199e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b7d      	ldr	r3, [pc, #500]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a7c      	ldr	r2, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199a:	2301      	movs	r3, #1
 800199c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b77      	ldr	r3, [pc, #476]	; (8001b7c <HAL_RCC_OscConfig+0x474>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019aa:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <HAL_RCC_OscConfig+0x474>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a73      	ldr	r2, [pc, #460]	; (8001b7c <HAL_RCC_OscConfig+0x474>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fbe9 	bl	800118c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019be:	f7ff fbe5 	bl	800118c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e10c      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCC_OscConfig+0x474>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x2ea>
 80019e4:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a63      	ldr	r2, [pc, #396]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
 80019f0:	e01c      	b.n	8001a2c <HAL_RCC_OscConfig+0x324>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x30c>
 80019fa:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a5e      	ldr	r2, [pc, #376]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6713      	str	r3, [r2, #112]	; 0x70
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0x324>
 8001a14:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a57      	ldr	r2, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a54      	ldr	r2, [pc, #336]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f023 0304 	bic.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d015      	beq.n	8001a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff fbaa 	bl	800118c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fba6 	bl	800118c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e0cb      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0ee      	beq.n	8001a3c <HAL_RCC_OscConfig+0x334>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a60:	f7ff fb94 	bl	800118c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7ff fb90 	bl	800118c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0b5      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ee      	bne.n	8001a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a90:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a38      	ldr	r2, [pc, #224]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80a1 	beq.w	8001be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d05c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d141      	bne.n	8001b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_RCC_OscConfig+0x478>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fb64 	bl	800118c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff fb60 	bl	800118c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e087      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	019b      	lsls	r3, r3, #6
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	3b01      	subs	r3, #1
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	491b      	ldr	r1, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x478>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fb39 	bl	800118c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff fb35 	bl	800118c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e05c      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x416>
 8001b3c:	e054      	b.n	8001be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_OscConfig+0x478>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fb22 	bl	800118c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff fb1e 	bl	800118c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e045      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x444>
 8001b6a:	e03d      	b.n	8001be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e038      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x4ec>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d028      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d121      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d11a      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0cc      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d90c      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d044      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e067      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4934      	ldr	r1, [pc, #208]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff fa50 	bl	800118c <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7ff fa4c 	bl	800118c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e04f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d20c      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f8f8 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023c00 	.word	0x40023c00
 8001db4:	40023800 	.word	0x40023800
 8001db8:	0800671c 	.word	0x0800671c
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc8:	b094      	sub	sp, #80	; 0x50
 8001dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ddc:	4b79      	ldr	r3, [pc, #484]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d00d      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x40>
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	f200 80e1 	bhi.w	8001fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x34>
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001df6:	e0db      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001dfc:	e0db      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfe:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x208>)
 8001e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e02:	e0d8      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1a:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	099b      	lsrs	r3, r3, #6
 8001e20:	2200      	movs	r2, #0
 8001e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
 8001e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e36:	4622      	mov	r2, r4
 8001e38:	462b      	mov	r3, r5
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	0159      	lsls	r1, r3, #5
 8001e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e48:	0150      	lsls	r0, r2, #5
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4621      	mov	r1, r4
 8001e50:	1a51      	subs	r1, r2, r1
 8001e52:	6139      	str	r1, [r7, #16]
 8001e54:	4629      	mov	r1, r5
 8001e56:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e68:	4659      	mov	r1, fp
 8001e6a:	018b      	lsls	r3, r1, #6
 8001e6c:	4651      	mov	r1, sl
 8001e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e72:	4651      	mov	r1, sl
 8001e74:	018a      	lsls	r2, r1, #6
 8001e76:	4651      	mov	r1, sl
 8001e78:	ebb2 0801 	subs.w	r8, r2, r1
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e96:	4690      	mov	r8, r2
 8001e98:	4699      	mov	r9, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	eb18 0303 	adds.w	r3, r8, r3
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	eb49 0303 	adc.w	r3, r9, r3
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	024b      	lsls	r3, r1, #9
 8001eba:	4621      	mov	r1, r4
 8001ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	024a      	lsls	r2, r1, #9
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eca:	2200      	movs	r2, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ed4:	f7fe f984 	bl	80001e0 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ee0:	e058      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	4611      	mov	r1, r2
 8001eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001efc:	4642      	mov	r2, r8
 8001efe:	464b      	mov	r3, r9
 8001f00:	f04f 0000 	mov.w	r0, #0
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	0159      	lsls	r1, r3, #5
 8001f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0e:	0150      	lsls	r0, r2, #5
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4641      	mov	r1, r8
 8001f16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f34:	ebb2 040a 	subs.w	r4, r2, sl
 8001f38:	eb63 050b 	sbc.w	r5, r3, fp
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	00eb      	lsls	r3, r5, #3
 8001f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4a:	00e2      	lsls	r2, r4, #3
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	461d      	mov	r5, r3
 8001f50:	4643      	mov	r3, r8
 8001f52:	18e3      	adds	r3, r4, r3
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	464b      	mov	r3, r9
 8001f58:	eb45 0303 	adc.w	r3, r5, r3
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	028b      	lsls	r3, r1, #10
 8001f6e:	4621      	mov	r1, r4
 8001f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f74:	4621      	mov	r1, r4
 8001f76:	028a      	lsls	r2, r1, #10
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	61fa      	str	r2, [r7, #28]
 8001f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f88:	f7fe f92a 	bl	80001e0 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4613      	mov	r3, r2
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3750      	adds	r7, #80	; 0x50
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	007a1200 	.word	0x007a1200

08001fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	; (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	0800672c 	.word	0x0800672c

08002010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002014:	f7ff ffdc 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0b5b      	lsrs	r3, r3, #13
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4903      	ldr	r1, [pc, #12]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	0800672c 	.word	0x0800672c

08002038 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	220f      	movs	r2, #15
 8002046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_GetClockConfig+0x5c>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_RCC_GetClockConfig+0x5c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_RCC_GetClockConfig+0x5c>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_GetClockConfig+0x5c>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_RCC_GetClockConfig+0x60>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0207 	and.w	r2, r3, #7
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40023c00 	.word	0x40023c00

0800209c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e041      	b.n	8002132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fe74 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3304      	adds	r3, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f000 fe94 	bl	8002e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d001      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e044      	b.n	80021de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_TIM_Base_Start_IT+0xb0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d018      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217e:	d013      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00e      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x6c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x6c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_TIM_Base_Start_IT+0xc0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d111      	bne.n	80021cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d010      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ca:	e007      	b.n	80021dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40010000 	.word	0x40010000
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40000c00 	.word	0x40000c00
 80021fc:	40014000 	.word	0x40014000

08002200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e041      	b.n	8002296 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fe10 	bl	8000e4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f000 fde2 	bl	8002e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_TIM_PWM_Start+0x24>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e022      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d109      	bne.n	80022de <HAL_TIM_PWM_Start+0x3e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e015      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d109      	bne.n	80022f8 <HAL_TIM_PWM_Start+0x58>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e008      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e068      	b.n	80023e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <HAL_TIM_PWM_Start+0x82>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002320:	e013      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d104      	bne.n	8002332 <HAL_TIM_PWM_Start+0x92>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002330:	e00b      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d104      	bne.n	8002342 <HAL_TIM_PWM_Start+0xa2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	e003      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	6839      	ldr	r1, [r7, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f91c 	bl	8003590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a23      	ldr	r2, [pc, #140]	; (80023ec <HAL_TIM_PWM_Start+0x14c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d107      	bne.n	8002372 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_TIM_PWM_Start+0x14c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d018      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002384:	d013      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_TIM_PWM_Start+0x150>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00e      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_TIM_PWM_Start+0x154>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <HAL_TIM_PWM_Start+0x158>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <HAL_TIM_PWM_Start+0x15c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d111      	bne.n	80023d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b06      	cmp	r3, #6
 80023be:	d010      	beq.n	80023e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d0:	e007      	b.n	80023e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40014000 	.word	0x40014000

08002400 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e041      	b.n	8002496 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f839 	bl	800249e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 fce2 	bl	8002e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d104      	bne.n	80024d2 <HAL_TIM_IC_Start_IT+0x1e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	e013      	b.n	80024fa <HAL_TIM_IC_Start_IT+0x46>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d104      	bne.n	80024e2 <HAL_TIM_IC_Start_IT+0x2e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e00b      	b.n	80024fa <HAL_TIM_IC_Start_IT+0x46>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d104      	bne.n	80024f2 <HAL_TIM_IC_Start_IT+0x3e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	e003      	b.n	80024fa <HAL_TIM_IC_Start_IT+0x46>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <HAL_TIM_IC_Start_IT+0x58>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e013      	b.n	8002534 <HAL_TIM_IC_Start_IT+0x80>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d104      	bne.n	800251c <HAL_TIM_IC_Start_IT+0x68>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e00b      	b.n	8002534 <HAL_TIM_IC_Start_IT+0x80>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b08      	cmp	r3, #8
 8002520:	d104      	bne.n	800252c <HAL_TIM_IC_Start_IT+0x78>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e003      	b.n	8002534 <HAL_TIM_IC_Start_IT+0x80>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002532:	b2db      	uxtb	r3, r3
 8002534:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002536:	7bbb      	ldrb	r3, [r7, #14]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d102      	bne.n	8002542 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800253c:	7b7b      	ldrb	r3, [r7, #13]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0c2      	b.n	80026cc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <HAL_TIM_IC_Start_IT+0xa2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002554:	e013      	b.n	800257e <HAL_TIM_IC_Start_IT+0xca>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d104      	bne.n	8002566 <HAL_TIM_IC_Start_IT+0xb2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002564:	e00b      	b.n	800257e <HAL_TIM_IC_Start_IT+0xca>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d104      	bne.n	8002576 <HAL_TIM_IC_Start_IT+0xc2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002574:	e003      	b.n	800257e <HAL_TIM_IC_Start_IT+0xca>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <HAL_TIM_IC_Start_IT+0xda>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800258c:	e013      	b.n	80025b6 <HAL_TIM_IC_Start_IT+0x102>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d104      	bne.n	800259e <HAL_TIM_IC_Start_IT+0xea>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800259c:	e00b      	b.n	80025b6 <HAL_TIM_IC_Start_IT+0x102>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_IC_Start_IT+0xfa>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ac:	e003      	b.n	80025b6 <HAL_TIM_IC_Start_IT+0x102>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d841      	bhi.n	8002640 <HAL_TIM_IC_Start_IT+0x18c>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <HAL_TIM_IC_Start_IT+0x110>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025f9 	.word	0x080025f9
 80025c8:	08002641 	.word	0x08002641
 80025cc:	08002641 	.word	0x08002641
 80025d0:	08002641 	.word	0x08002641
 80025d4:	0800260b 	.word	0x0800260b
 80025d8:	08002641 	.word	0x08002641
 80025dc:	08002641 	.word	0x08002641
 80025e0:	08002641 	.word	0x08002641
 80025e4:	0800261d 	.word	0x0800261d
 80025e8:	08002641 	.word	0x08002641
 80025ec:	08002641 	.word	0x08002641
 80025f0:	08002641 	.word	0x08002641
 80025f4:	0800262f 	.word	0x0800262f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0202 	orr.w	r2, r2, #2
 8002606:	60da      	str	r2, [r3, #12]
      break;
 8002608:	e01d      	b.n	8002646 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0204 	orr.w	r2, r2, #4
 8002618:	60da      	str	r2, [r3, #12]
      break;
 800261a:	e014      	b.n	8002646 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0208 	orr.w	r2, r2, #8
 800262a:	60da      	str	r2, [r3, #12]
      break;
 800262c:	e00b      	b.n	8002646 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0210 	orr.w	r2, r2, #16
 800263c:	60da      	str	r2, [r3, #12]
      break;
 800263e:	e002      	b.n	8002646 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	bf00      	nop
  }

  if (status == HAL_OK)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d13e      	bne.n	80026ca <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2201      	movs	r2, #1
 8002652:	6839      	ldr	r1, [r7, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 ff9b 	bl	8003590 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_TIM_IC_Start_IT+0x220>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d018      	beq.n	8002696 <HAL_TIM_IC_Start_IT+0x1e2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d013      	beq.n	8002696 <HAL_TIM_IC_Start_IT+0x1e2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_TIM_IC_Start_IT+0x224>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00e      	beq.n	8002696 <HAL_TIM_IC_Start_IT+0x1e2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_TIM_IC_Start_IT+0x228>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d009      	beq.n	8002696 <HAL_TIM_IC_Start_IT+0x1e2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a16      	ldr	r2, [pc, #88]	; (80026e0 <HAL_TIM_IC_Start_IT+0x22c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_TIM_IC_Start_IT+0x1e2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <HAL_TIM_IC_Start_IT+0x230>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d010      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b8:	e007      	b.n	80026ca <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40000c00 	.word	0x40000c00
 80026e4:	40014000 	.word	0x40014000

080026e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d122      	bne.n	8002744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d11b      	bne.n	8002744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0202 	mvn.w	r2, #2
 8002714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe f962 	bl	80009f4 <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fb4a 	bl	8002dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fb51 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b04      	cmp	r3, #4
 8002750:	d122      	bne.n	8002798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0204 	mvn.w	r2, #4
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe f938 	bl	80009f4 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fb20 	bl	8002dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fb27 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0208 	mvn.w	r2, #8
 80027bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2204      	movs	r2, #4
 80027c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f90e 	bl	80009f4 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 faf6 	bl	8002dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fafd 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d122      	bne.n	8002840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b10      	cmp	r3, #16
 8002806:	d11b      	bne.n	8002840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0210 	mvn.w	r2, #16
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2208      	movs	r2, #8
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe f8e4 	bl	80009f4 <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 facc 	bl	8002dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fad3 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10e      	bne.n	800286c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0201 	mvn.w	r2, #1
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fa5e 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b80      	cmp	r3, #128	; 0x80
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d107      	bne.n	8002898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 ff1a 	bl	80036cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d107      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa98 	bl	8002df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d107      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0220 	mvn.w	r2, #32
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fee4 	bl	80036b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002912:	2302      	movs	r3, #2
 8002914:	e088      	b.n	8002a28 <HAL_TIM_IC_ConfigChannel+0x130>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f000 fc74 	bl	8003220 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 020c 	bic.w	r2, r2, #12
 8002946:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6999      	ldr	r1, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	619a      	str	r2, [r3, #24]
 800295a:	e060      	b.n	8002a1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d11c      	bne.n	800299c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f000 fcec 	bl	800334e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699a      	ldr	r2, [r3, #24]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002984:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6999      	ldr	r1, [r3, #24]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	021a      	lsls	r2, r3, #8
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	619a      	str	r2, [r3, #24]
 800299a:	e040      	b.n	8002a1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11b      	bne.n	80029da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f000 fd39 	bl	8003428 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 020c 	bic.w	r2, r2, #12
 80029c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69d9      	ldr	r1, [r3, #28]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	61da      	str	r2, [r3, #28]
 80029d8:	e021      	b.n	8002a1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0c      	cmp	r3, #12
 80029de:	d11c      	bne.n	8002a1a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f000 fd56 	bl	80034a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69d9      	ldr	r1, [r3, #28]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	021a      	lsls	r2, r3, #8
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	61da      	str	r2, [r3, #28]
 8002a18:	e001      	b.n	8002a1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e0ae      	b.n	8002bac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	f200 809f 	bhi.w	8002b9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a5e:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002a99 	.word	0x08002a99
 8002a68:	08002b9d 	.word	0x08002b9d
 8002a6c:	08002b9d 	.word	0x08002b9d
 8002a70:	08002b9d 	.word	0x08002b9d
 8002a74:	08002ad9 	.word	0x08002ad9
 8002a78:	08002b9d 	.word	0x08002b9d
 8002a7c:	08002b9d 	.word	0x08002b9d
 8002a80:	08002b9d 	.word	0x08002b9d
 8002a84:	08002b1b 	.word	0x08002b1b
 8002a88:	08002b9d 	.word	0x08002b9d
 8002a8c:	08002b9d 	.word	0x08002b9d
 8002a90:	08002b9d 	.word	0x08002b9d
 8002a94:	08002b5b 	.word	0x08002b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fa32 	bl	8002f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0208 	orr.w	r2, r2, #8
 8002ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0204 	bic.w	r2, r2, #4
 8002ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6999      	ldr	r1, [r3, #24]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	619a      	str	r2, [r3, #24]
      break;
 8002ad6:	e064      	b.n	8002ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fa78 	bl	8002fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6999      	ldr	r1, [r3, #24]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	021a      	lsls	r2, r3, #8
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	619a      	str	r2, [r3, #24]
      break;
 8002b18:	e043      	b.n	8002ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fac3 	bl	80030ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0208 	orr.w	r2, r2, #8
 8002b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0204 	bic.w	r2, r2, #4
 8002b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69d9      	ldr	r1, [r3, #28]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	61da      	str	r2, [r3, #28]
      break;
 8002b58:	e023      	b.n	8002ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fb0d 	bl	8003180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69d9      	ldr	r1, [r3, #28]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	61da      	str	r2, [r3, #28]
      break;
 8002b9a:	e002      	b.n	8002ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0b4      	b.n	8002d3a <HAL_TIM_ConfigClockSource+0x186>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c08:	d03e      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0xd4>
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0e:	f200 8087 	bhi.w	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	f000 8086 	beq.w	8002d26 <HAL_TIM_ConfigClockSource+0x172>
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	d87f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d01a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xa6>
 8002c24:	2b70      	cmp	r3, #112	; 0x70
 8002c26:	d87b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b60      	cmp	r3, #96	; 0x60
 8002c2a:	d050      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x11a>
 8002c2c:	2b60      	cmp	r3, #96	; 0x60
 8002c2e:	d877      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b50      	cmp	r3, #80	; 0x50
 8002c32:	d03c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xfa>
 8002c34:	2b50      	cmp	r3, #80	; 0x50
 8002c36:	d873      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d058      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x13a>
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d86f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b30      	cmp	r3, #48	; 0x30
 8002c42:	d064      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c44:	2b30      	cmp	r3, #48	; 0x30
 8002c46:	d86b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d060      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d867      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d05a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	e062      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f000 fc71 	bl	8003550 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
      break;
 8002c86:	e04f      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f000 fc5a 	bl	8003550 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e03c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 fb18 	bl	80032f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2150      	movs	r1, #80	; 0x50
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fc27 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e02c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 fb74 	bl	80033c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2160      	movs	r1, #96	; 0x60
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fc17 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8002cec:	e01c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 faf8 	bl	80032f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2140      	movs	r1, #64	; 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fc07 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e00c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 fbfe 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8002d1e:	e003      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e000      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d831      	bhi.n	8002dbc <HAL_TIM_ReadCapturedValue+0x78>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d95 	.word	0x08002d95
 8002d64:	08002dbd 	.word	0x08002dbd
 8002d68:	08002dbd 	.word	0x08002dbd
 8002d6c:	08002dbd 	.word	0x08002dbd
 8002d70:	08002d9f 	.word	0x08002d9f
 8002d74:	08002dbd 	.word	0x08002dbd
 8002d78:	08002dbd 	.word	0x08002dbd
 8002d7c:	08002dbd 	.word	0x08002dbd
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	08002dbd 	.word	0x08002dbd
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	08002dbd 	.word	0x08002dbd
 8002d90:	08002db3 	.word	0x08002db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	60fb      	str	r3, [r7, #12]

      break;
 8002d9c:	e00f      	b.n	8002dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	60fb      	str	r3, [r7, #12]

      break;
 8002da6:	e00a      	b.n	8002dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	60fb      	str	r3, [r7, #12]

      break;
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	60fb      	str	r3, [r7, #12]

      break;
 8002dba:	e000      	b.n	8002dbe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002dbc:	bf00      	nop
  }

  return tmpreg;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a34      	ldr	r2, [pc, #208]	; (8002eec <TIM_Base_SetConfig+0xe4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00f      	beq.n	8002e40 <TIM_Base_SetConfig+0x38>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e26:	d00b      	beq.n	8002e40 <TIM_Base_SetConfig+0x38>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a31      	ldr	r2, [pc, #196]	; (8002ef0 <TIM_Base_SetConfig+0xe8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_Base_SetConfig+0x38>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <TIM_Base_SetConfig+0xec>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_Base_SetConfig+0x38>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a2f      	ldr	r2, [pc, #188]	; (8002ef8 <TIM_Base_SetConfig+0xf0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d108      	bne.n	8002e52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_Base_SetConfig+0xe4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01b      	beq.n	8002e92 <TIM_Base_SetConfig+0x8a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d017      	beq.n	8002e92 <TIM_Base_SetConfig+0x8a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <TIM_Base_SetConfig+0xe8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <TIM_Base_SetConfig+0x8a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a21      	ldr	r2, [pc, #132]	; (8002ef4 <TIM_Base_SetConfig+0xec>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00f      	beq.n	8002e92 <TIM_Base_SetConfig+0x8a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <TIM_Base_SetConfig+0xf0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <TIM_Base_SetConfig+0x8a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <TIM_Base_SetConfig+0xf4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <TIM_Base_SetConfig+0x8a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <TIM_Base_SetConfig+0xf8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d003      	beq.n	8002e92 <TIM_Base_SetConfig+0x8a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <TIM_Base_SetConfig+0xfc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a08      	ldr	r2, [pc, #32]	; (8002eec <TIM_Base_SetConfig+0xe4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d103      	bne.n	8002ed8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	615a      	str	r2, [r3, #20]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800

08002f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0201 	bic.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 0302 	bic.w	r3, r3, #2
 8002f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <TIM_OC1_SetConfig+0xc8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10c      	bne.n	8002f7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0308 	bic.w	r3, r3, #8
 8002f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <TIM_OC1_SetConfig+0xc8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d111      	bne.n	8002faa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	621a      	str	r2, [r3, #32]
}
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40010000 	.word	0x40010000

08002fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f023 0210 	bic.w	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0320 	bic.w	r3, r3, #32
 800301e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <TIM_OC2_SetConfig+0xd4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10d      	bne.n	8003050 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800303a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800304e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <TIM_OC2_SetConfig+0xd4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d113      	bne.n	8003080 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800305e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000

080030ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1d      	ldr	r2, [pc, #116]	; (800317c <TIM_OC3_SetConfig+0xd0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10d      	bne.n	8003126 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <TIM_OC3_SetConfig+0xd0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d113      	bne.n	8003156 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800313c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40010000 	.word	0x40010000

08003180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	031b      	lsls	r3, r3, #12
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <TIM_OC4_SetConfig+0x9c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d109      	bne.n	80031f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	019b      	lsls	r3, r3, #6
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40010000 	.word	0x40010000

08003220 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0201 	bic.w	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a24      	ldr	r2, [pc, #144]	; (80032dc <TIM_TI1_SetConfig+0xbc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <TIM_TI1_SetConfig+0x56>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003254:	d00f      	beq.n	8003276 <TIM_TI1_SetConfig+0x56>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <TIM_TI1_SetConfig+0xc0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00b      	beq.n	8003276 <TIM_TI1_SetConfig+0x56>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <TIM_TI1_SetConfig+0xc4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <TIM_TI1_SetConfig+0x56>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <TIM_TI1_SetConfig+0xc8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_TI1_SetConfig+0x56>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <TIM_TI1_SetConfig+0xcc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <TIM_TI1_SetConfig+0x5a>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <TIM_TI1_SetConfig+0x5c>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e003      	b.n	800329a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f023 030a 	bic.w	r3, r3, #10
 80032b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 030a 	and.w	r3, r3, #10
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40014000 	.word	0x40014000

080032f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800331a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 030a 	bic.w	r3, r3, #10
 800332c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800334e:	b480      	push	{r7}
 8003350:	b087      	sub	sp, #28
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 0210 	bic.w	r2, r3, #16
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800338c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	031b      	lsls	r3, r3, #12
 8003392:	b29b      	uxth	r3, r3
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 0210 	bic.w	r2, r3, #16
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	031b      	lsls	r3, r3, #12
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003404:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	621a      	str	r2, [r3, #32]
}
 800341c:	bf00      	nop
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 0303 	bic.w	r3, r3, #3
 8003454:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003464:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	b2db      	uxtb	r3, r3
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003478:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	031b      	lsls	r3, r3, #12
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80034f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	031b      	lsls	r3, r3, #12
 80034f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	f043 0307 	orr.w	r3, r3, #7
 800353c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800356a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	021a      	lsls	r2, r3, #8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	431a      	orrs	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2201      	movs	r2, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1a      	ldr	r2, [r3, #32]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	401a      	ands	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e050      	b.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003640:	d013      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10c      	bne.n	8003684 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4313      	orrs	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40014000 	.word	0x40014000

080036b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e03f      	b.n	8003772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fbfc 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	; 0x24
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f829 	bl	800377c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800377c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003780:	b0c0      	sub	sp, #256	; 0x100
 8003782:	af00      	add	r7, sp, #0
 8003784:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	68d9      	ldr	r1, [r3, #12]
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	ea40 0301 	orr.w	r3, r0, r1
 80037a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037d4:	f021 010c 	bic.w	r1, r1, #12
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037e2:	430b      	orrs	r3, r1
 80037e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f6:	6999      	ldr	r1, [r3, #24]
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	ea40 0301 	orr.w	r3, r0, r1
 8003802:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <UART_SetConfig+0x2cc>)
 800380c:	429a      	cmp	r2, r3
 800380e:	d005      	beq.n	800381c <UART_SetConfig+0xa0>
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <UART_SetConfig+0x2d0>)
 8003818:	429a      	cmp	r2, r3
 800381a:	d104      	bne.n	8003826 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800381c:	f7fe fbf8 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8003820:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003824:	e003      	b.n	800382e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003826:	f7fe fbdf 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 800382a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003838:	f040 810c 	bne.w	8003a54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800383c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003840:	2200      	movs	r2, #0
 8003842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003846:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800384a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800384e:	4622      	mov	r2, r4
 8003850:	462b      	mov	r3, r5
 8003852:	1891      	adds	r1, r2, r2
 8003854:	65b9      	str	r1, [r7, #88]	; 0x58
 8003856:	415b      	adcs	r3, r3
 8003858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800385a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800385e:	4621      	mov	r1, r4
 8003860:	eb12 0801 	adds.w	r8, r2, r1
 8003864:	4629      	mov	r1, r5
 8003866:	eb43 0901 	adc.w	r9, r3, r1
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800387a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800387e:	4690      	mov	r8, r2
 8003880:	4699      	mov	r9, r3
 8003882:	4623      	mov	r3, r4
 8003884:	eb18 0303 	adds.w	r3, r8, r3
 8003888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800388c:	462b      	mov	r3, r5
 800388e:	eb49 0303 	adc.w	r3, r9, r3
 8003892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038aa:	460b      	mov	r3, r1
 80038ac:	18db      	adds	r3, r3, r3
 80038ae:	653b      	str	r3, [r7, #80]	; 0x50
 80038b0:	4613      	mov	r3, r2
 80038b2:	eb42 0303 	adc.w	r3, r2, r3
 80038b6:	657b      	str	r3, [r7, #84]	; 0x54
 80038b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038c0:	f7fc fc8e 	bl	80001e0 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4b61      	ldr	r3, [pc, #388]	; (8003a50 <UART_SetConfig+0x2d4>)
 80038ca:	fba3 2302 	umull	r2, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	011c      	lsls	r4, r3, #4
 80038d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	1891      	adds	r1, r2, r2
 80038ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80038ec:	415b      	adcs	r3, r3
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038f4:	4641      	mov	r1, r8
 80038f6:	eb12 0a01 	adds.w	sl, r2, r1
 80038fa:	4649      	mov	r1, r9
 80038fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800390c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003914:	4692      	mov	sl, r2
 8003916:	469b      	mov	fp, r3
 8003918:	4643      	mov	r3, r8
 800391a:	eb1a 0303 	adds.w	r3, sl, r3
 800391e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003922:	464b      	mov	r3, r9
 8003924:	eb4b 0303 	adc.w	r3, fp, r3
 8003928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003938:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800393c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003940:	460b      	mov	r3, r1
 8003942:	18db      	adds	r3, r3, r3
 8003944:	643b      	str	r3, [r7, #64]	; 0x40
 8003946:	4613      	mov	r3, r2
 8003948:	eb42 0303 	adc.w	r3, r2, r3
 800394c:	647b      	str	r3, [r7, #68]	; 0x44
 800394e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003956:	f7fc fc43 	bl	80001e0 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4611      	mov	r1, r2
 8003960:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003962:	fba3 2301 	umull	r2, r3, r3, r1
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2264      	movs	r2, #100	; 0x64
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	1acb      	subs	r3, r1, r3
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003976:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003978:	fba3 2302 	umull	r2, r3, r3, r2
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003984:	441c      	add	r4, r3
 8003986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398a:	2200      	movs	r2, #0
 800398c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003990:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003994:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	1891      	adds	r1, r2, r2
 800399e:	63b9      	str	r1, [r7, #56]	; 0x38
 80039a0:	415b      	adcs	r3, r3
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039a8:	4641      	mov	r1, r8
 80039aa:	1851      	adds	r1, r2, r1
 80039ac:	6339      	str	r1, [r7, #48]	; 0x30
 80039ae:	4649      	mov	r1, r9
 80039b0:	414b      	adcs	r3, r1
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039c0:	4659      	mov	r1, fp
 80039c2:	00cb      	lsls	r3, r1, #3
 80039c4:	4651      	mov	r1, sl
 80039c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ca:	4651      	mov	r1, sl
 80039cc:	00ca      	lsls	r2, r1, #3
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	4642      	mov	r2, r8
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039dc:	464b      	mov	r3, r9
 80039de:	460a      	mov	r2, r1
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039fc:	460b      	mov	r3, r1
 80039fe:	18db      	adds	r3, r3, r3
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a02:	4613      	mov	r3, r2
 8003a04:	eb42 0303 	adc.w	r3, r2, r3
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a12:	f7fc fbe5 	bl	80001e0 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	2164      	movs	r1, #100	; 0x64
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	3332      	adds	r3, #50	; 0x32
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	f003 0207 	and.w	r2, r3, #7
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4422      	add	r2, r4
 8003a42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a44:	e105      	b.n	8003c52 <UART_SetConfig+0x4d6>
 8003a46:	bf00      	nop
 8003a48:	40011000 	.word	0x40011000
 8003a4c:	40011400 	.word	0x40011400
 8003a50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a66:	4642      	mov	r2, r8
 8003a68:	464b      	mov	r3, r9
 8003a6a:	1891      	adds	r1, r2, r2
 8003a6c:	6239      	str	r1, [r7, #32]
 8003a6e:	415b      	adcs	r3, r3
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a76:	4641      	mov	r1, r8
 8003a78:	1854      	adds	r4, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb43 0501 	adc.w	r5, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	00eb      	lsls	r3, r5, #3
 8003a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a8e:	00e2      	lsls	r2, r4, #3
 8003a90:	4614      	mov	r4, r2
 8003a92:	461d      	mov	r5, r3
 8003a94:	4643      	mov	r3, r8
 8003a96:	18e3      	adds	r3, r4, r3
 8003a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	eb45 0303 	adc.w	r3, r5, r3
 8003aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	008b      	lsls	r3, r1, #2
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003acc:	4621      	mov	r1, r4
 8003ace:	008a      	lsls	r2, r1, #2
 8003ad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ad4:	f7fc fb84 	bl	80001e0 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4b60      	ldr	r3, [pc, #384]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003ade:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	011c      	lsls	r4, r3, #4
 8003ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003af4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003af8:	4642      	mov	r2, r8
 8003afa:	464b      	mov	r3, r9
 8003afc:	1891      	adds	r1, r2, r2
 8003afe:	61b9      	str	r1, [r7, #24]
 8003b00:	415b      	adcs	r3, r3
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b08:	4641      	mov	r1, r8
 8003b0a:	1851      	adds	r1, r2, r1
 8003b0c:	6139      	str	r1, [r7, #16]
 8003b0e:	4649      	mov	r1, r9
 8003b10:	414b      	adcs	r3, r1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b20:	4659      	mov	r1, fp
 8003b22:	00cb      	lsls	r3, r1, #3
 8003b24:	4651      	mov	r1, sl
 8003b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2a:	4651      	mov	r1, sl
 8003b2c:	00ca      	lsls	r2, r1, #3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	4642      	mov	r2, r8
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	460a      	mov	r2, r1
 8003b40:	eb42 0303 	adc.w	r3, r2, r3
 8003b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b60:	4649      	mov	r1, r9
 8003b62:	008b      	lsls	r3, r1, #2
 8003b64:	4641      	mov	r1, r8
 8003b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	008a      	lsls	r2, r1, #2
 8003b6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b72:	f7fc fb35 	bl	80001e0 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9a:	441c      	add	r4, r3
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ba4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ba6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003baa:	4642      	mov	r2, r8
 8003bac:	464b      	mov	r3, r9
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1851      	adds	r1, r2, r1
 8003bbe:	6039      	str	r1, [r7, #0]
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	414b      	adcs	r3, r1
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bd2:	4659      	mov	r1, fp
 8003bd4:	00cb      	lsls	r3, r1, #3
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bdc:	4651      	mov	r1, sl
 8003bde:	00ca      	lsls	r2, r1, #3
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	4642      	mov	r2, r8
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bec:	464b      	mov	r3, r9
 8003bee:	460a      	mov	r2, r1
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8003c00:	667a      	str	r2, [r7, #100]	; 0x64
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c0e:	4649      	mov	r1, r9
 8003c10:	008b      	lsls	r3, r1, #2
 8003c12:	4641      	mov	r1, r8
 8003c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c18:	4641      	mov	r1, r8
 8003c1a:	008a      	lsls	r2, r1, #2
 8003c1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c20:	f7fc fade 	bl	80001e0 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2164      	movs	r1, #100	; 0x64
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	3332      	adds	r3, #50	; 0x32
 8003c3c:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4422      	add	r2, r4
 8003c50:	609a      	str	r2, [r3, #8]
}
 8003c52:	bf00      	nop
 8003c54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	51eb851f 	.word	0x51eb851f

08003c64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c76:	2b84      	cmp	r3, #132	; 0x84
 8003c78:	d005      	beq.n	8003c86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	3303      	adds	r3, #3
 8003c84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c98:	f000 ff3e 	bl	8004b18 <vTaskStartScheduler>
  
  return osOK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca4:	b089      	sub	sp, #36	; 0x24
 8003ca6:	af04      	add	r7, sp, #16
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <osThreadCreate+0x54>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01c      	beq.n	8003cf6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685c      	ldr	r4, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681d      	ldr	r5, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691e      	ldr	r6, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ffc8 	bl	8003c64 <makeFreeRtosPriority>
 8003cd4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	9100      	str	r1, [sp, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4632      	mov	r2, r6
 8003ce8:	4629      	mov	r1, r5
 8003cea:	4620      	mov	r0, r4
 8003cec:	f000 fd36 	bl	800475c <xTaskCreateStatic>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e01c      	b.n	8003d30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685c      	ldr	r4, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d02:	b29e      	uxth	r6, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ffaa 	bl	8003c64 <makeFreeRtosPriority>
 8003d10:	4602      	mov	r2, r0
 8003d12:	f107 030c 	add.w	r3, r7, #12
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	9200      	str	r2, [sp, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4632      	mov	r2, r6
 8003d1e:	4629      	mov	r1, r5
 8003d20:	4620      	mov	r0, r4
 8003d22:	f000 fd78 	bl	8004816 <xTaskCreate>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d001      	beq.n	8003d30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f103 0208 	add.w	r2, r3, #8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f103 0208 	add.w	r2, r3, #8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f103 0208 	add.w	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	601a      	str	r2, [r3, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d103      	bne.n	8003dfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e00c      	b.n	8003e16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e002      	b.n	8003e0a <vListInsert+0x2e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d2f6      	bcs.n	8003e04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d103      	bne.n	8003e82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ece:	f001 fd89 	bl	80059e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	441a      	add	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	3b01      	subs	r3, #1
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	441a      	add	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	22ff      	movs	r2, #255	; 0xff
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d114      	bne.n	8003f4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01a      	beq.n	8003f62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3310      	adds	r3, #16
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 f843 	bl	8004fbc <xTaskRemoveFromEventList>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d012      	beq.n	8003f62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <xQueueGenericReset+0xcc>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e009      	b.n	8003f62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3310      	adds	r3, #16
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fef1 	bl	8003d3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff feec 	bl	8003d3a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f62:	f001 fd6f 	bl	8005a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f66:	2301      	movs	r3, #1
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	613b      	str	r3, [r7, #16]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3348      	adds	r3, #72	; 0x48
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fe3b 	bl	8005c28 <pvPortMalloc>
 8003fb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d011      	beq.n	8003fde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3348      	adds	r3, #72	; 0x48
 8003fc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fcc:	79fa      	ldrb	r2, [r7, #7]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f805 	bl	8003fe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fde:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d103      	bne.n	8004004 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e002      	b.n	800400a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004016:	2101      	movs	r1, #1
 8004018:	69b8      	ldr	r0, [r7, #24]
 800401a:	f7ff ff43 	bl	8003ea4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	; 0x38
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xQueueGenericSend+0x32>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <xQueueGenericSend+0x40>
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <xQueueGenericSend+0x44>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <xQueueGenericSend+0x46>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <xQueueGenericSend+0x60>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x6e>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <xQueueGenericSend+0x72>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSend+0x74>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	623b      	str	r3, [r7, #32]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040b6:	f001 f943 	bl	8005340 <xTaskGetSchedulerState>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <xQueueGenericSend+0x9e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <xQueueGenericSend+0xa2>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <xQueueGenericSend+0xa4>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	61fb      	str	r3, [r7, #28]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040e6:	f001 fc7d 	bl	80059e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <xQueueGenericSend+0xd4>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d129      	bne.n	8004150 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004102:	f000 fa41 	bl	8004588 <prvCopyDataToQueue>
 8004106:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d010      	beq.n	8004132 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f000 ff51 	bl	8004fbc <xTaskRemoveFromEventList>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <xQueueGenericSend+0x1f8>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	e00a      	b.n	8004148 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004138:	4b39      	ldr	r3, [pc, #228]	; (8004220 <xQueueGenericSend+0x1f8>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004148:	f001 fc7c 	bl	8005a44 <vPortExitCritical>
				return pdPASS;
 800414c:	2301      	movs	r3, #1
 800414e:	e063      	b.n	8004218 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004156:	f001 fc75 	bl	8005a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800415a:	2300      	movs	r3, #0
 800415c:	e05c      	b.n	8004218 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4618      	mov	r0, r3
 800416a:	f000 ff89 	bl	8005080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800416e:	2301      	movs	r3, #1
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004172:	f001 fc67 	bl	8005a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004176:	f000 fd39 	bl	8004bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800417a:	f001 fc33 	bl	80059e4 <vPortEnterCritical>
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004184:	b25b      	sxtb	r3, r3
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d103      	bne.n	8004194 <xQueueGenericSend+0x16c>
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419a:	b25b      	sxtb	r3, r3
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d103      	bne.n	80041aa <xQueueGenericSend+0x182>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041aa:	f001 fc4b 	bl	8005a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ae:	1d3a      	adds	r2, r7, #4
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 ff78 	bl	80050ac <xTaskCheckForTimeOut>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d124      	bne.n	800420c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c4:	f000 fab2 	bl	800472c <prvIsQueueFull>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	3310      	adds	r3, #16
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fecc 	bl	8004f74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041de:	f000 fa3d 	bl	800465c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041e2:	f000 fd11 	bl	8004c08 <xTaskResumeAll>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f47f af7c 	bne.w	80040e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <xQueueGenericSend+0x1f8>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	e772      	b.n	80040e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004202:	f000 fa2b 	bl	800465c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004206:	f000 fcff 	bl	8004c08 <xTaskResumeAll>
 800420a:	e76c      	b.n	80040e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f000 fa25 	bl	800465c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004212:	f000 fcf9 	bl	8004c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004216:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004218:	4618      	mov	r0, r3
 800421a:	3738      	adds	r7, #56	; 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	623b      	str	r3, [r7, #32]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <xQueueGiveFromISR+0x48>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	61fb      	str	r3, [r7, #28]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <xQueueGiveFromISR+0x58>
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <xQueueGiveFromISR+0x5c>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <xQueueGiveFromISR+0x5e>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	61bb      	str	r3, [r7, #24]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800429c:	f001 fc84 	bl	8005ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042a0:	f3ef 8211 	mrs	r2, BASEPRI
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	617a      	str	r2, [r7, #20]
 80042b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d22b      	bcs.n	8004324 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d112      	bne.n	800430e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d016      	beq.n	800431e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	3324      	adds	r3, #36	; 0x24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fe61 	bl	8004fbc <xTaskRemoveFromEventList>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00e      	beq.n	800431e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e007      	b.n	800431e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800430e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004312:	3301      	adds	r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	b25a      	sxtb	r2, r3
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800431e:	2301      	movs	r3, #1
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
 8004322:	e001      	b.n	8004328 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004324:	2300      	movs	r3, #0
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004332:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004336:	4618      	mov	r0, r3
 8004338:	3738      	adds	r7, #56	; 0x38
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800434a:	2300      	movs	r3, #0
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	623b      	str	r3, [r7, #32]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61fb      	str	r3, [r7, #28]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004390:	f000 ffd6 	bl	8005340 <xTaskGetSchedulerState>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <xQueueSemaphoreTake+0x60>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <xQueueSemaphoreTake+0x64>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <xQueueSemaphoreTake+0x66>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61bb      	str	r3, [r7, #24]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043c0:	f001 fb10 	bl	80059e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d024      	beq.n	800441a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	1e5a      	subs	r2, r3, #1
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80043e0:	f001 f956 	bl	8005690 <pvTaskIncrementMutexHeldCount>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00f      	beq.n	8004412 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	3310      	adds	r3, #16
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fde0 	bl	8004fbc <xTaskRemoveFromEventList>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004402:	4b54      	ldr	r3, [pc, #336]	; (8004554 <xQueueSemaphoreTake+0x214>)
 8004404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004412:	f001 fb17 	bl	8005a44 <vPortExitCritical>
				return pdPASS;
 8004416:	2301      	movs	r3, #1
 8004418:	e097      	b.n	800454a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d111      	bne.n	8004444 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	617b      	str	r3, [r7, #20]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800443c:	f001 fb02 	bl	8005a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004440:	2300      	movs	r3, #0
 8004442:	e082      	b.n	800454a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800444a:	f107 030c 	add.w	r3, r7, #12
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fe16 	bl	8005080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004454:	2301      	movs	r3, #1
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004458:	f001 faf4 	bl	8005a44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800445c:	f000 fbc6 	bl	8004bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004460:	f001 fac0 	bl	80059e4 <vPortEnterCritical>
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800446a:	b25b      	sxtb	r3, r3
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d103      	bne.n	800447a <xQueueSemaphoreTake+0x13a>
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004480:	b25b      	sxtb	r3, r3
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d103      	bne.n	8004490 <xQueueSemaphoreTake+0x150>
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004490:	f001 fad8 	bl	8005a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004494:	463a      	mov	r2, r7
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fe05 	bl	80050ac <xTaskCheckForTimeOut>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d132      	bne.n	800450e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044aa:	f000 f929 	bl	8004700 <prvIsQueueEmpty>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d026      	beq.n	8004502 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80044bc:	f001 fa92 	bl	80059e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 ff59 	bl	800537c <xTaskPriorityInherit>
 80044ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80044cc:	f001 faba 	bl	8005a44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	3324      	adds	r3, #36	; 0x24
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fd4b 	bl	8004f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044e0:	f000 f8bc 	bl	800465c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044e4:	f000 fb90 	bl	8004c08 <xTaskResumeAll>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f47f af68 	bne.w	80043c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <xQueueSemaphoreTake+0x214>)
 80044f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	e75e      	b.n	80043c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004504:	f000 f8aa 	bl	800465c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004508:	f000 fb7e 	bl	8004c08 <xTaskResumeAll>
 800450c:	e758      	b.n	80043c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800450e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004510:	f000 f8a4 	bl	800465c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004514:	f000 fb78 	bl	8004c08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800451a:	f000 f8f1 	bl	8004700 <prvIsQueueEmpty>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f43f af4d 	beq.w	80043c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800452c:	f001 fa5a 	bl	80059e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004532:	f000 f811 	bl	8004558 <prvGetDisinheritPriorityAfterTimeout>
 8004536:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800453e:	4618      	mov	r0, r3
 8004540:	f001 f818 	bl	8005574 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004544:	f001 fa7e 	bl	8005a44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800454a:	4618      	mov	r0, r3
 800454c:	3738      	adds	r7, #56	; 0x38
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f1c3 0307 	rsb	r3, r3, #7
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e001      	b.n	800457a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800457a:	68fb      	ldr	r3, [r7, #12]
	}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10d      	bne.n	80045c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d14d      	bne.n	800464a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 ff58 	bl	8005468 <xTaskPriorityDisinherit>
 80045b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	e043      	b.n	800464a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d119      	bne.n	80045fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6858      	ldr	r0, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	461a      	mov	r2, r3
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	f001 ff9c 	bl	8006510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	441a      	add	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d32b      	bcc.n	800464a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	e026      	b.n	800464a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68d8      	ldr	r0, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	461a      	mov	r2, r3
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	f001 ff82 	bl	8006510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	425b      	negs	r3, r3
 8004616:	441a      	add	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d207      	bcs.n	8004638 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	425b      	negs	r3, r3
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d105      	bne.n	800464a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	3b01      	subs	r3, #1
 8004648:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004652:	697b      	ldr	r3, [r7, #20]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004664:	f001 f9be 	bl	80059e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800466e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004670:	e011      	b.n	8004696 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b00      	cmp	r3, #0
 8004678:	d012      	beq.n	80046a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3324      	adds	r3, #36	; 0x24
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fc9c 	bl	8004fbc <xTaskRemoveFromEventList>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800468a:	f000 fd71 	bl	8005170 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	3b01      	subs	r3, #1
 8004692:	b2db      	uxtb	r3, r3
 8004694:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	dce9      	bgt.n	8004672 <prvUnlockQueue+0x16>
 800469e:	e000      	b.n	80046a2 <prvUnlockQueue+0x46>
					break;
 80046a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046aa:	f001 f9cb 	bl	8005a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046ae:	f001 f999 	bl	80059e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046ba:	e011      	b.n	80046e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d012      	beq.n	80046ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3310      	adds	r3, #16
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fc77 	bl	8004fbc <xTaskRemoveFromEventList>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046d4:	f000 fd4c 	bl	8005170 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046d8:	7bbb      	ldrb	r3, [r7, #14]
 80046da:	3b01      	subs	r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dce9      	bgt.n	80046bc <prvUnlockQueue+0x60>
 80046e8:	e000      	b.n	80046ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	22ff      	movs	r2, #255	; 0xff
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046f4:	f001 f9a6 	bl	8005a44 <vPortExitCritical>
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004708:	f001 f96c 	bl	80059e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e001      	b.n	800471e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800471e:	f001 f991 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 8004722:	68fb      	ldr	r3, [r7, #12]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004734:	f001 f956 	bl	80059e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	429a      	cmp	r2, r3
 8004742:	d102      	bne.n	800474a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e001      	b.n	800474e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800474e:	f001 f979 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08e      	sub	sp, #56	; 0x38
 8004760:	af04      	add	r7, sp, #16
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	623b      	str	r3, [r7, #32]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	61fb      	str	r3, [r7, #28]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047a2:	23b4      	movs	r3, #180	; 0xb4
 80047a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2bb4      	cmp	r3, #180	; 0xb4
 80047aa:	d00a      	beq.n	80047c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	61bb      	str	r3, [r7, #24]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01e      	beq.n	8004808 <xTaskCreateStatic+0xac>
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01b      	beq.n	8004808 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047e2:	2300      	movs	r3, #0
 80047e4:	9303      	str	r3, [sp, #12]
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	9302      	str	r3, [sp, #8]
 80047ea:	f107 0314 	add.w	r3, r7, #20
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f850 	bl	80048a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004802:	f000 f8eb 	bl	80049dc <prvAddNewTaskToReadyList>
 8004806:	e001      	b.n	800480c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800480c:	697b      	ldr	r3, [r7, #20]
	}
 800480e:	4618      	mov	r0, r3
 8004810:	3728      	adds	r7, #40	; 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004816:	b580      	push	{r7, lr}
 8004818:	b08c      	sub	sp, #48	; 0x30
 800481a:	af04      	add	r7, sp, #16
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f001 f9fc 	bl	8005c28 <pvPortMalloc>
 8004830:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00e      	beq.n	8004856 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004838:	20b4      	movs	r0, #180	; 0xb4
 800483a:	f001 f9f5 	bl	8005c28 <pvPortMalloc>
 800483e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
 800484c:	e005      	b.n	800485a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800484e:	6978      	ldr	r0, [r7, #20]
 8004850:	f001 fab6 	bl	8005dc0 <vPortFree>
 8004854:	e001      	b.n	800485a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d017      	beq.n	8004890 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	2300      	movs	r3, #0
 800486c:	9303      	str	r3, [sp, #12]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	9302      	str	r3, [sp, #8]
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f80e 	bl	80048a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004884:	69f8      	ldr	r0, [r7, #28]
 8004886:	f000 f8a9 	bl	80049dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800488a:	2301      	movs	r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e002      	b.n	8004896 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004890:	f04f 33ff 	mov.w	r3, #4294967295
 8004894:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004896:	69bb      	ldr	r3, [r7, #24]
	}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048b8:	3b01      	subs	r3, #1
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f023 0307 	bic.w	r3, r3, #7
 80048c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	617b      	str	r3, [r7, #20]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01f      	beq.n	800492e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e012      	b.n	800491a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	7819      	ldrb	r1, [r3, #0]
 80048fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	3334      	adds	r3, #52	; 0x34
 8004904:	460a      	mov	r2, r1
 8004906:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d006      	beq.n	8004922 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	3301      	adds	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2b0f      	cmp	r3, #15
 800491e:	d9e9      	bls.n	80048f4 <prvInitialiseNewTask+0x54>
 8004920:	e000      	b.n	8004924 <prvInitialiseNewTask+0x84>
			{
				break;
 8004922:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800492c:	e003      	b.n	8004936 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	2b06      	cmp	r3, #6
 800493a:	d901      	bls.n	8004940 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800493c:	2306      	movs	r3, #6
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004944:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	2200      	movs	r2, #0
 8004950:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	3304      	adds	r3, #4
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fa0f 	bl	8003d7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	3318      	adds	r3, #24
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fa0a 	bl	8003d7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	f1c3 0207 	rsb	r2, r3, #7
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	2200      	movs	r2, #0
 8004980:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	2200      	movs	r2, #0
 8004988:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	334c      	adds	r3, #76	; 0x4c
 8004990:	2260      	movs	r2, #96	; 0x60
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fdc9 	bl	800652c <memset>
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <prvInitialiseNewTask+0x130>)
 800499e:	651a      	str	r2, [r3, #80]	; 0x50
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <prvInitialiseNewTask+0x134>)
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	4a0b      	ldr	r2, [pc, #44]	; (80049d8 <prvInitialiseNewTask+0x138>)
 80049aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	69b8      	ldr	r0, [r7, #24]
 80049b2:	f000 fee7 	bl	8005784 <pxPortInitialiseStack>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049c8:	bf00      	nop
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08006754 	.word	0x08006754
 80049d4:	08006774 	.word	0x08006774
 80049d8:	08006734 	.word	0x08006734

080049dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049e4:	f000 fffe 	bl	80059e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049e8:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <prvAddNewTaskToReadyList+0xb8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <prvAddNewTaskToReadyList+0xb8>)
 80049f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049f2:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <prvAddNewTaskToReadyList+0xbc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049fa:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <prvAddNewTaskToReadyList+0xbc>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <prvAddNewTaskToReadyList+0xb8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d110      	bne.n	8004a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a08:	f000 fbd8 	bl	80051bc <prvInitialiseTaskLists>
 8004a0c:	e00d      	b.n	8004a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a0e:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <prvAddNewTaskToReadyList+0xc0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <prvAddNewTaskToReadyList+0xbc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d802      	bhi.n	8004a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a24:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <prvAddNewTaskToReadyList+0xbc>)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <prvAddNewTaskToReadyList+0xc4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a1b      	ldr	r2, [pc, #108]	; (8004aa0 <prvAddNewTaskToReadyList+0xc4>)
 8004a32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	2201      	movs	r2, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <prvAddNewTaskToReadyList+0xc8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	4a18      	ldr	r2, [pc, #96]	; (8004aa4 <prvAddNewTaskToReadyList+0xc8>)
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <prvAddNewTaskToReadyList+0xcc>)
 8004a54:	441a      	add	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7ff f999 	bl	8003d94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a62:	f000 ffef 	bl	8005a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <prvAddNewTaskToReadyList+0xc0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00e      	beq.n	8004a8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <prvAddNewTaskToReadyList+0xbc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d207      	bcs.n	8004a8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <prvAddNewTaskToReadyList+0xd0>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	200005bc 	.word	0x200005bc
 8004a98:	200004bc 	.word	0x200004bc
 8004a9c:	200005c8 	.word	0x200005c8
 8004aa0:	200005d8 	.word	0x200005d8
 8004aa4:	200005c4 	.word	0x200005c4
 8004aa8:	200004c0 	.word	0x200004c0
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d017      	beq.n	8004af2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <vTaskDelay+0x60>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <vTaskDelay+0x30>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	60bb      	str	r3, [r7, #8]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ae0:	f000 f884 	bl	8004bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fde6 	bl	80056b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004aec:	f000 f88c 	bl	8004c08 <xTaskResumeAll>
 8004af0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d107      	bne.n	8004b08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <vTaskDelay+0x64>)
 8004afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	200005e4 	.word	0x200005e4
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b26:	463a      	mov	r2, r7
 8004b28:	1d39      	adds	r1, r7, #4
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fb fce0 	bl	80004f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	9202      	str	r2, [sp, #8]
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	2300      	movs	r3, #0
 8004b44:	460a      	mov	r2, r1
 8004b46:	4921      	ldr	r1, [pc, #132]	; (8004bcc <vTaskStartScheduler+0xb4>)
 8004b48:	4821      	ldr	r0, [pc, #132]	; (8004bd0 <vTaskStartScheduler+0xb8>)
 8004b4a:	f7ff fe07 	bl	800475c <xTaskCreateStatic>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <vTaskStartScheduler+0xbc>)
 8004b52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b54:	4b1f      	ldr	r3, [pc, #124]	; (8004bd4 <vTaskStartScheduler+0xbc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e001      	b.n	8004b66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d11b      	bne.n	8004ba4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	613b      	str	r3, [r7, #16]
}
 8004b7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <vTaskStartScheduler+0xc0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	334c      	adds	r3, #76	; 0x4c
 8004b86:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <vTaskStartScheduler+0xc4>)
 8004b88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <vTaskStartScheduler+0xc8>)
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <vTaskStartScheduler+0xcc>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <vTaskStartScheduler+0xd0>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b9e:	f000 fe7f 	bl	80058a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ba2:	e00e      	b.n	8004bc2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d10a      	bne.n	8004bc2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60fb      	str	r3, [r7, #12]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <vTaskStartScheduler+0xa8>
}
 8004bc2:	bf00      	nop
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	08006714 	.word	0x08006714
 8004bd0:	08005189 	.word	0x08005189
 8004bd4:	200005e0 	.word	0x200005e0
 8004bd8:	200004bc 	.word	0x200004bc
 8004bdc:	20000010 	.word	0x20000010
 8004be0:	200005dc 	.word	0x200005dc
 8004be4:	200005c8 	.word	0x200005c8
 8004be8:	200005c0 	.word	0x200005c0

08004bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <vTaskSuspendAll+0x18>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	4a03      	ldr	r2, [pc, #12]	; (8004c04 <vTaskSuspendAll+0x18>)
 8004bf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bfa:	bf00      	nop
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	200005e4 	.word	0x200005e4

08004c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c16:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <xTaskResumeAll+0x114>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	603b      	str	r3, [r7, #0]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c34:	f000 fed6 	bl	80059e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c38:	4b38      	ldr	r3, [pc, #224]	; (8004d1c <xTaskResumeAll+0x114>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	4a37      	ldr	r2, [pc, #220]	; (8004d1c <xTaskResumeAll+0x114>)
 8004c40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c42:	4b36      	ldr	r3, [pc, #216]	; (8004d1c <xTaskResumeAll+0x114>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d161      	bne.n	8004d0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c4a:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <xTaskResumeAll+0x118>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d05d      	beq.n	8004d0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c52:	e02e      	b.n	8004cb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c54:	4b33      	ldr	r3, [pc, #204]	; (8004d24 <xTaskResumeAll+0x11c>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3318      	adds	r3, #24
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff f8f4 	bl	8003e4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff f8ef 	bl	8003e4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	2201      	movs	r2, #1
 8004c76:	409a      	lsls	r2, r3
 8004c78:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <xTaskResumeAll+0x120>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	4a2a      	ldr	r2, [pc, #168]	; (8004d28 <xTaskResumeAll+0x120>)
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4a27      	ldr	r2, [pc, #156]	; (8004d2c <xTaskResumeAll+0x124>)
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7ff f87b 	bl	8003d94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <xTaskResumeAll+0x128>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <xTaskResumeAll+0x12c>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <xTaskResumeAll+0x11c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1cc      	bne.n	8004c54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cc0:	f000 fb1e 	bl	8005300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <xTaskResumeAll+0x130>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cd0:	f000 f836 	bl	8004d40 <xTaskIncrementTick>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <xTaskResumeAll+0x12c>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f1      	bne.n	8004cd0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004cec:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <xTaskResumeAll+0x130>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <xTaskResumeAll+0x12c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <xTaskResumeAll+0x134>)
 8004d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d0e:	f000 fe99 	bl	8005a44 <vPortExitCritical>

	return xAlreadyYielded;
 8004d12:	68bb      	ldr	r3, [r7, #8]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	200005e4 	.word	0x200005e4
 8004d20:	200005bc 	.word	0x200005bc
 8004d24:	2000057c 	.word	0x2000057c
 8004d28:	200005c4 	.word	0x200005c4
 8004d2c:	200004c0 	.word	0x200004c0
 8004d30:	200004bc 	.word	0x200004bc
 8004d34:	200005d0 	.word	0x200005d0
 8004d38:	200005cc 	.word	0x200005cc
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4a:	4b4e      	ldr	r3, [pc, #312]	; (8004e84 <xTaskIncrementTick+0x144>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 808e 	bne.w	8004e70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d54:	4b4c      	ldr	r3, [pc, #304]	; (8004e88 <xTaskIncrementTick+0x148>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d5c:	4a4a      	ldr	r2, [pc, #296]	; (8004e88 <xTaskIncrementTick+0x148>)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d120      	bne.n	8004daa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d68:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <xTaskIncrementTick+0x14c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	603b      	str	r3, [r7, #0]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xTaskIncrementTick+0x46>
 8004d88:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <xTaskIncrementTick+0x14c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	4b40      	ldr	r3, [pc, #256]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a3e      	ldr	r2, [pc, #248]	; (8004e8c <xTaskIncrementTick+0x14c>)
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4a3e      	ldr	r2, [pc, #248]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b3d      	ldr	r3, [pc, #244]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a3c      	ldr	r2, [pc, #240]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	f000 faab 	bl	8005300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004daa:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <xTaskIncrementTick+0x158>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d348      	bcc.n	8004e46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004db4:	4b35      	ldr	r3, [pc, #212]	; (8004e8c <xTaskIncrementTick+0x14c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <xTaskIncrementTick+0x158>)
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	601a      	str	r2, [r3, #0]
					break;
 8004dc6:	e03e      	b.n	8004e46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc8:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <xTaskIncrementTick+0x14c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d203      	bcs.n	8004de8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004de0:	4a2d      	ldr	r2, [pc, #180]	; (8004e98 <xTaskIncrementTick+0x158>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004de6:	e02e      	b.n	8004e46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff f82e 	bl	8003e4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3318      	adds	r3, #24
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff f825 	bl	8003e4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	2201      	movs	r2, #1
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <xTaskIncrementTick+0x15c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	4a22      	ldr	r2, [pc, #136]	; (8004e9c <xTaskIncrementTick+0x15c>)
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <xTaskIncrementTick+0x160>)
 8004e24:	441a      	add	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fe ffb1 	bl	8003d94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <xTaskIncrementTick+0x164>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d3b9      	bcc.n	8004db4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e44:	e7b6      	b.n	8004db4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e46:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <xTaskIncrementTick+0x164>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	4914      	ldr	r1, [pc, #80]	; (8004ea0 <xTaskIncrementTick+0x160>)
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d901      	bls.n	8004e62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <xTaskIncrementTick+0x168>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e004      	b.n	8004e7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e70:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <xTaskIncrementTick+0x16c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	4a0d      	ldr	r2, [pc, #52]	; (8004eac <xTaskIncrementTick+0x16c>)
 8004e78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e7a:	697b      	ldr	r3, [r7, #20]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	200005e4 	.word	0x200005e4
 8004e88:	200005c0 	.word	0x200005c0
 8004e8c:	20000574 	.word	0x20000574
 8004e90:	20000578 	.word	0x20000578
 8004e94:	200005d4 	.word	0x200005d4
 8004e98:	200005dc 	.word	0x200005dc
 8004e9c:	200005c4 	.word	0x200005c4
 8004ea0:	200004c0 	.word	0x200004c0
 8004ea4:	200004bc 	.word	0x200004bc
 8004ea8:	200005d0 	.word	0x200005d0
 8004eac:	200005cc 	.word	0x200005cc

08004eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eb6:	4b29      	ldr	r3, [pc, #164]	; (8004f5c <vTaskSwitchContext+0xac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <vTaskSwitchContext+0xb0>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ec4:	e044      	b.n	8004f50 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <vTaskSwitchContext+0xb0>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ecc:	4b25      	ldr	r3, [pc, #148]	; (8004f64 <vTaskSwitchContext+0xb4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	fab3 f383 	clz	r3, r3
 8004ed8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004eda:	7afb      	ldrb	r3, [r7, #11]
 8004edc:	f1c3 031f 	rsb	r3, r3, #31
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	4921      	ldr	r1, [pc, #132]	; (8004f68 <vTaskSwitchContext+0xb8>)
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	607b      	str	r3, [r7, #4]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <vTaskSwitchContext+0x5a>
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <vTaskSwitchContext+0xb8>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d104      	bne.n	8004f3c <vTaskSwitchContext+0x8c>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <vTaskSwitchContext+0xbc>)
 8004f44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <vTaskSwitchContext+0xbc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	334c      	adds	r3, #76	; 0x4c
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <vTaskSwitchContext+0xc0>)
 8004f4e:	6013      	str	r3, [r2, #0]
}
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	200005e4 	.word	0x200005e4
 8004f60:	200005d0 	.word	0x200005d0
 8004f64:	200005c4 	.word	0x200005c4
 8004f68:	200004c0 	.word	0x200004c0
 8004f6c:	200004bc 	.word	0x200004bc
 8004f70:	20000010 	.word	0x20000010

08004f74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	60fb      	str	r3, [r7, #12]
}
 8004f96:	bf00      	nop
 8004f98:	e7fe      	b.n	8004f98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <vTaskPlaceOnEventList+0x44>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3318      	adds	r3, #24
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fe ff1a 	bl	8003ddc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fa8:	2101      	movs	r1, #1
 8004faa:	6838      	ldr	r0, [r7, #0]
 8004fac:	f000 fb84 	bl	80056b8 <prvAddCurrentTaskToDelayedList>
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	200004bc 	.word	0x200004bc

08004fbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	60fb      	str	r3, [r7, #12]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	3318      	adds	r3, #24
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fe ff2e 	bl	8003e4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <xTaskRemoveFromEventList+0xac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11c      	bne.n	8005034 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe ff25 	bl	8003e4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	2201      	movs	r2, #1
 800500a:	409a      	lsls	r2, r3
 800500c:	4b17      	ldr	r3, [pc, #92]	; (800506c <xTaskRemoveFromEventList+0xb0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4313      	orrs	r3, r2
 8005012:	4a16      	ldr	r2, [pc, #88]	; (800506c <xTaskRemoveFromEventList+0xb0>)
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4a13      	ldr	r2, [pc, #76]	; (8005070 <xTaskRemoveFromEventList+0xb4>)
 8005024:	441a      	add	r2, r3
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f7fe feb1 	bl	8003d94 <vListInsertEnd>
 8005032:	e005      	b.n	8005040 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3318      	adds	r3, #24
 8005038:	4619      	mov	r1, r3
 800503a:	480e      	ldr	r0, [pc, #56]	; (8005074 <xTaskRemoveFromEventList+0xb8>)
 800503c:	f7fe feaa 	bl	8003d94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <xTaskRemoveFromEventList+0xbc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	429a      	cmp	r2, r3
 800504c:	d905      	bls.n	800505a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800504e:	2301      	movs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <xTaskRemoveFromEventList+0xc0>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e001      	b.n	800505e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800505e:	697b      	ldr	r3, [r7, #20]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	200005e4 	.word	0x200005e4
 800506c:	200005c4 	.word	0x200005c4
 8005070:	200004c0 	.word	0x200004c0
 8005074:	2000057c 	.word	0x2000057c
 8005078:	200004bc 	.word	0x200004bc
 800507c:	200005d0 	.word	0x200005d0

08005080 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <vTaskInternalSetTimeOutState+0x24>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <vTaskInternalSetTimeOutState+0x28>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	605a      	str	r2, [r3, #4]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	200005d4 	.word	0x200005d4
 80050a8:	200005c0 	.word	0x200005c0

080050ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	613b      	str	r3, [r7, #16]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60fb      	str	r3, [r7, #12]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050ee:	f000 fc79 	bl	80059e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050f2:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <xTaskCheckForTimeOut+0xbc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d102      	bne.n	8005112 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e023      	b.n	800515a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <xTaskCheckForTimeOut+0xc0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d007      	beq.n	800512e <xTaskCheckForTimeOut+0x82>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e015      	b.n	800515a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	d20b      	bcs.n	8005150 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ff9b 	bl	8005080 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	e004      	b.n	800515a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005156:	2301      	movs	r3, #1
 8005158:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800515a:	f000 fc73 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 800515e:	69fb      	ldr	r3, [r7, #28]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	200005c0 	.word	0x200005c0
 800516c:	200005d4 	.word	0x200005d4

08005170 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <vTaskMissedYield+0x14>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	200005d0 	.word	0x200005d0

08005188 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005190:	f000 f854 	bl	800523c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <prvIdleTask+0x2c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d907      	bls.n	80051ac <prvIdleTask+0x24>
			{
				taskYIELD();
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <prvIdleTask+0x30>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80051ac:	f7fb f99a 	bl	80004e4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80051b0:	e7ee      	b.n	8005190 <prvIdleTask+0x8>
 80051b2:	bf00      	nop
 80051b4:	200004c0 	.word	0x200004c0
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	e00c      	b.n	80051e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4a12      	ldr	r2, [pc, #72]	; (800521c <prvInitialiseTaskLists+0x60>)
 80051d4:	4413      	add	r3, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fe fdaf 	bl	8003d3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3301      	adds	r3, #1
 80051e0:	607b      	str	r3, [r7, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b06      	cmp	r3, #6
 80051e6:	d9ef      	bls.n	80051c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051e8:	480d      	ldr	r0, [pc, #52]	; (8005220 <prvInitialiseTaskLists+0x64>)
 80051ea:	f7fe fda6 	bl	8003d3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051ee:	480d      	ldr	r0, [pc, #52]	; (8005224 <prvInitialiseTaskLists+0x68>)
 80051f0:	f7fe fda3 	bl	8003d3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051f4:	480c      	ldr	r0, [pc, #48]	; (8005228 <prvInitialiseTaskLists+0x6c>)
 80051f6:	f7fe fda0 	bl	8003d3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051fa:	480c      	ldr	r0, [pc, #48]	; (800522c <prvInitialiseTaskLists+0x70>)
 80051fc:	f7fe fd9d 	bl	8003d3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005200:	480b      	ldr	r0, [pc, #44]	; (8005230 <prvInitialiseTaskLists+0x74>)
 8005202:	f7fe fd9a 	bl	8003d3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <prvInitialiseTaskLists+0x78>)
 8005208:	4a05      	ldr	r2, [pc, #20]	; (8005220 <prvInitialiseTaskLists+0x64>)
 800520a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <prvInitialiseTaskLists+0x7c>)
 800520e:	4a05      	ldr	r2, [pc, #20]	; (8005224 <prvInitialiseTaskLists+0x68>)
 8005210:	601a      	str	r2, [r3, #0]
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	200004c0 	.word	0x200004c0
 8005220:	2000054c 	.word	0x2000054c
 8005224:	20000560 	.word	0x20000560
 8005228:	2000057c 	.word	0x2000057c
 800522c:	20000590 	.word	0x20000590
 8005230:	200005a8 	.word	0x200005a8
 8005234:	20000574 	.word	0x20000574
 8005238:	20000578 	.word	0x20000578

0800523c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005242:	e019      	b.n	8005278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005244:	f000 fbce 	bl	80059e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005248:	4b10      	ldr	r3, [pc, #64]	; (800528c <prvCheckTasksWaitingTermination+0x50>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe fdfa 	bl	8003e4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <prvCheckTasksWaitingTermination+0x54>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3b01      	subs	r3, #1
 8005260:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <prvCheckTasksWaitingTermination+0x54>)
 8005262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <prvCheckTasksWaitingTermination+0x58>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3b01      	subs	r3, #1
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <prvCheckTasksWaitingTermination+0x58>)
 800526c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800526e:	f000 fbe9 	bl	8005a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f810 	bl	8005298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <prvCheckTasksWaitingTermination+0x58>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e1      	bne.n	8005244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000590 	.word	0x20000590
 8005290:	200005bc 	.word	0x200005bc
 8005294:	200005a4 	.word	0x200005a4

08005298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	334c      	adds	r3, #76	; 0x4c
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 f957 	bl	8006558 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d108      	bne.n	80052c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fd81 	bl	8005dc0 <vPortFree>
				vPortFree( pxTCB );
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fd7e 	bl	8005dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052c4:	e018      	b.n	80052f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d103      	bne.n	80052d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fd75 	bl	8005dc0 <vPortFree>
	}
 80052d6:	e00f      	b.n	80052f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d00a      	beq.n	80052f8 <prvDeleteTCB+0x60>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60fb      	str	r3, [r7, #12]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <prvDeleteTCB+0x5e>
	}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <prvResetNextTaskUnblockTime+0x38>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <prvResetNextTaskUnblockTime+0x3c>)
 8005312:	f04f 32ff 	mov.w	r2, #4294967295
 8005316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005318:	e008      	b.n	800532c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531a:	4b07      	ldr	r3, [pc, #28]	; (8005338 <prvResetNextTaskUnblockTime+0x38>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <prvResetNextTaskUnblockTime+0x3c>)
 800532a:	6013      	str	r3, [r2, #0]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20000574 	.word	0x20000574
 800533c:	200005dc 	.word	0x200005dc

08005340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <xTaskGetSchedulerState+0x34>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800534e:	2301      	movs	r3, #1
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	e008      	b.n	8005366 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <xTaskGetSchedulerState+0x38>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800535c:	2302      	movs	r3, #2
 800535e:	607b      	str	r3, [r7, #4]
 8005360:	e001      	b.n	8005366 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005366:	687b      	ldr	r3, [r7, #4]
	}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	200005c8 	.word	0x200005c8
 8005378:	200005e4 	.word	0x200005e4

0800537c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d05e      	beq.n	8005450 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005396:	4b31      	ldr	r3, [pc, #196]	; (800545c <xTaskPriorityInherit+0xe0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	429a      	cmp	r2, r3
 800539e:	d24e      	bcs.n	800543e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	db06      	blt.n	80053b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a8:	4b2c      	ldr	r3, [pc, #176]	; (800545c <xTaskPriorityInherit+0xe0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	f1c3 0207 	rsb	r2, r3, #7
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6959      	ldr	r1, [r3, #20]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4a26      	ldr	r2, [pc, #152]	; (8005460 <xTaskPriorityInherit+0xe4>)
 80053c8:	4413      	add	r3, r2
 80053ca:	4299      	cmp	r1, r3
 80053cc:	d12f      	bne.n	800542e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fd3b 	bl	8003e4e <uxListRemove>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	2201      	movs	r2, #1
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43da      	mvns	r2, r3
 80053ea:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <xTaskPriorityInherit+0xe8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4013      	ands	r3, r2
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <xTaskPriorityInherit+0xe8>)
 80053f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053f4:	4b19      	ldr	r3, [pc, #100]	; (800545c <xTaskPriorityInherit+0xe0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	2201      	movs	r2, #1
 8005404:	409a      	lsls	r2, r3
 8005406:	4b17      	ldr	r3, [pc, #92]	; (8005464 <xTaskPriorityInherit+0xe8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4313      	orrs	r3, r2
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <xTaskPriorityInherit+0xe8>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4a10      	ldr	r2, [pc, #64]	; (8005460 <xTaskPriorityInherit+0xe4>)
 800541e:	441a      	add	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f7fe fcb4 	bl	8003d94 <vListInsertEnd>
 800542c:	e004      	b.n	8005438 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <xTaskPriorityInherit+0xe0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e008      	b.n	8005450 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <xTaskPriorityInherit+0xe0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	429a      	cmp	r2, r3
 800544a:	d201      	bcs.n	8005450 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005450:	68fb      	ldr	r3, [r7, #12]
	}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	200004bc 	.word	0x200004bc
 8005460:	200004c0 	.word	0x200004c0
 8005464:	200005c4 	.word	0x200005c4

08005468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d06e      	beq.n	800555c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800547e:	4b3a      	ldr	r3, [pc, #232]	; (8005568 <xTaskPriorityDisinherit+0x100>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d00a      	beq.n	800549e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	60fb      	str	r3, [r7, #12]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60bb      	str	r3, [r7, #8]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d044      	beq.n	800555c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d140      	bne.n	800555c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3304      	adds	r3, #4
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fcb5 	bl	8003e4e <uxListRemove>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d115      	bne.n	8005516 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ee:	491f      	ldr	r1, [pc, #124]	; (800556c <xTaskPriorityDisinherit+0x104>)
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xTaskPriorityDisinherit+0xae>
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	2201      	movs	r2, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43da      	mvns	r2, r3
 800550c:	4b18      	ldr	r3, [pc, #96]	; (8005570 <xTaskPriorityDisinherit+0x108>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4013      	ands	r3, r2
 8005512:	4a17      	ldr	r2, [pc, #92]	; (8005570 <xTaskPriorityDisinherit+0x108>)
 8005514:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	f1c3 0207 	rsb	r2, r3, #7
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	2201      	movs	r2, #1
 8005530:	409a      	lsls	r2, r3
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <xTaskPriorityDisinherit+0x108>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4313      	orrs	r3, r2
 8005538:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <xTaskPriorityDisinherit+0x108>)
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4a08      	ldr	r2, [pc, #32]	; (800556c <xTaskPriorityDisinherit+0x104>)
 800554a:	441a      	add	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f7fe fc1e 	bl	8003d94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800555c:	697b      	ldr	r3, [r7, #20]
	}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200004bc 	.word	0x200004bc
 800556c:	200004c0 	.word	0x200004c0
 8005570:	200005c4 	.word	0x200005c4

08005574 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005582:	2301      	movs	r3, #1
 8005584:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d077      	beq.n	800567c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60fb      	str	r3, [r7, #12]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d902      	bls.n	80055ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e002      	b.n	80055c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d058      	beq.n	800567c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d153      	bne.n	800567c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80055d4:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d10a      	bne.n	80055f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	60bb      	str	r3, [r7, #8]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	db04      	blt.n	8005612 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f1c3 0207 	rsb	r2, r3, #7
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	6959      	ldr	r1, [r3, #20]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4a19      	ldr	r2, [pc, #100]	; (8005688 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005622:	4413      	add	r3, r2
 8005624:	4299      	cmp	r1, r3
 8005626:	d129      	bne.n	800567c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	3304      	adds	r3, #4
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe fc0e 	bl	8003e4e <uxListRemove>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	2201      	movs	r2, #1
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43da      	mvns	r2, r3
 8005644:	4b11      	ldr	r3, [pc, #68]	; (800568c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4013      	ands	r3, r2
 800564a:	4a10      	ldr	r2, [pc, #64]	; (800568c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800564c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	2201      	movs	r2, #1
 8005654:	409a      	lsls	r2, r3
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4313      	orrs	r3, r2
 800565c:	4a0b      	ldr	r2, [pc, #44]	; (800568c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4a06      	ldr	r2, [pc, #24]	; (8005688 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800566e:	441a      	add	r2, r3
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7fe fb8c 	bl	8003d94 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800567c:	bf00      	nop
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200004bc 	.word	0x200004bc
 8005688:	200004c0 	.word	0x200004c0
 800568c:	200005c4 	.word	0x200005c4

08005690 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005694:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056a2:	3201      	adds	r2, #1
 80056a4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80056a6:	4b03      	ldr	r3, [pc, #12]	; (80056b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80056a8:	681b      	ldr	r3, [r3, #0]
	}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	200004bc 	.word	0x200004bc

080056b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056c2:	4b29      	ldr	r3, [pc, #164]	; (8005768 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fbbd 	bl	8003e4e <uxListRemove>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056da:	4b24      	ldr	r3, [pc, #144]	; (800576c <prvAddCurrentTaskToDelayedList+0xb4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	2201      	movs	r2, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	43da      	mvns	r2, r3
 80056e8:	4b21      	ldr	r3, [pc, #132]	; (8005770 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4013      	ands	r3, r2
 80056ee:	4a20      	ldr	r2, [pc, #128]	; (8005770 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d10a      	bne.n	8005710 <prvAddCurrentTaskToDelayedList+0x58>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005700:	4b1a      	ldr	r3, [pc, #104]	; (800576c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	481a      	ldr	r0, [pc, #104]	; (8005774 <prvAddCurrentTaskToDelayedList+0xbc>)
 800570a:	f7fe fb43 	bl	8003d94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800570e:	e026      	b.n	800575e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4413      	add	r3, r2
 8005716:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <prvAddCurrentTaskToDelayedList+0xb4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	429a      	cmp	r2, r3
 8005726:	d209      	bcs.n	800573c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005728:	4b13      	ldr	r3, [pc, #76]	; (8005778 <prvAddCurrentTaskToDelayedList+0xc0>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <prvAddCurrentTaskToDelayedList+0xb4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fe fb51 	bl	8003ddc <vListInsert>
}
 800573a:	e010      	b.n	800575e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <prvAddCurrentTaskToDelayedList+0xc4>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f7fe fb47 	bl	8003ddc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	429a      	cmp	r2, r3
 8005756:	d202      	bcs.n	800575e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005758:	4a09      	ldr	r2, [pc, #36]	; (8005780 <prvAddCurrentTaskToDelayedList+0xc8>)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6013      	str	r3, [r2, #0]
}
 800575e:	bf00      	nop
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	200005c0 	.word	0x200005c0
 800576c:	200004bc 	.word	0x200004bc
 8005770:	200005c4 	.word	0x200005c4
 8005774:	200005a8 	.word	0x200005a8
 8005778:	20000578 	.word	0x20000578
 800577c:	20000574 	.word	0x20000574
 8005780:	200005dc 	.word	0x200005dc

08005784 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3b04      	subs	r3, #4
 8005794:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800579c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057b4:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <pxPortInitialiseStack+0x64>)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b14      	subs	r3, #20
 80057be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b04      	subs	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f06f 0202 	mvn.w	r2, #2
 80057d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b20      	subs	r3, #32
 80057d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	080057ed 	.word	0x080057ed

080057ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <prvTaskExitError+0x54>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d00a      	beq.n	8005816 <prvTaskExitError+0x2a>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60fb      	str	r3, [r7, #12]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <prvTaskExitError+0x28>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800582a:	bf00      	nop
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0fc      	beq.n	800582c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	2000000c 	.word	0x2000000c
	...

08005850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <pxCurrentTCBConst2>)
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	6808      	ldr	r0, [r1, #0]
 8005856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585a:	f380 8809 	msr	PSP, r0
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8811 	msr	BASEPRI, r0
 800586a:	4770      	bx	lr
 800586c:	f3af 8000 	nop.w

08005870 <pxCurrentTCBConst2>:
 8005870:	200004bc 	.word	0x200004bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop

08005878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005878:	4808      	ldr	r0, [pc, #32]	; (800589c <prvPortStartFirstTask+0x24>)
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	6800      	ldr	r0, [r0, #0]
 800587e:	f380 8808 	msr	MSP, r0
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8814 	msr	CONTROL, r0
 800588a:	b662      	cpsie	i
 800588c:	b661      	cpsie	f
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	df00      	svc	0
 8005898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800589a:	bf00      	nop
 800589c:	e000ed08 	.word	0xe000ed08

080058a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058a6:	4b46      	ldr	r3, [pc, #280]	; (80059c0 <xPortStartScheduler+0x120>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a46      	ldr	r2, [pc, #280]	; (80059c4 <xPortStartScheduler+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10a      	bne.n	80058c6 <xPortStartScheduler+0x26>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	613b      	str	r3, [r7, #16]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058c6:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <xPortStartScheduler+0x120>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3f      	ldr	r2, [pc, #252]	; (80059c8 <xPortStartScheduler+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10a      	bne.n	80058e6 <xPortStartScheduler+0x46>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <xPortStartScheduler+0x12c>)
 80058e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005908:	b2da      	uxtb	r2, r3
 800590a:	4b31      	ldr	r3, [pc, #196]	; (80059d0 <xPortStartScheduler+0x130>)
 800590c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800590e:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <xPortStartScheduler+0x134>)
 8005910:	2207      	movs	r2, #7
 8005912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005914:	e009      	b.n	800592a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005916:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <xPortStartScheduler+0x134>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	4a2d      	ldr	r2, [pc, #180]	; (80059d4 <xPortStartScheduler+0x134>)
 800591e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	b2db      	uxtb	r3, r3
 8005928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d0ef      	beq.n	8005916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005936:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <xPortStartScheduler+0x134>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1c3 0307 	rsb	r3, r3, #7
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00a      	beq.n	8005958 <xPortStartScheduler+0xb8>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60bb      	str	r3, [r7, #8]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <xPortStartScheduler+0x134>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <xPortStartScheduler+0x134>)
 8005960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <xPortStartScheduler+0x134>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800596a:	4a1a      	ldr	r2, [pc, #104]	; (80059d4 <xPortStartScheduler+0x134>)
 800596c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005976:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <xPortStartScheduler+0x138>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <xPortStartScheduler+0x138>)
 800597c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005982:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <xPortStartScheduler+0x138>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a14      	ldr	r2, [pc, #80]	; (80059d8 <xPortStartScheduler+0x138>)
 8005988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800598c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800598e:	f000 f8dd 	bl	8005b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <xPortStartScheduler+0x13c>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005998:	f000 f8fc 	bl	8005b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <xPortStartScheduler+0x140>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0f      	ldr	r2, [pc, #60]	; (80059e0 <xPortStartScheduler+0x140>)
 80059a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059a8:	f7ff ff66 	bl	8005878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059ac:	f7ff fa80 	bl	8004eb0 <vTaskSwitchContext>
	prvTaskExitError();
 80059b0:	f7ff ff1c 	bl	80057ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	e000ed00 	.word	0xe000ed00
 80059c4:	410fc271 	.word	0x410fc271
 80059c8:	410fc270 	.word	0x410fc270
 80059cc:	e000e400 	.word	0xe000e400
 80059d0:	200005e8 	.word	0x200005e8
 80059d4:	200005ec 	.word	0x200005ec
 80059d8:	e000ed20 	.word	0xe000ed20
 80059dc:	2000000c 	.word	0x2000000c
 80059e0:	e000ef34 	.word	0xe000ef34

080059e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	607b      	str	r3, [r7, #4]
}
 80059fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a0d      	ldr	r2, [pc, #52]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10f      	bne.n	8005a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <vPortEnterCritical+0x5c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	603b      	str	r3, [r7, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <vPortEnterCritical+0x4a>
	}
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	e000ed04 	.word	0xe000ed04

08005a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <vPortExitCritical+0x50>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <vPortExitCritical+0x24>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	607b      	str	r3, [r7, #4]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <vPortExitCritical+0x50>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <vPortExitCritical+0x50>)
 8005a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <vPortExitCritical+0x50>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <vPortExitCritical+0x42>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f383 8811 	msr	BASEPRI, r3
}
 8005a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	2000000c 	.word	0x2000000c
	...

08005aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005aa0:	f3ef 8009 	mrs	r0, PSP
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <pxCurrentTCBConst>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f01e 0f10 	tst.w	lr, #16
 8005ab0:	bf08      	it	eq
 8005ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aba:	6010      	str	r0, [r2, #0]
 8005abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ac4:	f380 8811 	msr	BASEPRI, r0
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f7ff f9ee 	bl	8004eb0 <vTaskSwitchContext>
 8005ad4:	f04f 0000 	mov.w	r0, #0
 8005ad8:	f380 8811 	msr	BASEPRI, r0
 8005adc:	bc09      	pop	{r0, r3}
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	6808      	ldr	r0, [r1, #0]
 8005ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae6:	f01e 0f10 	tst.w	lr, #16
 8005aea:	bf08      	it	eq
 8005aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005af0:	f380 8809 	msr	PSP, r0
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	f3af 8000 	nop.w

08005b00 <pxCurrentTCBConst>:
 8005b00:	200004bc 	.word	0x200004bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop

08005b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
}
 8005b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b22:	f7ff f90d 	bl	8004d40 <xTaskIncrementTick>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <SysTick_Handler+0x40>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <vPortSetupTimerInterrupt+0x38>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <vPortSetupTimerInterrupt+0x3c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <vPortSetupTimerInterrupt+0x40>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <vPortSetupTimerInterrupt+0x44>)
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b70:	2207      	movs	r2, #7
 8005b72:	601a      	str	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	e000e010 	.word	0xe000e010
 8005b84:	e000e018 	.word	0xe000e018
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	10624dd3 	.word	0x10624dd3
 8005b90:	e000e014 	.word	0xe000e014

08005b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ba4 <vPortEnableVFP+0x10>
 8005b98:	6801      	ldr	r1, [r0, #0]
 8005b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b9e:	6001      	str	r1, [r0, #0]
 8005ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ba2:	bf00      	nop
 8005ba4:	e000ed88 	.word	0xe000ed88

08005ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bae:	f3ef 8305 	mrs	r3, IPSR
 8005bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d914      	bls.n	8005be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <vPortValidateInterruptPriority+0x70>)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bc4:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <vPortValidateInterruptPriority+0x74>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	7afa      	ldrb	r2, [r7, #11]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d20a      	bcs.n	8005be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005be4:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <vPortValidateInterruptPriority+0x78>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <vPortValidateInterruptPriority+0x7c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d90a      	bls.n	8005c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	603b      	str	r3, [r7, #0]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <vPortValidateInterruptPriority+0x60>
	}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000e3f0 	.word	0xe000e3f0
 8005c1c:	200005e8 	.word	0x200005e8
 8005c20:	e000ed0c 	.word	0xe000ed0c
 8005c24:	200005ec 	.word	0x200005ec

08005c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c34:	f7fe ffda 	bl	8004bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c38:	4b5b      	ldr	r3, [pc, #364]	; (8005da8 <pvPortMalloc+0x180>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c40:	f000 f920 	bl	8005e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c44:	4b59      	ldr	r3, [pc, #356]	; (8005dac <pvPortMalloc+0x184>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8093 	bne.w	8005d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01d      	beq.n	8005c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c58:	2208      	movs	r2, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d014      	beq.n	8005c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f023 0307 	bic.w	r3, r3, #7
 8005c70:	3308      	adds	r3, #8
 8005c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <pvPortMalloc+0x6c>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	617b      	str	r3, [r7, #20]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d06e      	beq.n	8005d78 <pvPortMalloc+0x150>
 8005c9a:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <pvPortMalloc+0x188>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d869      	bhi.n	8005d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ca4:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <pvPortMalloc+0x18c>)
 8005ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ca8:	4b42      	ldr	r3, [pc, #264]	; (8005db4 <pvPortMalloc+0x18c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cae:	e004      	b.n	8005cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d903      	bls.n	8005ccc <pvPortMalloc+0xa4>
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f1      	bne.n	8005cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ccc:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <pvPortMalloc+0x180>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d050      	beq.n	8005d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2208      	movs	r2, #8
 8005cdc:	4413      	add	r3, r2
 8005cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d91f      	bls.n	8005d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <pvPortMalloc+0xf8>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	613b      	str	r3, [r7, #16]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d32:	69b8      	ldr	r0, [r7, #24]
 8005d34:	f000 f908 	bl	8005f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <pvPortMalloc+0x188>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	4a1b      	ldr	r2, [pc, #108]	; (8005db0 <pvPortMalloc+0x188>)
 8005d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d46:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <pvPortMalloc+0x188>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <pvPortMalloc+0x190>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d203      	bcs.n	8005d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d52:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <pvPortMalloc+0x188>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <pvPortMalloc+0x190>)
 8005d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <pvPortMalloc+0x184>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <pvPortMalloc+0x194>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <pvPortMalloc+0x194>)
 8005d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d78:	f7fe ff46 	bl	8004c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <pvPortMalloc+0x174>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	60fb      	str	r3, [r7, #12]
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <pvPortMalloc+0x172>
	return pvReturn;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3728      	adds	r7, #40	; 0x28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	200041f8 	.word	0x200041f8
 8005dac:	2000420c 	.word	0x2000420c
 8005db0:	200041fc 	.word	0x200041fc
 8005db4:	200041f0 	.word	0x200041f0
 8005db8:	20004200 	.word	0x20004200
 8005dbc:	20004204 	.word	0x20004204

08005dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d04d      	beq.n	8005e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <vPortFree+0xb8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <vPortFree+0x44>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60fb      	str	r3, [r7, #12]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <vPortFree+0x62>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60bb      	str	r3, [r7, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <vPortFree+0xb8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01e      	beq.n	8005e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d11a      	bne.n	8005e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <vPortFree+0xb8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	401a      	ands	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e48:	f7fe fed0 	bl	8004bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <vPortFree+0xbc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4413      	add	r3, r2
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <vPortFree+0xbc>)
 8005e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e5a:	6938      	ldr	r0, [r7, #16]
 8005e5c:	f000 f874 	bl	8005f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <vPortFree+0xc0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <vPortFree+0xc0>)
 8005e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e6a:	f7fe fecd 	bl	8004c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e6e:	bf00      	nop
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	2000420c 	.word	0x2000420c
 8005e7c:	200041fc 	.word	0x200041fc
 8005e80:	20004208 	.word	0x20004208

08005e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e90:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <prvHeapInit+0xac>)
 8005e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0307 	bic.w	r3, r3, #7
 8005eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	4a1f      	ldr	r2, [pc, #124]	; (8005f30 <prvHeapInit+0xac>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <prvHeapInit+0xb0>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <prvHeapInit+0xb0>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <prvHeapInit+0xb4>)
 8005ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <prvHeapInit+0xb4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <prvHeapInit+0xb4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <prvHeapInit+0xb4>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a0a      	ldr	r2, [pc, #40]	; (8005f3c <prvHeapInit+0xb8>)
 8005f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <prvHeapInit+0xbc>)
 8005f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <prvHeapInit+0xc0>)
 8005f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	200005f0 	.word	0x200005f0
 8005f34:	200041f0 	.word	0x200041f0
 8005f38:	200041f8 	.word	0x200041f8
 8005f3c:	20004200 	.word	0x20004200
 8005f40:	200041fc 	.word	0x200041fc
 8005f44:	2000420c 	.word	0x2000420c

08005f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f50:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <prvInsertBlockIntoFreeList+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e002      	b.n	8005f5c <prvInsertBlockIntoFreeList+0x14>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d8f7      	bhi.n	8005f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d108      	bne.n	8005f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	441a      	add	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d118      	bne.n	8005fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d00d      	beq.n	8005fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	e008      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e003      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d002      	beq.n	8005fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	200041f0 	.word	0x200041f0
 8005ff8:	200041f8 	.word	0x200041f8

08005ffc <arm_fir_f32>:
 8005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006000:	ed2d 8b10 	vpush	{d8-d15}
 8006004:	b089      	sub	sp, #36	; 0x24
 8006006:	4605      	mov	r5, r0
 8006008:	9003      	str	r0, [sp, #12]
 800600a:	8800      	ldrh	r0, [r0, #0]
 800600c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8006010:	9304      	str	r3, [sp, #16]
 8006012:	461e      	mov	r6, r3
 8006014:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8006018:	3b01      	subs	r3, #1
 800601a:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 800601e:	08f3      	lsrs	r3, r6, #3
 8006020:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8006024:	9001      	str	r0, [sp, #4]
 8006026:	4625      	mov	r5, r4
 8006028:	9400      	str	r4, [sp, #0]
 800602a:	9302      	str	r3, [sp, #8]
 800602c:	f000 81ee 	beq.w	800640c <arm_fir_f32+0x410>
 8006030:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8006034:	469e      	mov	lr, r3
 8006036:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800603a:	1f1e      	subs	r6, r3, #4
 800603c:	4604      	mov	r4, r0
 800603e:	9605      	str	r6, [sp, #20]
 8006040:	eb08 0003 	add.w	r0, r8, r3
 8006044:	f004 0a07 	and.w	sl, r4, #7
 8006048:	4613      	mov	r3, r2
 800604a:	f10c 0420 	add.w	r4, ip, #32
 800604e:	f8cd c018 	str.w	ip, [sp, #24]
 8006052:	4684      	mov	ip, r0
 8006054:	4648      	mov	r0, r9
 8006056:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800605a:	9107      	str	r1, [sp, #28]
 800605c:	f105 0720 	add.w	r7, r5, #32
 8006060:	f101 0620 	add.w	r6, r1, #32
 8006064:	f102 0520 	add.w	r5, r2, #32
 8006068:	4652      	mov	r2, sl
 800606a:	469a      	mov	sl, r3
 800606c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8006070:	f847 3c20 	str.w	r3, [r7, #-32]
 8006074:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8006078:	f847 3c1c 	str.w	r3, [r7, #-28]
 800607c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8006080:	f847 3c18 	str.w	r3, [r7, #-24]
 8006084:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8006088:	f847 3c14 	str.w	r3, [r7, #-20]
 800608c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8006090:	f847 3c10 	str.w	r3, [r7, #-16]
 8006094:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8006098:	f847 3c0c 	str.w	r3, [r7, #-12]
 800609c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80060a0:	f847 3c08 	str.w	r3, [r7, #-8]
 80060a4:	eddf 3af1 	vldr	s7, [pc, #964]	; 800646c <arm_fir_f32+0x470>
 80060a8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80060ac:	f847 3c04 	str.w	r3, [r7, #-4]
 80060b0:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 80060b4:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 80060b8:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80060bc:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 80060c0:	ed14 1a04 	vldr	s2, [r4, #-16]
 80060c4:	ed54 0a03 	vldr	s1, [r4, #-12]
 80060c8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80060cc:	1f21      	subs	r1, r4, #4
 80060ce:	eef0 8a63 	vmov.f32	s17, s7
 80060d2:	eef0 9a63 	vmov.f32	s19, s7
 80060d6:	eef0 aa63 	vmov.f32	s21, s7
 80060da:	eef0 ba63 	vmov.f32	s23, s7
 80060de:	eeb0 ca63 	vmov.f32	s24, s7
 80060e2:	eef0 ca63 	vmov.f32	s25, s7
 80060e6:	eeb0 da63 	vmov.f32	s26, s7
 80060ea:	2800      	cmp	r0, #0
 80060ec:	f000 81e8 	beq.w	80064c0 <arm_fir_f32+0x4c4>
 80060f0:	f108 0120 	add.w	r1, r8, #32
 80060f4:	f104 031c 	add.w	r3, r4, #28
 80060f8:	4683      	mov	fp, r0
 80060fa:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 80060fe:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8006102:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8006106:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 800610a:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 800610e:	ed11 6a04 	vldr	s12, [r1, #-16]
 8006112:	ed51 6a03 	vldr	s13, [r1, #-12]
 8006116:	ed11 7a02 	vldr	s14, [r1, #-8]
 800611a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800611e:	ee23 fa04 	vmul.f32	s30, s6, s8
 8006122:	ee62 ea84 	vmul.f32	s29, s5, s8
 8006126:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 800612a:	ee22 ea04 	vmul.f32	s28, s4, s8
 800612e:	ee61 da84 	vmul.f32	s27, s3, s8
 8006132:	ee21 ba04 	vmul.f32	s22, s2, s8
 8006136:	ee20 aa84 	vmul.f32	s20, s1, s8
 800613a:	ee20 9a04 	vmul.f32	s18, s0, s8
 800613e:	ee28 4a04 	vmul.f32	s8, s16, s8
 8006142:	ee62 fa24 	vmul.f32	s31, s4, s9
 8006146:	ee3c ca0e 	vadd.f32	s24, s24, s28
 800614a:	ee7b baad 	vadd.f32	s23, s23, s27
 800614e:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8006152:	ee61 da24 	vmul.f32	s27, s2, s9
 8006156:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800615a:	ee79 9a8a 	vadd.f32	s19, s19, s20
 800615e:	ee20 baa4 	vmul.f32	s22, s1, s9
 8006162:	ee20 aa24 	vmul.f32	s20, s0, s9
 8006166:	ee3d da0f 	vadd.f32	s26, s26, s30
 800616a:	ee7c caae 	vadd.f32	s25, s25, s29
 800616e:	ee22 faa4 	vmul.f32	s30, s5, s9
 8006172:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006176:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 800617a:	ee28 9a24 	vmul.f32	s18, s16, s9
 800617e:	ee73 3a84 	vadd.f32	s7, s7, s8
 8006182:	ee63 4a24 	vmul.f32	s9, s6, s9
 8006186:	ee22 4a05 	vmul.f32	s8, s4, s10
 800618a:	ee61 ea05 	vmul.f32	s29, s2, s10
 800618e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8006192:	ee3d da0f 	vadd.f32	s26, s26, s30
 8006196:	ee7c caaf 	vadd.f32	s25, s25, s31
 800619a:	ee20 fa85 	vmul.f32	s30, s1, s10
 800619e:	ee61 fa85 	vmul.f32	s31, s3, s10
 80061a2:	ee3c ea0e 	vadd.f32	s28, s24, s28
 80061a6:	ee7b daad 	vadd.f32	s27, s23, s27
 80061aa:	ee3a ba8b 	vadd.f32	s22, s21, s22
 80061ae:	ee60 ba05 	vmul.f32	s23, s0, s10
 80061b2:	ee68 aa05 	vmul.f32	s21, s16, s10
 80061b6:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80061ba:	ee78 8a89 	vadd.f32	s17, s17, s18
 80061be:	ee73 3aa4 	vadd.f32	s7, s7, s9
 80061c2:	ee63 4a05 	vmul.f32	s9, s6, s10
 80061c6:	ee22 5a85 	vmul.f32	s10, s5, s10
 80061ca:	ee21 9a25 	vmul.f32	s18, s2, s11
 80061ce:	ee20 ca25 	vmul.f32	s24, s0, s11
 80061d2:	ee3d da04 	vadd.f32	s26, s26, s8
 80061d6:	ee7c caaf 	vadd.f32	s25, s25, s31
 80061da:	ee21 4aa5 	vmul.f32	s8, s3, s11
 80061de:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80061e2:	ed53 1a04 	vldr	s3, [r3, #-16]
 80061e6:	ee60 eaa5 	vmul.f32	s29, s1, s11
 80061ea:	ee7d da8f 	vadd.f32	s27, s27, s30
 80061ee:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80061f2:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80061f6:	ee68 ba25 	vmul.f32	s23, s16, s11
 80061fa:	ee63 aa25 	vmul.f32	s21, s6, s11
 80061fe:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8006202:	ee73 3a85 	vadd.f32	s7, s7, s10
 8006206:	ee22 5aa5 	vmul.f32	s10, s5, s11
 800620a:	ee62 5a25 	vmul.f32	s11, s4, s11
 800620e:	ee61 4a06 	vmul.f32	s9, s2, s12
 8006212:	ee60 9a86 	vmul.f32	s19, s1, s12
 8006216:	ee60 fa06 	vmul.f32	s31, s0, s12
 800621a:	ed13 1a03 	vldr	s2, [r3, #-12]
 800621e:	ee23 fa06 	vmul.f32	s30, s6, s12
 8006222:	ee3d da04 	vadd.f32	s26, s26, s8
 8006226:	ee7c ca89 	vadd.f32	s25, s25, s18
 800622a:	ee3e ea2e 	vadd.f32	s28, s28, s29
 800622e:	ee28 9a06 	vmul.f32	s18, s16, s12
 8006232:	ee7d da8c 	vadd.f32	s27, s27, s24
 8006236:	ee3b ba2b 	vadd.f32	s22, s22, s23
 800623a:	ee22 ca86 	vmul.f32	s24, s5, s12
 800623e:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8006242:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006246:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800624a:	ee62 5a06 	vmul.f32	s11, s4, s12
 800624e:	ee21 6a86 	vmul.f32	s12, s3, s12
 8006252:	ee20 4a26 	vmul.f32	s8, s0, s13
 8006256:	ee63 ea26 	vmul.f32	s29, s6, s13
 800625a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 800625e:	ee22 5a26 	vmul.f32	s10, s4, s13
 8006262:	ee3d da24 	vadd.f32	s26, s26, s9
 8006266:	ee7c caa9 	vadd.f32	s25, s25, s19
 800626a:	ee60 4aa6 	vmul.f32	s9, s1, s13
 800626e:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8006272:	ed53 0a02 	vldr	s1, [r3, #-8]
 8006276:	ee68 fa26 	vmul.f32	s31, s16, s13
 800627a:	ee7d da89 	vadd.f32	s27, s27, s18
 800627e:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8006282:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8006286:	ee22 faa6 	vmul.f32	s30, s5, s13
 800628a:	ee73 3a86 	vadd.f32	s7, s7, s12
 800628e:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8006292:	ee61 6a26 	vmul.f32	s13, s2, s13
 8006296:	ee60 aa07 	vmul.f32	s21, s0, s14
 800629a:	ee28 ca07 	vmul.f32	s24, s16, s14
 800629e:	ee63 ba07 	vmul.f32	s23, s6, s14
 80062a2:	ee7a 9a05 	vadd.f32	s19, s20, s10
 80062a6:	ee78 8a86 	vadd.f32	s17, s17, s12
 80062aa:	ee3d da24 	vadd.f32	s26, s26, s9
 80062ae:	ee7c ca84 	vadd.f32	s25, s25, s8
 80062b2:	ee7d daae 	vadd.f32	s27, s27, s29
 80062b6:	ee22 9a07 	vmul.f32	s18, s4, s14
 80062ba:	ee62 ea87 	vmul.f32	s29, s5, s14
 80062be:	ee61 5a87 	vmul.f32	s11, s3, s14
 80062c2:	ee73 3aa6 	vadd.f32	s7, s7, s13
 80062c6:	ed13 0a01 	vldr	s0, [r3, #-4]
 80062ca:	ee61 6a07 	vmul.f32	s13, s2, s14
 80062ce:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80062d2:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80062d6:	ee20 7a87 	vmul.f32	s14, s1, s14
 80062da:	ee68 4a27 	vmul.f32	s9, s16, s15
 80062de:	ee3d da2a 	vadd.f32	s26, s26, s21
 80062e2:	ee7c ca8c 	vadd.f32	s25, s25, s24
 80062e6:	ee23 8a27 	vmul.f32	s16, s6, s15
 80062ea:	ee3e ea2b 	vadd.f32	s28, s28, s23
 80062ee:	ee22 4aa7 	vmul.f32	s8, s5, s15
 80062f2:	ee22 aa27 	vmul.f32	s20, s4, s15
 80062f6:	ee21 5aa7 	vmul.f32	s10, s3, s15
 80062fa:	ee21 6a27 	vmul.f32	s12, s2, s15
 80062fe:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8006302:	ee7d daae 	vadd.f32	s27, s27, s29
 8006306:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800630a:	ee3b ba09 	vadd.f32	s22, s22, s18
 800630e:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8006312:	ee73 3a87 	vadd.f32	s7, s7, s14
 8006316:	ee60 7a27 	vmul.f32	s15, s0, s15
 800631a:	f1bb 0b01 	subs.w	fp, fp, #1
 800631e:	f101 0120 	add.w	r1, r1, #32
 8006322:	ee3d da24 	vadd.f32	s26, s26, s9
 8006326:	ee7c ca88 	vadd.f32	s25, s25, s16
 800632a:	ee3e ca04 	vadd.f32	s24, s28, s8
 800632e:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8006332:	ee7b aa05 	vadd.f32	s21, s22, s10
 8006336:	ee79 9a86 	vadd.f32	s19, s19, s12
 800633a:	ee76 8aa8 	vadd.f32	s17, s13, s17
 800633e:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8006342:	f103 0320 	add.w	r3, r3, #32
 8006346:	f47f aed8 	bne.w	80060fa <arm_fir_f32+0xfe>
 800634a:	eb09 0104 	add.w	r1, r9, r4
 800634e:	46e3      	mov	fp, ip
 8006350:	b3a2      	cbz	r2, 80063bc <arm_fir_f32+0x3c0>
 8006352:	4613      	mov	r3, r2
 8006354:	ecbb 6a01 	vldmia	fp!, {s12}
 8006358:	ecf1 7a01 	vldmia	r1!, {s15}
 800635c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8006360:	ee22 4a86 	vmul.f32	s8, s5, s12
 8006364:	ee62 4a06 	vmul.f32	s9, s4, s12
 8006368:	ee21 5a86 	vmul.f32	s10, s3, s12
 800636c:	ee61 5a06 	vmul.f32	s11, s2, s12
 8006370:	ee60 6a86 	vmul.f32	s13, s1, s12
 8006374:	ee20 7a06 	vmul.f32	s14, s0, s12
 8006378:	ee27 6a86 	vmul.f32	s12, s15, s12
 800637c:	3b01      	subs	r3, #1
 800637e:	ee3d da03 	vadd.f32	s26, s26, s6
 8006382:	ee7c ca84 	vadd.f32	s25, s25, s8
 8006386:	eeb0 3a62 	vmov.f32	s6, s5
 800638a:	ee3c ca24 	vadd.f32	s24, s24, s9
 800638e:	eef0 2a42 	vmov.f32	s5, s4
 8006392:	ee7b ba85 	vadd.f32	s23, s23, s10
 8006396:	eeb0 2a61 	vmov.f32	s4, s3
 800639a:	ee7a aaa5 	vadd.f32	s21, s21, s11
 800639e:	eef0 1a41 	vmov.f32	s3, s2
 80063a2:	ee79 9aa6 	vadd.f32	s19, s19, s13
 80063a6:	eeb0 1a60 	vmov.f32	s2, s1
 80063aa:	ee78 8a87 	vadd.f32	s17, s17, s14
 80063ae:	eef0 0a40 	vmov.f32	s1, s0
 80063b2:	ee73 3a86 	vadd.f32	s7, s7, s12
 80063b6:	eeb0 0a67 	vmov.f32	s0, s15
 80063ba:	d1cb      	bne.n	8006354 <arm_fir_f32+0x358>
 80063bc:	f1be 0e01 	subs.w	lr, lr, #1
 80063c0:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 80063c4:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 80063c8:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 80063cc:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 80063d0:	ed45 aa04 	vstr	s21, [r5, #-16]
 80063d4:	ed45 9a03 	vstr	s19, [r5, #-12]
 80063d8:	ed45 8a02 	vstr	s17, [r5, #-8]
 80063dc:	ed45 3a01 	vstr	s7, [r5, #-4]
 80063e0:	f107 0720 	add.w	r7, r7, #32
 80063e4:	f106 0620 	add.w	r6, r6, #32
 80063e8:	f104 0420 	add.w	r4, r4, #32
 80063ec:	f105 0520 	add.w	r5, r5, #32
 80063f0:	f47f ae3c 	bne.w	800606c <arm_fir_f32+0x70>
 80063f4:	9b02      	ldr	r3, [sp, #8]
 80063f6:	9800      	ldr	r0, [sp, #0]
 80063f8:	f8dd c018 	ldr.w	ip, [sp, #24]
 80063fc:	9907      	ldr	r1, [sp, #28]
 80063fe:	015b      	lsls	r3, r3, #5
 8006400:	4652      	mov	r2, sl
 8006402:	4418      	add	r0, r3
 8006404:	9000      	str	r0, [sp, #0]
 8006406:	4419      	add	r1, r3
 8006408:	449c      	add	ip, r3
 800640a:	441a      	add	r2, r3
 800640c:	9b04      	ldr	r3, [sp, #16]
 800640e:	f013 0e07 	ands.w	lr, r3, #7
 8006412:	d01f      	beq.n	8006454 <arm_fir_f32+0x458>
 8006414:	9f00      	ldr	r7, [sp, #0]
 8006416:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800641a:	4676      	mov	r6, lr
 800641c:	4665      	mov	r5, ip
 800641e:	f851 3b04 	ldr.w	r3, [r1], #4
 8006422:	eddf 6a12 	vldr	s13, [pc, #72]	; 800646c <arm_fir_f32+0x470>
 8006426:	f847 3b04 	str.w	r3, [r7], #4
 800642a:	4644      	mov	r4, r8
 800642c:	464b      	mov	r3, r9
 800642e:	4628      	mov	r0, r5
 8006430:	ecb0 7a01 	vldmia	r0!, {s14}
 8006434:	ecf4 7a01 	vldmia	r4!, {s15}
 8006438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643c:	3b01      	subs	r3, #1
 800643e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006442:	d1f5      	bne.n	8006430 <arm_fir_f32+0x434>
 8006444:	3e01      	subs	r6, #1
 8006446:	ece2 6a01 	vstmia	r2!, {s13}
 800644a:	f105 0504 	add.w	r5, r5, #4
 800644e:	d1e6      	bne.n	800641e <arm_fir_f32+0x422>
 8006450:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8006454:	9b01      	ldr	r3, [sp, #4]
 8006456:	1e59      	subs	r1, r3, #1
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	088e      	lsrs	r6, r1, #2
 800645c:	685c      	ldr	r4, [r3, #4]
 800645e:	d020      	beq.n	80064a2 <arm_fir_f32+0x4a6>
 8006460:	f104 0210 	add.w	r2, r4, #16
 8006464:	f10c 0310 	add.w	r3, ip, #16
 8006468:	4630      	mov	r0, r6
 800646a:	e001      	b.n	8006470 <arm_fir_f32+0x474>
 800646c:	00000000 	.word	0x00000000
 8006470:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8006474:	f842 5c10 	str.w	r5, [r2, #-16]
 8006478:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800647c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8006480:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8006484:	f842 5c08 	str.w	r5, [r2, #-8]
 8006488:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800648c:	f842 5c04 	str.w	r5, [r2, #-4]
 8006490:	3801      	subs	r0, #1
 8006492:	f103 0310 	add.w	r3, r3, #16
 8006496:	f102 0210 	add.w	r2, r2, #16
 800649a:	d1e9      	bne.n	8006470 <arm_fir_f32+0x474>
 800649c:	0133      	lsls	r3, r6, #4
 800649e:	441c      	add	r4, r3
 80064a0:	449c      	add	ip, r3
 80064a2:	f011 0303 	ands.w	r3, r1, #3
 80064a6:	d006      	beq.n	80064b6 <arm_fir_f32+0x4ba>
 80064a8:	4622      	mov	r2, r4
 80064aa:	f85c 1b04 	ldr.w	r1, [ip], #4
 80064ae:	f842 1b04 	str.w	r1, [r2], #4
 80064b2:	3b01      	subs	r3, #1
 80064b4:	d1f9      	bne.n	80064aa <arm_fir_f32+0x4ae>
 80064b6:	b009      	add	sp, #36	; 0x24
 80064b8:	ecbd 8b10 	vpop	{d8-d15}
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	46c3      	mov	fp, r8
 80064c2:	e745      	b.n	8006350 <arm_fir_f32+0x354>

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	; (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	; (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	; (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	; (8006508 <__libc_init_array+0x44>)
 80064d8:	f000 f8f2 	bl	80066c0 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	0800679c 	.word	0x0800679c
 8006500:	0800679c 	.word	0x0800679c
 8006504:	0800679c 	.word	0x0800679c
 8006508:	080067a0 	.word	0x080067a0

0800650c <__retarget_lock_acquire_recursive>:
 800650c:	4770      	bx	lr

0800650e <__retarget_lock_release_recursive>:
 800650e:	4770      	bx	lr

08006510 <memcpy>:
 8006510:	440a      	add	r2, r1
 8006512:	4291      	cmp	r1, r2
 8006514:	f100 33ff 	add.w	r3, r0, #4294967295
 8006518:	d100      	bne.n	800651c <memcpy+0xc>
 800651a:	4770      	bx	lr
 800651c:	b510      	push	{r4, lr}
 800651e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006526:	4291      	cmp	r1, r2
 8006528:	d1f9      	bne.n	800651e <memcpy+0xe>
 800652a:	bd10      	pop	{r4, pc}

0800652c <memset>:
 800652c:	4402      	add	r2, r0
 800652e:	4603      	mov	r3, r0
 8006530:	4293      	cmp	r3, r2
 8006532:	d100      	bne.n	8006536 <memset+0xa>
 8006534:	4770      	bx	lr
 8006536:	f803 1b01 	strb.w	r1, [r3], #1
 800653a:	e7f9      	b.n	8006530 <memset+0x4>

0800653c <cleanup_glue>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	460c      	mov	r4, r1
 8006540:	6809      	ldr	r1, [r1, #0]
 8006542:	4605      	mov	r5, r0
 8006544:	b109      	cbz	r1, 800654a <cleanup_glue+0xe>
 8006546:	f7ff fff9 	bl	800653c <cleanup_glue>
 800654a:	4621      	mov	r1, r4
 800654c:	4628      	mov	r0, r5
 800654e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006552:	f000 b869 	b.w	8006628 <_free_r>
	...

08006558 <_reclaim_reent>:
 8006558:	4b2c      	ldr	r3, [pc, #176]	; (800660c <_reclaim_reent+0xb4>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4283      	cmp	r3, r0
 800655e:	b570      	push	{r4, r5, r6, lr}
 8006560:	4604      	mov	r4, r0
 8006562:	d051      	beq.n	8006608 <_reclaim_reent+0xb0>
 8006564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006566:	b143      	cbz	r3, 800657a <_reclaim_reent+0x22>
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d14a      	bne.n	8006604 <_reclaim_reent+0xac>
 800656e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	b111      	cbz	r1, 800657a <_reclaim_reent+0x22>
 8006574:	4620      	mov	r0, r4
 8006576:	f000 f857 	bl	8006628 <_free_r>
 800657a:	6961      	ldr	r1, [r4, #20]
 800657c:	b111      	cbz	r1, 8006584 <_reclaim_reent+0x2c>
 800657e:	4620      	mov	r0, r4
 8006580:	f000 f852 	bl	8006628 <_free_r>
 8006584:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006586:	b111      	cbz	r1, 800658e <_reclaim_reent+0x36>
 8006588:	4620      	mov	r0, r4
 800658a:	f000 f84d 	bl	8006628 <_free_r>
 800658e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006590:	b111      	cbz	r1, 8006598 <_reclaim_reent+0x40>
 8006592:	4620      	mov	r0, r4
 8006594:	f000 f848 	bl	8006628 <_free_r>
 8006598:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800659a:	b111      	cbz	r1, 80065a2 <_reclaim_reent+0x4a>
 800659c:	4620      	mov	r0, r4
 800659e:	f000 f843 	bl	8006628 <_free_r>
 80065a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80065a4:	b111      	cbz	r1, 80065ac <_reclaim_reent+0x54>
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 f83e 	bl	8006628 <_free_r>
 80065ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80065ae:	b111      	cbz	r1, 80065b6 <_reclaim_reent+0x5e>
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 f839 	bl	8006628 <_free_r>
 80065b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80065b8:	b111      	cbz	r1, 80065c0 <_reclaim_reent+0x68>
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f834 	bl	8006628 <_free_r>
 80065c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065c2:	b111      	cbz	r1, 80065ca <_reclaim_reent+0x72>
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 f82f 	bl	8006628 <_free_r>
 80065ca:	69a3      	ldr	r3, [r4, #24]
 80065cc:	b1e3      	cbz	r3, 8006608 <_reclaim_reent+0xb0>
 80065ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065d0:	4620      	mov	r0, r4
 80065d2:	4798      	blx	r3
 80065d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065d6:	b1b9      	cbz	r1, 8006608 <_reclaim_reent+0xb0>
 80065d8:	4620      	mov	r0, r4
 80065da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065de:	f7ff bfad 	b.w	800653c <cleanup_glue>
 80065e2:	5949      	ldr	r1, [r1, r5]
 80065e4:	b941      	cbnz	r1, 80065f8 <_reclaim_reent+0xa0>
 80065e6:	3504      	adds	r5, #4
 80065e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ea:	2d80      	cmp	r5, #128	; 0x80
 80065ec:	68d9      	ldr	r1, [r3, #12]
 80065ee:	d1f8      	bne.n	80065e2 <_reclaim_reent+0x8a>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 f819 	bl	8006628 <_free_r>
 80065f6:	e7ba      	b.n	800656e <_reclaim_reent+0x16>
 80065f8:	680e      	ldr	r6, [r1, #0]
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 f814 	bl	8006628 <_free_r>
 8006600:	4631      	mov	r1, r6
 8006602:	e7ef      	b.n	80065e4 <_reclaim_reent+0x8c>
 8006604:	2500      	movs	r5, #0
 8006606:	e7ef      	b.n	80065e8 <_reclaim_reent+0x90>
 8006608:	bd70      	pop	{r4, r5, r6, pc}
 800660a:	bf00      	nop
 800660c:	20000010 	.word	0x20000010

08006610 <__malloc_lock>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__malloc_lock+0x8>)
 8006612:	f7ff bf7b 	b.w	800650c <__retarget_lock_acquire_recursive>
 8006616:	bf00      	nop
 8006618:	20004210 	.word	0x20004210

0800661c <__malloc_unlock>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__malloc_unlock+0x8>)
 800661e:	f7ff bf76 	b.w	800650e <__retarget_lock_release_recursive>
 8006622:	bf00      	nop
 8006624:	20004210 	.word	0x20004210

08006628 <_free_r>:
 8006628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800662a:	2900      	cmp	r1, #0
 800662c:	d044      	beq.n	80066b8 <_free_r+0x90>
 800662e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006632:	9001      	str	r0, [sp, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f1a1 0404 	sub.w	r4, r1, #4
 800663a:	bfb8      	it	lt
 800663c:	18e4      	addlt	r4, r4, r3
 800663e:	f7ff ffe7 	bl	8006610 <__malloc_lock>
 8006642:	4a1e      	ldr	r2, [pc, #120]	; (80066bc <_free_r+0x94>)
 8006644:	9801      	ldr	r0, [sp, #4]
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	b933      	cbnz	r3, 8006658 <_free_r+0x30>
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6014      	str	r4, [r2, #0]
 800664e:	b003      	add	sp, #12
 8006650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006654:	f7ff bfe2 	b.w	800661c <__malloc_unlock>
 8006658:	42a3      	cmp	r3, r4
 800665a:	d908      	bls.n	800666e <_free_r+0x46>
 800665c:	6825      	ldr	r5, [r4, #0]
 800665e:	1961      	adds	r1, r4, r5
 8006660:	428b      	cmp	r3, r1
 8006662:	bf01      	itttt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	1949      	addeq	r1, r1, r5
 800666a:	6021      	streq	r1, [r4, #0]
 800666c:	e7ed      	b.n	800664a <_free_r+0x22>
 800666e:	461a      	mov	r2, r3
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	b10b      	cbz	r3, 8006678 <_free_r+0x50>
 8006674:	42a3      	cmp	r3, r4
 8006676:	d9fa      	bls.n	800666e <_free_r+0x46>
 8006678:	6811      	ldr	r1, [r2, #0]
 800667a:	1855      	adds	r5, r2, r1
 800667c:	42a5      	cmp	r5, r4
 800667e:	d10b      	bne.n	8006698 <_free_r+0x70>
 8006680:	6824      	ldr	r4, [r4, #0]
 8006682:	4421      	add	r1, r4
 8006684:	1854      	adds	r4, r2, r1
 8006686:	42a3      	cmp	r3, r4
 8006688:	6011      	str	r1, [r2, #0]
 800668a:	d1e0      	bne.n	800664e <_free_r+0x26>
 800668c:	681c      	ldr	r4, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	6053      	str	r3, [r2, #4]
 8006692:	4421      	add	r1, r4
 8006694:	6011      	str	r1, [r2, #0]
 8006696:	e7da      	b.n	800664e <_free_r+0x26>
 8006698:	d902      	bls.n	80066a0 <_free_r+0x78>
 800669a:	230c      	movs	r3, #12
 800669c:	6003      	str	r3, [r0, #0]
 800669e:	e7d6      	b.n	800664e <_free_r+0x26>
 80066a0:	6825      	ldr	r5, [r4, #0]
 80066a2:	1961      	adds	r1, r4, r5
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf04      	itt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	bf04      	itt	eq
 80066b0:	1949      	addeq	r1, r1, r5
 80066b2:	6021      	streq	r1, [r4, #0]
 80066b4:	6054      	str	r4, [r2, #4]
 80066b6:	e7ca      	b.n	800664e <_free_r+0x26>
 80066b8:	b003      	add	sp, #12
 80066ba:	bd30      	pop	{r4, r5, pc}
 80066bc:	20004214 	.word	0x20004214

080066c0 <_init>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	bf00      	nop
 80066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c6:	bc08      	pop	{r3}
 80066c8:	469e      	mov	lr, r3
 80066ca:	4770      	bx	lr

080066cc <_fini>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr
